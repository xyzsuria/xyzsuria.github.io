<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Pygame 1</title>
    <url>/2020/02/04/Pygame-1/</url>
    <content><![CDATA[<h2 id="小游戏"><a href="#小游戏" class="headerlink" title="小游戏"></a>小游戏</h2><p>今天在B站偶然看到嵩天老师的课<a href="https://www.bilibili.com/video/av19574503?p=3" target="_blank" rel="noopener">Python游戏开发教程</a></p>
<p>其中有一个命令行可以来玩Pygame的小游戏 <code>python -m pygame.examples.aliens</code><br><img src="p10_1.PNG" alt="游戏页面"></p>
<p>操控键盘左右移动下面的小坦克。</p>
<h3 id="蹦跶的小球"><a href="#蹦跶的小球" class="headerlink" title="蹦跶的小球"></a>蹦跶的小球</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">pygame.init()</span><br><span class="line">size = width, height = <span class="number">600</span>, <span class="number">400</span></span><br><span class="line">speed = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">Black = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">screen = pygame.display.set_mode(size)</span><br><span class="line">ball = pygame.image.load(<span class="string">"PYG02-ball.gif"</span>)</span><br><span class="line">ballrect = ball.get_rect()</span><br><span class="line"><span class="comment"># 获取小球位置</span></span><br><span class="line">fps = <span class="number">300</span></span><br><span class="line">fclock = pygame.time.Clock()</span><br><span class="line"><span class="comment"># 事件处理</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">    ballrect = ballrect.move(speed[<span class="number">0</span>], speed[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> ballrect.left &lt; <span class="number">0</span> <span class="keyword">or</span> ballrect.right &gt; width:</span><br><span class="line">        speed[<span class="number">0</span>] = - speed[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> ballrect.top &lt; <span class="number">0</span> <span class="keyword">or</span> ballrect.bottom &gt; height:</span><br><span class="line">        speed[<span class="number">1</span>] = - speed[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 窗口刷新</span></span><br><span class="line">    screen.fill(Black)</span><br><span class="line">    screen.blit(ball, ballrect)</span><br><span class="line">    pygame.display.update()</span><br><span class="line">    fclock.tick()</span><br></pre></td></tr></table></figure>
<h5 id="Surface对象-ball-get-rect"><a href="#Surface对象-ball-get-rect" class="headerlink" title="Surface对象 ball.get_rect()"></a>Surface对象 <code>ball.get_rect()</code></h5><p>Pygame使用内部定义的Surface对象标识所有载入图像，其中<code>.get_rect()</code>方法返回一个覆盖图像的矩形Rect对象。</p>
<p>Rect对象有一些重要属性，比如：top,bottom,left,right表示上下左右；width，height表示宽度、高度。</p>
<p>小球移动<code>ballrect.move(speed[0], speed[1])</code></p>
<p>小球反弹，设置限制。</p>
<p><code>screen.fill(color)</code>显示窗口背景填充，采用RGB彩色体系。默认为白色。</p>
<p><code>screen.bilt(src, dest)</code>将一个图像绘制在另一个图像上，即将src绘制到dest位置上。</p>
<h4 id="控制小球运动速度"><a href="#控制小球运动速度" class="headerlink" title="控制小球运动速度"></a>控制小球运动速度</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fps = <span class="number">300</span> <span class="comment"># Frames per Second 每秒帧率参数</span></span><br><span class="line">fclock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line">pygame.time.Clock()</span><br><span class="line"><span class="comment"># 创建一个Clock对象，用于操作时间</span></span><br></pre></td></tr></table></figure>
<p><code>fclock.tick(fps)</code>控制帧速度，即窗口刷新速度。</p>
<p>clock.tick(100)表示每秒钟100次帧刷新视频中展示的静态图像为帧。</p>
<h4 id="用户参与控制小球"><a href="#用户参与控制小球" class="headerlink" title="用户参与控制小球"></a>用户参与控制小球</h4><p>使用<code>pygame.KEYDOWN</code>定义用户对小球的操控。<br><img src="小球.PNG" alt="小球"><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame,sys</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">size = width, height = <span class="number">600</span>, <span class="number">400</span></span><br><span class="line">speed = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">BLACK = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">screen = pygame.display.set_mode(size)</span><br><span class="line">pygame.display.set_caption(<span class="string">"Pygame壁球"</span>)</span><br><span class="line">ball = pygame.image.load(<span class="string">"PYG02-ball.gif"</span>)</span><br><span class="line">ballrect = ball.get_rect()</span><br><span class="line">fps = <span class="number">300</span></span><br><span class="line">fclock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 引入键盘操作</span></span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_LEFT:</span><br><span class="line">                speed[<span class="number">0</span>] = speed[<span class="number">0</span>] <span class="keyword">if</span> speed[<span class="number">0</span>] == <span class="number">0</span> <span class="keyword">else</span> (abs(speed[<span class="number">0</span>]<span class="number">-1</span>)*int(speed[<span class="number">0</span>]/abs(speed[<span class="number">0</span>])))</span><br><span class="line">            <span class="keyword">elif</span> event.key == pygame.K_RIGHT:</span><br><span class="line">                speed[<span class="number">0</span>] = speed[<span class="number">0</span>] + <span class="number">1</span> <span class="keyword">if</span> speed[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">else</span> speed[<span class="number">0</span>] - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> event.key == pygame.K_UP:</span><br><span class="line">                speed[<span class="number">1</span>] = speed[<span class="number">1</span>] + <span class="number">1</span> <span class="keyword">if</span> speed[<span class="number">1</span>] &gt; <span class="number">0</span> <span class="keyword">else</span> speed[<span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> event.key == pygame.K_DOWN:</span><br><span class="line">                speed[<span class="number">1</span>] = speed[<span class="number">1</span>] <span class="keyword">if</span> speed[<span class="number">1</span>] == <span class="number">0</span> <span class="keyword">else</span> (abs(speed[<span class="number">1</span>]<span class="number">-1</span>)*int(speed[<span class="number">1</span>]/abs(speed[<span class="number">1</span>])))</span><br><span class="line">    ballrect = ballrect.move(speed)</span><br><span class="line">    <span class="keyword">if</span> ballrect.left &lt; <span class="number">0</span> <span class="keyword">or</span> ballrect.right &gt; width:</span><br><span class="line">        speed[<span class="number">0</span>] = -speed[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> ballrect.top &lt; <span class="number">0</span> <span class="keyword">or</span> ballrect.bottom &gt; height:</span><br><span class="line">        speed[<span class="number">1</span>] = -speed[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    screen.fill(BLACK)</span><br><span class="line">    screen.blit(ball, ballrect)</span><br><span class="line">    pygame.display.update()</span><br><span class="line">    fclock.tick(fps)</span><br></pre></td></tr></table></figure></p>
<h3 id="Pygame屏幕绘制机制"><a href="#Pygame屏幕绘制机制" class="headerlink" title="Pygame屏幕绘制机制"></a>Pygame屏幕绘制机制</h3><p>Pygame采用的笛卡尔坐标系，尺寸以像素为单位。<br>屏幕控制需求有：</p>
<ol>
<li>游戏全屏</li>
<li>游戏屏幕大小可调节</li>
<li>游戏屏幕无边框</li>
<li>更改游戏标题栏内容</li>
<li>更改游戏图标</li>
</ol>
<h4 id="屏幕绘制的重要函数"><a href="#屏幕绘制的重要函数" class="headerlink" title="屏幕绘制的重要函数"></a>屏幕绘制的重要函数</h4><ol>
<li>屏幕尺寸和模式<br><code>pygame.display.set_mode(r=(0,0), flags=0)</code> <strong>设置相关屏幕模式</strong><br><strong>r</strong>是游戏屏幕的分辨率，采用 (width,height)方式输入<br><strong>flags</strong> 用来控制显示类型，可用|组合使用，常用显示标签如下：</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">显示标签</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">pygame.RESIZABLE</td>
<td style="text-align:center">窗口大小可调</td>
</tr>
<tr>
<td style="text-align:center">pygame.NOFRAME</td>
<td style="text-align:center">窗口没有边界显示</td>
</tr>
<tr>
<td style="text-align:center">pygame.FULLSCREEN</td>
<td style="text-align:center">窗口全屏显示</td>
</tr>
</tbody>
</table>
</div>
<p>注意：每种显示方式要配合相应的处理机制。</p>
<p><code>pygame.display.Info() 生成屏幕相关信息</code><br>产生一个显示信息对象<strong>VideoInfo</strong>，表示当前屏幕的参数信息在<code>.set_mode()</code>之前调用，两个参数十分重要</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">current_w:</td>
<td style="text-align:center">当前显示模式或窗口的像素宽度</td>
</tr>
<tr>
<td style="text-align:center">current_h:</td>
<td style="text-align:center">当前显示模式或窗口的像素高度</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>上面添加内容<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pygame.init()</span><br><span class="line"><span class="comment"># 全屏模式</span></span><br><span class="line">vInfo = pygame.display.Info()</span><br><span class="line">size = width, height = vInfo.current_w, vInfo.current_h</span><br></pre></td></tr></table></figure></li>
<li>在键盘操作后再加入一个判断<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elif</span> event.key == pygame.K_ESCAPE:</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
如此，按下Esc键之后就会退出游戏。</li>
</ul>
<p><strong>Pygame.VIDEORESIZE</strong>是一种窗口大小更改的事件，事件发生后，返回<code>event.size</code>元组，包含新窗口的宽度和高度，宽度：<code>.size[0]</code>或<code>event.w</code>；高度<code>.size[1]</code>或<code>event.h</code>。</p>
<p>返回参数仅在事件发生时有用。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 响应事件</span></span><br><span class="line"> <span class="keyword">elif</span> event.type == pygame.VIDEORESIZE:</span><br><span class="line">     size = width, height = event.size[<span class="number">0</span>], event.size[<span class="number">1</span>]</span><br><span class="line">     screen = pygame.display.set_mode(size, pygame.RESIZABLE)</span><br></pre></td></tr></table></figure></p>
<ol>
<li>窗口标题和图标</li>
</ol>
<ul>
<li><code>pygame.display.set_caption() 设置标题信息</code></li>
<li><p><code>pygame.display.set_icon() 设置图标信息</code><br><img src="图标下载.PNG" alt="图标下载网站"><br><img src="seticon.PNG" alt="图标设置"></p>
</li>
<li><p><code>pygame.display.get_caption() 获得图标</code><br>返回当前设置窗口的标题及小标题（一般不用）内容，返回结构为(title, icontitle)。</p>
</li>
</ul>
<ol>
<li>窗口感知和刷新<br><code>pygame.display.get_active()</code><br>当窗口在系统中显示（屏幕绘制/非图标化）时返回True,否则返回False。<br>该函数可以用来判断游戏窗口是否被最小化。<br><code>pygame.display.flip()</code><br>重新绘制整个屏幕对应的窗口<br><code>pygame.display.update()</code><br>仅仅绘制窗口中有变化的区域，update运行更快。</li>
</ol>
<p>在小球运动判断这一块加上<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> pygame.display.get_active():</span><br><span class="line">    ballrect = ballrect.move(speed[<span class="number">0</span>], speed[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p>
<h3 id="Pygame事件处理机制"><a href="#Pygame事件处理机制" class="headerlink" title="Pygame事件处理机制"></a>Pygame事件处理机制</h3><p>事件处理需求：响应用户键盘、鼠标等外设操作；响应屏幕尺寸和模式变化；响应游戏清洁的特定触发条件，产生一些触发事件……</p>
<p>Pygame <strong>事件队列</strong>（缓存并派发所有事件，原则上先到先处理），用户对事件逐一处理。</p>
<p><strong>pygame.event.EventType</strong>本质上是一种封装后的数据类型（对象），是Pygame的一个类，表示事件类型。</p>
<p>事件类型只有属性，没有方法。</p>
<p><img src="事件类型.PNG" alt="事件类型"></p>
<h4 id="键盘事件及类型的使用"><a href="#键盘事件及类型的使用" class="headerlink" title="键盘事件及类型的使用"></a>键盘事件及类型的使用</h4><p>键盘按下事件 <strong>pygame.event.KEYDOWN</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">返回值</th>
<th style="text-align:right">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">event.unicode</td>
<td style="text-align:right">按键的unicode码</td>
</tr>
<tr>
<td style="text-align:left">event.key</td>
<td style="text-align:right">按键的常量名称</td>
</tr>
<tr>
<td style="text-align:left">event.mod</td>
<td style="text-align:right">按键修饰符的组合值</td>
</tr>
</tbody>
</table>
</div>
<p>注意：unicode码与平台有关，不推荐使用。</p>
<p>键盘释放事件 <strong>pygame.event.KEYUP</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">返回值</th>
<th style="text-align:right">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">event.key</td>
<td style="text-align:right">按键的常量名称</td>
</tr>
<tr>
<td style="text-align:left">event.mod</td>
<td style="text-align:right">按键修饰符的组合值</td>
</tr>
</tbody>
</table>
</div>
<p><img src="按键的常量名称.PNG" alt="按键的常量名称"><br><img src="a-z.PNG" alt="a-z"></p>
<p><img src="修饰符.PNG" alt="按键修饰符"></p>
<p><strong>event.mot</strong> 修饰符的按位或运算</p>
<p><strong>event.mod = KMOD_ALT|KOMD_SHIFT</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame, sys</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">600</span>,<span class="number">400</span>))</span><br><span class="line">pygame.display.set_caption(<span class="string">"Pygame事件处理"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            <span class="keyword">if</span> event.unicode == <span class="string">""</span>:</span><br><span class="line">                print(<span class="string">"[KEYDOWN]:"</span>,<span class="string">"#"</span>,event.key, event.mod)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"[KEYDOWN]:"</span>,event.unicode,event.key, event.mod)</span><br><span class="line"></span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure>
<h4 id="鼠标事件及类型使用"><a href="#鼠标事件及类型使用" class="headerlink" title="鼠标事件及类型使用"></a>鼠标事件及类型使用</h4><p><strong>pygame.event.MOUSEMOTION</strong> 鼠标移动事件</p>
<p><img src="mousemotion.PNG" alt="mousemotion"></p>
<p><strong>pyagme.event.MOUSEBUTTONUP</strong> 鼠标释放事件<br><img src="mousebuttonup.PNG" alt="mousebuttonup"></p>
<p><strong>pygame.event.MOUSEBUTTONDOWN</strong> 鼠标键按下事件</p>
<p><img src="mousebuttondown.PNG" alt="mousebuttondown"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame, sys</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">600</span>,<span class="number">400</span>))</span><br><span class="line">pygame.display.set_caption(<span class="string">"Pygame事件处理"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            <span class="keyword">if</span> event.unicode == <span class="string">""</span>:</span><br><span class="line">                print(<span class="string">"[KEYDOWN]:"</span>,<span class="string">"#"</span>,event.key, event.mod)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"[KEYDOWN]:"</span>,event.unicode,event.key, event.mod)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.MOUSEMOTION:</span><br><span class="line">            print(<span class="string">"[MOUSEMOTION]:"</span>,event.pos, event.rel, event.buttons)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.MOUSEBUTTONUP:</span><br><span class="line">            print(<span class="string">"[MOUSEBUTTONUP]:"</span>,event.pos, event.button)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">            print(<span class="string">"[MOUSEBUTTONDOWN]:"</span>,event.pos, event.button)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure>
<p>用鼠标操作小球的运动<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame,sys</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line"><span class="comment"># 全屏模式</span></span><br><span class="line">vInfo = pygame.display.Info()</span><br><span class="line"><span class="comment"># size = width, height = vInfo.current_w, vInfo.current_h</span></span><br><span class="line"><span class="comment"># 设置一个监控鼠标状态的量</span></span><br><span class="line">status = <span class="literal">False</span></span><br><span class="line">size = width, height = <span class="number">600</span>, <span class="number">400</span></span><br><span class="line">speed = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">BLACK = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">screen = pygame.display.set_mode(size, pygame.RESIZABLE)</span><br><span class="line">pygame.display.set_caption(<span class="string">"Pygame壁球"</span>)</span><br><span class="line">ball = pygame.image.load(<span class="string">"PYG02-ball.gif"</span>)</span><br><span class="line">ballrect = ball.get_rect()</span><br><span class="line">fps = <span class="number">300</span></span><br><span class="line">fclock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 引入键盘操作</span></span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_LEFT:</span><br><span class="line">                speed[<span class="number">0</span>] = speed[<span class="number">0</span>] <span class="keyword">if</span> speed[<span class="number">0</span>] == <span class="number">0</span> <span class="keyword">else</span> (abs(speed[<span class="number">0</span>]<span class="number">-1</span>)*int(speed[<span class="number">0</span>]/abs(speed[<span class="number">0</span>])))</span><br><span class="line">            <span class="keyword">elif</span> event.key == pygame.K_RIGHT:</span><br><span class="line">                speed[<span class="number">0</span>] = speed[<span class="number">0</span>] + <span class="number">1</span> <span class="keyword">if</span> speed[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">else</span> speed[<span class="number">0</span>] - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> event.key == pygame.K_UP:</span><br><span class="line">                speed[<span class="number">1</span>] = speed[<span class="number">1</span>] + <span class="number">1</span> <span class="keyword">if</span> speed[<span class="number">1</span>] &gt; <span class="number">0</span> <span class="keyword">else</span> speed[<span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> event.key == pygame.K_DOWN:</span><br><span class="line">                speed[<span class="number">1</span>] = speed[<span class="number">1</span>] <span class="keyword">if</span> speed[<span class="number">1</span>] == <span class="number">0</span> <span class="keyword">else</span> (abs(speed[<span class="number">1</span>]<span class="number">-1</span>)*int(speed[<span class="number">1</span>]/abs(speed[<span class="number">1</span>])))</span><br><span class="line">            <span class="comment"># 按下 Esc 就会退出</span></span><br><span class="line">            <span class="comment"># elif event.key == pygame.K_ESCAPE:</span></span><br><span class="line">            <span class="comment">#     sys.exit(0)</span></span><br><span class="line">        <span class="comment"># 响应事件</span></span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.VIDEORESIZE:</span><br><span class="line">            size = width, height = event.size[<span class="number">0</span>], event.size[<span class="number">1</span>]</span><br><span class="line">            screen = pygame.display.set_mode(size, pygame.RESIZABLE)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">            <span class="keyword">if</span> event.button == <span class="number">1</span>:</span><br><span class="line">                status = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.MOUSEBUTTONUP:</span><br><span class="line">            status = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> event.button == <span class="number">1</span>:</span><br><span class="line">                ballrect = ballrect.move(event.pos[<span class="number">0</span>]-ballrect.left, event.pos[<span class="number">1</span>] - ballrect.top)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.MOUSEMOTION:</span><br><span class="line">            <span class="keyword">if</span> event.buttons[<span class="number">0</span>] == <span class="number">1</span>:</span><br><span class="line">                ballrect = ballrect.move(event.pos[<span class="number">0</span>] - ballrect.left, event.pos[<span class="number">1</span>] - ballrect.top)</span><br><span class="line"></span><br><span class="line">    ballrect = ballrect.move(speed)</span><br><span class="line">    <span class="comment"># 增加窗口最小化代码</span></span><br><span class="line">    <span class="keyword">if</span> pygame.display.get_active() <span class="keyword">and</span> <span class="keyword">not</span> status:</span><br><span class="line">        ballrect = ballrect.move(speed[<span class="number">0</span>], speed[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 因为小球运动到边缘处，一直取反，我们希望小球在边缘处反弹。 </span></span><br><span class="line">    <span class="keyword">if</span> ballrect.left &lt; <span class="number">0</span> <span class="keyword">or</span> ballrect.right &gt; width:</span><br><span class="line">        speed[<span class="number">0</span>] = -speed[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> ballrect.right &gt; width <span class="keyword">and</span> ballrect.right + speed[<span class="number">0</span>] &gt; ballrect.right:</span><br><span class="line">            speed[<span class="number">0</span>] = -speed[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> ballrect.top &lt; <span class="number">0</span> <span class="keyword">or</span> ballrect.bottom &gt; height:</span><br><span class="line">        speed[<span class="number">1</span>] = -speed[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> ballrect.bottom &gt; height <span class="keyword">and</span> ballrect.bottom + speed[<span class="number">1</span>] &gt;ballrect.bottom:</span><br><span class="line">            speed[<span class="number">1</span>] = -speed[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    screen.fill(BLACK)</span><br><span class="line">    screen.blit(ball, ballrect)</span><br><span class="line">    pygame.display.update()</span><br><span class="line">    fclock.tick(fps)</span><br></pre></td></tr></table></figure></p>
<h4 id="事件处理函数详解"><a href="#事件处理函数详解" class="headerlink" title="事件处理函数详解"></a>事件处理函数详解</h4><p><strong>处理事件</strong>：<br>pygame.event.get()</p>
<ol>
<li>从事件队列中获得事件列表，及获得所有被队列的事件<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">    <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure></li>
<li>增加参数，获得某类或某些类事件<br><code>pygame.event.get(type)</code><br><code>pygame.event.get(typelist)</code></li>
</ol>
<p>pygame.event.poll()<br>从时间队列中获得一个事件<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    event = pygame.event.poll()</span><br></pre></td></tr></table></figure><br>事件获取之后将从事件队列中删除<br>如果事件队列为空，则返回<strong>event.NOEVENT</strong>。</p>
<p>pygame.event.clear()<br>从事件队列中删除事件，默认删除所有事件，不对事件进行处理。<br>可以增加参数，删除某类或某些类事件：<br><code>pygame.event.clear(type)</code><br><code>pygame.event.clear(typelist)</code><br>事件队列仅能存储128个事件。<br><strong>操作事件队列</strong>：<br>pygame.event.set_blocked()<br>控制哪些类型事件<strong>不允许</strong>被保存到事件队列中<br>pygame.event.get_blocked()<br>控制哪些类型事件<strong>允许</strong>被保存到事件队列中。<br>pygame.event.set_allowed()<br>测试某个事件类型是否被事件队列所禁止，如果事件类型被禁止，则返回<strong>True</strong>，否则返回<strong>False</strong>。</p>
<p>以上可以设置事件队列能够缓存的事件类型。</p>
<p><strong>生成事件</strong>：</p>
<ol>
<li>pygame.event.post(Event)<br>产生一个事件，并将其放入事件队列<br>一般用于放置用户自定义事件（pygame.UNSEREVENT）<br>也可以用于放置系统定义事件（如鼠标或键盘等），给定参数</li>
<li>pygame.event.Event(type, dict)<br>创建一个给定类型的事件<br>其中，事件的属性和值采用字典类型复制</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame, sys</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">600</span>,<span class="number">400</span>))</span><br><span class="line">pygame.display.set_caption(<span class="string">"事件处理"</span>)</span><br><span class="line"><span class="comment"># 每一秒模拟生成事件</span></span><br><span class="line">fps = <span class="number">1</span></span><br><span class="line">fclock = pygame.time.Clock()</span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    sevent = pygame.event.Event(pygame.KEYDOWN, &#123;<span class="string">"unicode"</span>:<span class="number">123</span>, <span class="string">"key"</span>:pygame.K_1,<span class="string">"mod"</span>:pygame.KMOD_ALT&#125;)</span><br><span class="line">    pygame.event.post(sevent)</span><br><span class="line">    num = num + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            <span class="keyword">if</span> event.unicode == <span class="string">""</span>:</span><br><span class="line">                print(<span class="string">"[Keydown &#123;&#125;]:"</span>.format(num),<span class="string">"---"</span>,event.key,event.mod)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"[Keydown &#123;&#125;]:"</span>.format(num),event.unicode,event.key,event.mod)</span><br><span class="line">    pygame.display.update()</span><br><span class="line">    fclock.tick(fps)</span><br></pre></td></tr></table></figure>
<h3 id="Pygame绘图机制"><a href="#Pygame绘图机制" class="headerlink" title="Pygame绘图机制"></a>Pygame绘图机制</h3><p><img src="rgb.PNG" alt="rgb"></p>
<p><strong>alpha通道</strong>：<br>alpha通道表示不透明度，取值0-255，默认255<br>alpha通道的值越大，不同明度越高，255表示不透明<br><img src="色彩表达.PNG" alt="色彩表达"><br><img src="色彩版.PNG" alt="色彩版"></p>
<h4 id="图形绘制"><a href="#图形绘制" class="headerlink" title="图形绘制"></a>图形绘制</h4><p>pygame.draw<br>图形绘制后，返回一个Rect类表示该形状</p>
<p><img src="Rect.PNG" alt="Rect"></p>
<p><img src="draw.PNG" alt="draw"></p>
<p><img src="drawrect.PNG" alt="drawrect"></p>
<p>宽度表示的线宽<br>绘制长方形<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame, sys</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">600</span>,<span class="number">400</span>))</span><br><span class="line">pygame.display.set_caption(<span class="string">"draw"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设施颜色</span></span><br><span class="line">GOLD = <span class="number">255</span>,<span class="number">251</span>,<span class="number">0</span></span><br><span class="line">RED = pygame.Color(<span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line">r1rect = pygame.draw.rect(screen,GOLD,(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">100</span>),<span class="number">5</span>)</span><br><span class="line">r2rect = pygame.draw.rect(screen,RED,(<span class="number">210</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>),<span class="number">0</span>)</span><br><span class="line"><span class="comment"># (顶点横纵坐标，长宽)</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure><br><img src="多边形.PNG" alt="多边形"></p>
<p><img src="圆.PNG" alt="圆"></p>
<p><img src="椭圆.PNG" alt="椭圆"><br>Rect指的是与椭圆外切的长方形。</p>
<p><img src="椭圆弧形.PNG" alt="椭圆弧形"></p>
<p><img src="直线.PNG" alt="直线"></p>
<p><img src="多线.PNG" alt="多线"></p>
<p><img src="无锯齿线.PNG" alt="无锯齿线"></p>
<p><img src="连续无锯齿线.PNG" alt="连续无锯齿线"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame, sys</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">600</span>,<span class="number">400</span>))</span><br><span class="line">pygame.display.set_caption(<span class="string">"draw"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设施颜色</span></span><br><span class="line">GOLD = <span class="number">255</span>,<span class="number">251</span>,<span class="number">0</span></span><br><span class="line">RED = pygame.Color(<span class="string">'red'</span>)</span><br><span class="line">WHITE = <span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span></span><br><span class="line">GREEN = pygame.Color(<span class="string">'green'</span>)</span><br><span class="line"><span class="comment"># r1rect = pygame.draw.rect(screen,GOLD,(100,100,200,100),5)</span></span><br><span class="line"><span class="comment"># r2rect = pygame.draw.rect(screen,RED,(210,200,200,200),0)</span></span><br><span class="line"><span class="comment"># (顶点横纵坐标，长宽)</span></span><br><span class="line"></span><br><span class="line">a = pygame.draw.ellipse(screen, GREEN, (<span class="number">50</span>,<span class="number">50</span>,<span class="number">500</span>,<span class="number">300</span>),<span class="number">3</span>)</span><br><span class="line">b = pygame.draw.circle(screen,GOLD,(<span class="number">200</span>,<span class="number">180</span>),<span class="number">30</span>,<span class="number">5</span>)</span><br><span class="line">C = pygame.draw.circle(screen, GOLD,(<span class="number">400</span>,<span class="number">180</span>),<span class="number">30</span>)</span><br><span class="line">r1 = pygame.draw.rect(screen,RED,(<span class="number">170</span>,<span class="number">130</span>,<span class="number">60</span>,<span class="number">10</span>),<span class="number">3</span>)</span><br><span class="line">r2 = pygame.draw.rect(screen,RED,(<span class="number">370</span>,<span class="number">130</span>,<span class="number">60</span>,<span class="number">10</span>))</span><br><span class="line">plist = [(<span class="number">295</span>,<span class="number">170</span>),(<span class="number">285</span>,<span class="number">250</span>),(<span class="number">260</span>,<span class="number">280</span>),(<span class="number">340</span>,<span class="number">280</span>),(<span class="number">315</span>,<span class="number">250</span>),(<span class="number">305</span>,<span class="number">170</span>)]</span><br><span class="line">l = pygame.draw.lines(screen,GOLD,<span class="literal">True</span>,plist,<span class="number">2</span>)</span><br><span class="line">d = pygame.draw.arc(screen,RED,(<span class="number">200</span>,<span class="number">220</span>,<span class="number">200</span>,<span class="number">100</span>),<span class="number">1.4</span>*pi,<span class="number">1.9</span>*pi,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure>
<p><img src="smile.PNG" alt="smile"></p>
<h4 id="文字绘制"><a href="#文字绘制" class="headerlink" title="文字绘制"></a>文字绘制</h4><p><strong>pygame.freetype</strong></p>
<p>用像素根据字体点阵图绘制</p>
<p>pygame.freetype需要import引用</p>
<p><img src="font.PNG" alt="font"></p>
<p><strong>pygame.freetype.Font(file,size)</strong><br>file 字体类型名称或路径<br>size 字体大小<br><img src="drawfont1.PNG" alt="drawfont1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame, sys</span><br><span class="line"><span class="keyword">import</span> pygame.freetype</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">600</span>,<span class="number">400</span>))</span><br><span class="line">pygame.display.set_caption(<span class="string">"drawword"</span>)</span><br><span class="line">GOLD = <span class="number">255</span>,<span class="number">251</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">f = pygame.freetype.Font(<span class="string">"Dengl.ttf"</span>,<span class="number">36</span>)</span><br><span class="line">frect = f.render_to(screen,(<span class="number">200</span>,<span class="number">160</span>),<span class="string">"武汉加油，中国加油！"</span>,fgcolor=GOLD, size=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure>
<p><img src="draw2.PNG" alt="draw2"></p>
<p><img src="图层.PNG" alt="图层"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>游戏编程</tag>
      </tags>
  </entry>
  <entry>
    <title>GTD</title>
    <url>/2020/02/20/GTD/</url>
    <content><![CDATA[<p>今天好多学校出了考研成绩，我开始焦虑。感觉时间安排还是不行，到底是为什么。</p>
<p>是执行力太差了吗？</p>
<p>不行，我得找找答案。在网上无意看到了GTD（Getting Things Done）。</p>
<p>这就来了解，记录一下。</p>
<p>GTD的三个步骤：</p>
<ol>
<li>收集<br>大大小小的事情都收集起来，记清楚细节。<br>把所有的任务都暂时档子回收箱里</li>
<li>整理<br>最好是一天的开始就整理清楚<br>分为 <strong>任务清单</strong>、<strong>执行清单</strong>（安排去做）、<strong>可能清单</strong>（当前有想法，但是并没有时间和精力去做的事情）、<strong>等待清单</strong>（不需要我去做，但是有一些任务分配还是要放到执行清单中，比如提醒事项完成程度）还有一个<strong>参考资料</strong>也就是建立自己知识库。</li>
</ol>
<p>同时对执行文档中的事项安排一定的时间，确保自己完成。<br>还要为特别的事情预留足够的事件，我之前就常常因为预留时间不足，明日复明日，明日何其多，把重要的事情都放在了最后。<br>严格执行自己安排的计划，不要总是把简单的事情放在前面做。</p>
<p>在提高效率方面，可以通过食用番茄闹钟</p>
<ol>
<li>回顾<br>回顾整天的执行情况，同时每周也应该有一个回顾。</li>
</ol>
<p>下面这张图是我从B站的Topbook那里看到的，考研过程中繁琐的事情都可以往后排。<br><img src="GTD最终版思维导图.png" alt="GTD"></p>
<p>最后说一下今天2月21日的情况，发小秋丽出成绩了，380分，专业课高达140多，说实话，我当时还挺诧异的。但其实也没什么奇怪的，她大学四年一直在学的就是这个专业，我相对学的内容就很杂。计算机，英语翻译，考证……一路跌跌宕宕。</p>
<p>现在，靳思远的成绩还没告诉我，也不知道是什么情况，难道还没有出成绩吗？</p>
<p>我觉得，考研从准备到上考场，不超过十个月的，能够最大限度地发现自己身上的毛病，抓紧时间矫正。</p>
<p>我向往自由自在的生活，上路了以后，就坚持下去。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Python游戏编程入门</title>
    <url>/2020/02/02/Python%E6%B8%B8%E6%88%8F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h4 id="结构化方法（OOP）"><a href="#结构化方法（OOP）" class="headerlink" title="结构化方法（OOP）"></a>结构化方法（OOP）</h4><ul>
<li>多态</li>
</ul>
<p>多态是指具备多种形态的能力。在类的环境中，这意味着我们可以使用具有多种形态的方法。</p>
<ul>
<li><p>数据隐藏（封装）</p>
</li>
<li><p>继承</p>
</li>
</ul>
<p>当定义一个类的时候，基类包含在圆括号中：<code>class Car(Vehicle)</code></p>
<p>此外，Python支持多继承，一个子类可以继承自多个父类或基类：<code>class Car(Body,Engine,Suspension)</code></p>
<p>当调用一个基类的构造函数或任何方法的时候，可以使用super()来引用基类。</p>
<p>存疑：如果存在冲突，来自父类的冲突变量和方法在继承顺序中具有优先性。</p>
<p>疑惑：当设计多继承的时候，当共享相同的变量名或方法名的时候，必须使用父类的名称，以避免混淆。</p>
<h4 id="单继承例子："><a href="#单继承例子：" class="headerlink" title="单继承例子："></a>单继承例子：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">area</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">4</span></span><br><span class="line">    y = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        print(<span class="string">"面积初始化完成。"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Caculate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"面积是 x * y:"</span>+str(self.x*self.y)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">volume</span><span class="params">(area)</span>:</span></span><br><span class="line">    h = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y, h)</span>:</span></span><br><span class="line">        <span class="comment"># 当调用一个基类的构造函数或任何方法的时候，可以使用super()</span></span><br><span class="line">        super().__init__(x,y)</span><br><span class="line">        self.h = h</span><br><span class="line">        print(<span class="string">"体积初始化完成。"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Caculate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"体积是 x*y*h:"</span>+str(self.x*self.y*self.h)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = area(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(p.Caculate())</span><br><span class="line"></span><br><span class="line">c = volume(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">print(c.Caculate())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 面积初始化完成。</span></span><br><span class="line"><span class="comment"># 面积是 x * y:2</span></span><br><span class="line"><span class="comment"># 面积初始化完成。</span></span><br><span class="line"><span class="comment"># 体积初始化完成。</span></span><br><span class="line"><span class="comment"># 体积是 x*y*h:6</span></span><br></pre></td></tr></table></figure>
<h4 id="多继承例子："><a href="#多继承例子：" class="headerlink" title="多继承例子："></a>多继承例子：</h4><p>作者称多继承是片沼泽，建议尽可能避免使用多继承。</p>
<p>使用多继承的时候，我们基本不会使用super()来调用父类中的任何内容。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span><span class="params">()</span>:</span></span><br><span class="line">    s = <span class="string">"开始"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,s)</span>:</span></span><br><span class="line">        self.s = s</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Write</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.s)+<span class="string">' '</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">End</span><span class="params">()</span>:</span></span><br><span class="line">    e = <span class="string">"结束"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,e)</span>:</span></span><br><span class="line">        self.e = e</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Write</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.e)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connect</span><span class="params">(Start,End)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, s, e)</span>:</span></span><br><span class="line">        Start.__init__(self, s)</span><br><span class="line">        End.__init__(self, e)</span><br><span class="line">        print(<span class="string">'初始化完成。'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Write</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Start.Write(self) + End.Write(self)</span><br><span class="line"></span><br><span class="line">s = Start(<span class="string">"新型冠状病毒来势汹汹。"</span>)</span><br><span class="line">e = End(<span class="string">"希望疫情能够早日得到控制。"</span>)</span><br><span class="line">print(s.Write())</span><br><span class="line">print(e.Write())</span><br><span class="line">c = Connect(s,e)</span><br><span class="line">print(c.Write())</span><br><span class="line">print(Connect(<span class="string">"希望感染的人数越来越少，"</span>,<span class="string">"治愈的人越来越多。"</span>).Write())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新型冠状病毒来势汹汹。</span></span><br><span class="line"><span class="comment"># 希望疫情能够早日得到控制。</span></span><br><span class="line"><span class="comment"># 初始化完成。</span></span><br><span class="line"><span class="comment"># &lt;__main__.Start object at 0x000002427B440710&gt; &lt;__main__.End object at 0x000002427B451F98&gt;</span></span><br><span class="line"><span class="comment"># 初始化完成。</span></span><br><span class="line"><span class="comment"># 希望感染的人数越来越少， 治愈的人越来越多。</span></span><br></pre></td></tr></table></figure>
<p>我们可以看到 <code>c.Write()</code>的输出是有问题的，目前我还不知道原因，可能<code>c=Connect(s,e)</code>的构造方法不对。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>游戏编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python高级编程</title>
    <url>/2020/02/07/Python-1/</url>
    <content><![CDATA[<h3 id="Python中一切皆变量"><a href="#Python中一切皆变量" class="headerlink" title="Python中一切皆变量"></a>Python中一切皆变量</h3><h4 id="动态语言与静态语言的区别"><a href="#动态语言与静态语言的区别" class="headerlink" title="动态语言与静态语言的区别"></a>动态语言与静态语言的区别</h4><p>静态语言与动态语言最大的区别：动态变量可以指定任何一个类型。<br>动态语言没有变量类型。<br>动态语言缺陷，无法做类型检查，只能在运行过程中发现错误。</p>
<h4 id="函数和类也是对象，属于Python的一等公民"><a href="#函数和类也是对象，属于Python的一等公民" class="headerlink" title="函数和类也是对象，属于Python的一等公民"></a>函数和类也是对象，属于Python的一等公民</h4><ol>
<li>复制给一个变量</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ask</span><span class="params">(name=<span class="string">"Suria"</span>)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Suria"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试函数</span></span><br><span class="line">my = ask</span><br><span class="line">my(<span class="string">"newname"</span>)</span><br><span class="line"></span><br><span class="line">my_class = Person</span><br><span class="line">my_class()</span><br><span class="line"></span><br><span class="line"><span class="comment"># newname</span></span><br><span class="line"><span class="comment"># Suria</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>可以添加到集合对象中</p>
</li>
<li><p>可以作为参数传递给函数</p>
</li>
</ol>
<p>2+3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ask</span><span class="params">(name=<span class="string">"Suria1"</span>)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    <span class="comment"># 因为函数没有return 值,默认返回None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Suria2"</span>)</span><br><span class="line">obj_list = []</span><br><span class="line">obj_list.append(ask)</span><br><span class="line">obj_list.append(Person)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> obj_list:</span><br><span class="line">    print(item())</span><br><span class="line"><span class="comment"># Suria1</span></span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="comment"># Suria2</span></span><br><span class="line"><span class="comment"># &lt;__main__.Person object at 0x000001D5CE47BB38&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>可以作为函数返回值<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ask</span><span class="params">(name=<span class="string">"Suria1"</span>)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">9</span></span><br><span class="line">    <span class="comment"># 因为函数没有return 值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数返回函数，装饰器的原理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator_func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"dec start"</span>)</span><br><span class="line">    <span class="keyword">return</span> ask</span><br><span class="line"></span><br><span class="line">my_ask = decorator_func()</span><br><span class="line">my_ask(<span class="string">"tom"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dec start</span></span><br><span class="line"><span class="comment"># tom</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="type、object和class的关系"><a href="#type、object和class的关系" class="headerlink" title="type、object和class的关系"></a>type、object和class的关系</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="string">"abc"</span></span><br><span class="line">print(<span class="string">"type(1):"</span>,type(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># type -&gt; int -&gt; 1</span></span><br><span class="line">print(<span class="string">"type(int)):"</span>,type(int))</span><br><span class="line">print(<span class="string">"type(b):"</span>,type(b))</span><br><span class="line">print(<span class="string">"type(str):"</span>,type(str))</span><br><span class="line"><span class="comment"># type -&gt; class -&gt;obj</span></span><br><span class="line"><span class="comment"># obj是所有类都要集成的基本类</span></span><br><span class="line"><span class="comment"># object 是最顶层基类</span></span><br><span class="line"><span class="comment"># type也是一个类，同时type也是一个对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStudent</span><span class="params">(Student)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">stu = Student()</span><br><span class="line">print(<span class="string">"type(stu):"</span>,type(stu))</span><br><span class="line">print(<span class="string">"type(Student):"</span>,type(Student))</span><br><span class="line">print(<span class="string">"int.__bases:"</span>,int.__bases__)</span><br><span class="line">print(<span class="string">"str.__bases:"</span>,str.__bases__)</span><br><span class="line">print(<span class="string">"Student.__bases:"</span>,Student.__bases__)</span><br><span class="line">print(<span class="string">"MyStudent.__bases:"</span>,MyStudent.__bases__)</span><br><span class="line">print(<span class="string">"type.__bases:"</span>,type.__bases__)</span><br><span class="line">print(<span class="string">"object.__bases:"</span>,object.__bases__)</span><br><span class="line">print(<span class="string">"type(object):"</span>,type(object))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type(1): &lt;class &#39;int&#39;&gt;</span><br><span class="line">type(int)): &lt;class &#39;type&#39;&gt;</span><br><span class="line">type(b): &lt;class &#39;str&#39;&gt;</span><br><span class="line">type(str): &lt;class &#39;type&#39;&gt;</span><br><span class="line">type(stu): &lt;class &#39;__main__.Student&#39;&gt;       </span><br><span class="line">type(Student): &lt;class &#39;type&#39;&gt;</span><br><span class="line">int.__bases: (&lt;class &#39;object&#39;&gt;,)</span><br><span class="line">str.__bases: (&lt;class &#39;object&#39;&gt;,)</span><br><span class="line">Student.__bases: (&lt;class &#39;object&#39;&gt;,)        </span><br><span class="line">MyStudent.__bases: (&lt;class &#39;__main__.Student&#39;&gt;,)</span><br><span class="line">type.__bases: (&lt;class &#39;object&#39;&gt;,)</span><br><span class="line">object.__bases: ()</span><br><span class="line">type(object): &lt;class &#39;type&#39;&gt;</span><br></pre></td></tr></table></figure>
<p><img src="t_o_c.PNG" alt="图片解释"></p>
<h4 id="Python常见内置类型"><a href="#Python常见内置类型" class="headerlink" title="Python常见内置类型"></a>Python常见内置类型</h4><h5 id="对象的三个特征"><a href="#对象的三个特征" class="headerlink" title="对象的三个特征"></a>对象的三个特征</h5><ol>
<li>身份<br>对象在内存中的地址，通过id查看身份。<code>id()</code>。</li>
<li>类型<br>int、str、list……</li>
<li>值<br><code>a = 1</code> 值为1.</li>
</ol>
<h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><h6 id="None（全局只有一个）"><a href="#None（全局只有一个）" class="headerlink" title="None（全局只有一个）"></a>None（全局只有一个）</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="literal">None</span></span><br><span class="line">b = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> id(a) == id(b):</span><br><span class="line">    print(<span class="string">"OK"</span>)</span><br><span class="line"><span class="comment"># OK</span></span><br></pre></td></tr></table></figure>
<h6 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h6><ol>
<li>int</li>
<li>float</li>
<li>complex (复数类型)</li>
<li>bool</li>
</ol>
<h6 id="迭代类型"><a href="#迭代类型" class="headerlink" title="迭代类型"></a>迭代类型</h6><h6 id="序列类型"><a href="#序列类型" class="headerlink" title="序列类型"></a>序列类型</h6><ol>
<li>list</li>
<li>bytes、bytearray、memoryview(二进制序列)</li>
<li>range</li>
<li>tuple</li>
<li>str</li>
<li>array</li>
</ol>
<h6 id="映射类型-dict"><a href="#映射类型-dict" class="headerlink" title="映射类型(dict)"></a>映射类型(dict)</h6><h6 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h6><ol>
<li>set</li>
<li>frozenset</li>
</ol>
<h6 id="上下文管理类型"><a href="#上下文管理类型" class="headerlink" title="上下文管理类型"></a>上下文管理类型</h6><p>Python 的with</p>
<h6 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h6><ol>
<li>模块类型</li>
<li>class和实例</li>
<li>函数类型</li>
<li>方法类型</li>
<li>代码类型</li>
<li>object类型</li>
<li>type类型</li>
<li>ellipsis类型</li>
<li>notimplemented类型</li>
</ol>
<h3 id="魔法函数"><a href="#魔法函数" class="headerlink" title="魔法函数"></a>魔法函数</h3><h4 id="什么是魔法函数"><a href="#什么是魔法函数" class="headerlink" title="什么是魔法函数"></a>什么是魔法函数</h4><p>魔法函数，python以双下划线开头和结尾的函数。<br>魔法函数并不与Company挂钩，而是增强Company的特性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, employee_list)</span>:</span></span><br><span class="line">        self.employee = employee_list</span><br><span class="line">    </span><br><span class="line">company = Company([<span class="string">"tom"</span>,<span class="string">"jarry"</span>,<span class="string">"jane"</span>])</span><br><span class="line"></span><br><span class="line">employee = company.employee</span><br><span class="line"><span class="keyword">for</span> em <span class="keyword">in</span> employee:</span><br><span class="line">    print(em)</span><br></pre></td></tr></table></figure>
<p>优化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, employee_list)</span>:</span></span><br><span class="line">        self.employee = employee_list</span><br><span class="line">    <span class="comment"># 是这个类成为一个可迭代的类型</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.employee[item]</span><br><span class="line"></span><br><span class="line">company = Company([<span class="string">"tom"</span>,<span class="string">"jarry"</span>,<span class="string">"jane"</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> em <span class="keyword">in</span> company:</span><br><span class="line">    print(em)</span><br></pre></td></tr></table></figure>
<h4 id="Python魔法函数"><a href="#Python魔法函数" class="headerlink" title="Python魔法函数"></a>Python魔法函数</h4><h5 id="非数学模型"><a href="#非数学模型" class="headerlink" title="非数学模型"></a>非数学模型</h5><h6 id="字符串表示"><a href="#字符串表示" class="headerlink" title="字符串表示"></a>字符串表示</h6><p>（使用jupyter notebook操作哦）</p>
<ul>
<li><strong>repr</strong></li>
<li><strong>str</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, employee_list)</span>:</span></span><br><span class="line">        self.emploee = employee_list</span><br><span class="line">        </span><br><span class="line">company = Company([<span class="string">"tom"</span>,<span class="string">"bobo"</span>,<span class="string">"lala"</span>])</span><br><span class="line">print(company)</span><br><span class="line"><span class="comment"># &lt;__main__.Company object at 0x0000021B6191F4A8&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, employee_list)</span>:</span></span><br><span class="line">        self.employee = employee_list</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">","</span>.join(self.employee)</span><br><span class="line">        </span><br><span class="line">company = Company([<span class="string">"tom"</span>,<span class="string">"bobo"</span>,<span class="string">"lala"</span>])</span><br><span class="line"><span class="comment"># print(company)</span></span><br><span class="line"><span class="comment"># tom,bobo,lala</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># company</span></span><br><span class="line"><span class="comment"># 调用__repr__，开发者模式</span></span><br><span class="line"><span class="comment"># &lt;__main__.Company at 0x21b619a2f60&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, employee_list)</span>:</span></span><br><span class="line">        self.employee = employee_list</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">","</span>.join(self.employee)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">" "</span>.join(self.employee)</span><br><span class="line">        </span><br><span class="line">company = Company([<span class="string">"tom"</span>,<span class="string">"bobo"</span>,<span class="string">"lala"</span>])</span><br><span class="line">company</span><br><span class="line"><span class="comment"># tom bobo lala</span></span><br><span class="line"><span class="comment"># 魔法函数跟本函数的继承没有关系</span></span><br></pre></td></tr></table></figure>
<h6 id="函数、序列相关"><a href="#函数、序列相关" class="headerlink" title="函数、序列相关"></a>函数、序列相关</h6><ul>
<li><strong>len</strong></li>
<li><strong>getitem</strong></li>
<li><strong>setitem</strong></li>
<li><strong>delitem</strong></li>
<li><strong>contains</strong></li>
</ul>
<h6 id="迭代相关"><a href="#迭代相关" class="headerlink" title="迭代相关"></a>迭代相关</h6><ul>
<li><strong>iter</strong></li>
<li><strong>next</strong></li>
</ul>
<h6 id="可调用"><a href="#可调用" class="headerlink" title="可调用"></a>可调用</h6><ul>
<li><strong>call</strong></li>
</ul>
<h6 id="with上下文管理器"><a href="#with上下文管理器" class="headerlink" title="with上下文管理器"></a>with上下文管理器</h6><ul>
<li><strong>enter</strong></li>
<li><strong>exit</strong></li>
</ul>
<h6 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h6><ul>
<li><strong>abs</strong></li>
<li><strong>bool</strong></li>
<li><strong>int</strong></li>
<li><strong>float</strong></li>
<li><strong>hash</strong></li>
<li><strong>index</strong></li>
</ul>
<h6 id="元类相关"><a href="#元类相关" class="headerlink" title="元类相关"></a>元类相关</h6><ul>
<li><strong>new</strong></li>
<li><strong>init</strong></li>
</ul>
<h6 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h6><ul>
<li><strong>getattr</strong>、<strong>setattr</strong></li>
<li><strong>getattribute</strong>、<strong>setattribute</strong></li>
<li><strong>dir</strong></li>
</ul>
<h6 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h6><ul>
<li><strong>get</strong></li>
<li><strong>set</strong></li>
<li><strong>delete</strong></li>
</ul>
<h6 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h6><ul>
<li><strong>await</strong></li>
<li><strong>aiter</strong></li>
<li><strong>anext</strong></li>
<li><strong>aenter</strong></li>
<li><strong>aexit</strong></li>
</ul>
<h5 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h5><p><img src="运算符.PNG" alt="运算符"></p>
<h6 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h6><ul>
<li><strong>neg</strong>(-)、<strong>pos</strong>(+)、<strong>abs</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nums</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        self.num = num</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__abs__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> abs(self.num)</span><br><span class="line">    </span><br><span class="line">my_num = Nums(<span class="number">-1</span>)</span><br><span class="line">abs(my_num)</span><br><span class="line"><span class="comment"># 1</span></span><br></pre></td></tr></table></figure>
<h6 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h6></li>
<li><strong>lt</strong>(&lt;)、<strong>le</strong>&lt;=、<strong>eq</strong>==、<strong>ne</strong>!=、<strong>gt</strong>&gt;、<strong>ge</strong>&gt;=<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyVector</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other_instance)</span>:</span></span><br><span class="line">        revector = MyVector(self.x+other_instance.x, self.y+other_instance.y)</span><br><span class="line">        <span class="keyword">return</span> revector</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x:&#123;x&#125;,y:&#123;y&#125;"</span>.format(x=self.x, y=self.y)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">first_vec = MyVector(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">second_vec = MyVector(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">print(first_vec+second_vec)</span><br><span class="line"><span class="comment"># x:3,y:5</span></span><br></pre></td></tr></table></figure>
<h6 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h6></li>
<li><strong>add</strong> + 、<strong>sub</strong> -、<strong>mul</strong> *、<strong>truediv</strong> /、</li>
</ul>
<h6 id="反向算术运算符"><a href="#反向算术运算符" class="headerlink" title="反向算术运算符"></a>反向算术运算符</h6><p><strong>radd</strong>、<strong>rsub</strong>、<strong>rmul</strong>、<strong>truediv</strong>、</p>
<h6 id="增量赋值算术运算符"><a href="#增量赋值算术运算符" class="headerlink" title="增量赋值算术运算符"></a>增量赋值算术运算符</h6><p><strong>iadd</strong>、</p>
<h6 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h6><p><strong>invert</strong> ~、</p>
<h6 id="反向位运算符"><a href="#反向位运算符" class="headerlink" title="反向位运算符"></a>反向位运算符</h6><p><strong>rlshift</strong>、<strong>rrshift</strong></p>
<h6 id="增量赋值位运算符"><a href="#增量赋值位运算符" class="headerlink" title="增量赋值位运算符"></a>增量赋值位运算符</h6><p><strong>ilshift</strong>、<strong>irshift</strong></p>
<h3 id="深入类和对象"><a href="#深入类和对象" class="headerlink" title="深入类和对象"></a>深入类和对象</h3><h4 id="鸭子类型和多态"><a href="#鸭子类型和多态" class="headerlink" title="鸭子类型和多态"></a>鸭子类型和多态</h4><p>鸭子类型:<br>当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来像鸭子，那么这只鸟就可以被称为鸭子。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"I am a cat"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"I am a dog"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"I am a duck"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># animal = Cat</span></span><br><span class="line"><span class="comment"># animal().say()</span></span><br><span class="line"></span><br><span class="line">animal_list = [Cat, Dog, Duck]</span><br><span class="line"><span class="keyword">for</span> animal <span class="keyword">in</span> animal_list:</span><br><span class="line">    animal().say()</span><br><span class="line"><span class="comment"># I am a cat</span></span><br><span class="line"><span class="comment"># I am a dog</span></span><br><span class="line"><span class="comment"># I am a duck</span></span><br></pre></td></tr></table></figure></p>
<h4 id="抽象基类-abc模板"><a href="#抽象基类-abc模板" class="headerlink" title="抽象基类(abc模板)"></a>抽象基类(abc模板)</h4><p>抽象基类：在一个基础的类中设定一些方法，所有继承这个基类的类都必须覆盖这个基类中的方法；无法用来实例化。</p>
<h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><ol>
<li>检查某个类是否使用某个方法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, employee_list)</span>:</span></span><br><span class="line">        self.employee = employee_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.employee)</span><br><span class="line">com = Company([<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>])</span><br><span class="line"><span class="comment"># hasattr用来判断对象是否有某种属性</span></span><br><span class="line">print(hasattr(com,<span class="string">"__str__"</span>))</span><br><span class="line">print(hasattr(com,<span class="string">"__len__"</span>))</span><br><span class="line"><span class="comment"># print(len(com))</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, employee_list)</span>:</span></span><br><span class="line">        self.employee = employee_list</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __len__(self):</span></span><br><span class="line">    <span class="comment">#     return len(self.employee)</span></span><br><span class="line">com = Company([<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># isinstance用来判断类型</span></span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Sized </span><br><span class="line">print(isinstance(com,Sized))</span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure></li>
<li>我们需要强制某个子类必须实现某些方法</li>
</ol>
<h5 id="如何模拟一个抽象基类"><a href="#如何模拟一个抽象基类" class="headerlink" title="如何模拟一个抽象基类"></a>如何模拟一个抽象基类</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheBase</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="comment"># 直接使用pass,不会抛出异常</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, key , value)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisCache</span><span class="params">(CacheBase)</span>:</span></span><br><span class="line">    <span class="comment"># 如果没有 def set() 就会抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">redis_cache = RedisCache()</span><br><span class="line">redis_cache.set(<span class="string">"KEY"</span>,<span class="string">"VALUE"</span>)</span><br></pre></td></tr></table></figure>
<p>在调用函数的时候就抛出异常，而不是在使用函数方法的时候抛出<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheBase</span><span class="params">(metaclass=abc.ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abc.abstractclassmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="comment"># 直接使用pass,不会抛出异常</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line">    <span class="comment"># 抽象方法</span></span><br><span class="line"><span class="meta">    @abc.abstractclassmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, key , value)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisCache</span><span class="params">(CacheBase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">redis_cache = RedisCache()</span><br></pre></td></tr></table></figure><br><img src="abc.PNG" alt="抛出的异常"></p>
<h4 id="使用isintance而不是type"><a href="#使用isintance而不是type" class="headerlink" title="使用isintance而不是type"></a>使用isintance而不是type</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line"><span class="comment"># 判断b是否是B类型</span></span><br><span class="line">print(isinstance(b,B))</span><br><span class="line">print(isinstance(b,A))</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># is判断是否是一种类型</span></span><br><span class="line">print(type(b) <span class="keyword">is</span> B)</span><br><span class="line">print(type(b) <span class="keyword">is</span> A)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure>
<h4 id="类变量和对象变量"><a href="#类变量和对象变量" class="headerlink" title="类变量和对象变量"></a>类变量和对象变量</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="comment"># 类变量</span></span><br><span class="line">    aa = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x,y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">a = A(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 赋值给类变量</span></span><br><span class="line">A.aa = <span class="number">11</span></span><br><span class="line">print(a.x,a.y,a.aa)</span><br><span class="line">print(A.aa)</span><br><span class="line"><span class="comment"># 2 3 11</span></span><br><span class="line"><span class="comment"># 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值给实例</span></span><br><span class="line">a.aa = <span class="number">100</span></span><br><span class="line">print(a.x,a.y,a.aa)</span><br><span class="line">print(A.aa)</span><br><span class="line"><span class="comment"># 2 3 100</span></span><br><span class="line"><span class="comment"># 11</span></span><br></pre></td></tr></table></figure>
<h4 id="类属性和实例属性以及查找顺序"><a href="#类属性和实例属性以及查找顺序" class="headerlink" title="类属性和实例属性以及查找顺序"></a>类属性和实例属性以及查找顺序</h4><ul>
<li>类属性：定义在类内部的变量和方法<br><strong>由下向上的查找顺序</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    name = <span class="string">"A"</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">print(a.name)</span><br><span class="line"><span class="comment"># A</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    name = <span class="string">"A"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"a"</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">print(a.name)</span><br><span class="line"><span class="comment"># a</span></span><br></pre></td></tr></table></figure>
复杂的继承关系<h5 id="菱形继承关系"><a href="#菱形继承关系" class="headerlink" title="菱形继承关系"></a>菱形继承关系</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(D)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(D)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(B,C)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(A.__mro__)</span><br><span class="line"><span class="comment"># 打印出查找顺序</span></span><br><span class="line"><span class="comment"># (&lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.D'&gt;, &lt;class 'object'&gt;)</span></span><br></pre></td></tr></table></figure>
<h5 id="B继承D，C继承E"><a href="#B继承D，C继承E" class="headerlink" title="B继承D，C继承E"></a>B继承D，C继承E</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(E)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(D)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(B,C)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(A.__mro__)</span><br><span class="line"><span class="comment"># 打印出查找顺序</span></span><br><span class="line"><span class="comment"># (&lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.D'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.E'&gt;, &lt;class 'object'&gt;)</span></span><br></pre></td></tr></table></figure>
<h4 id="静态方法、类方法以及对象方法以及参数"><a href="#静态方法、类方法以及对象方法以及参数" class="headerlink" title="静态方法、类方法以及对象方法以及参数"></a>静态方法、类方法以及对象方法以及参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件名 company</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span>:</span></span><br><span class="line">    <span class="comment"># 构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, year, month, day)</span>:</span></span><br><span class="line">        self.year = year</span><br><span class="line">        self.month = month</span><br><span class="line">        self.day = day</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tomorrow</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.day += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静态方法</span></span><br><span class="line">    <span class="comment"># 把命名空间定义到class中</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_from_string</span><span class="params">(date_str)</span>:</span></span><br><span class="line">        year, month, day = tuple(date_str.split(<span class="string">"-"</span>))</span><br><span class="line">        <span class="comment"># 其中类的方法改变，return中的调用也需要改名字</span></span><br><span class="line">        <span class="keyword">return</span> Date(int(year), int(month), int(day))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_string</span><span class="params">(cls, date_str)</span>:</span></span><br><span class="line">        year, month, day = tuple(date_str.split(<span class="string">"-"</span>))</span><br><span class="line">        <span class="keyword">return</span> cls(int(year), int(month), int(day))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;year&#125;/&#123;month&#125;/&#123;day&#125;"</span>.format(year=self.year, month=self.month, day=self.day)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    new_day = Date(<span class="number">2020</span>, <span class="number">2</span>, <span class="number">12</span>)</span><br><span class="line">    print(new_day)</span><br><span class="line">    <span class="comment"># 2020/2/12</span></span><br><span class="line">    new_day.tomorrow()</span><br><span class="line">    print(new_day)</span><br><span class="line">    <span class="comment"># 2020/2/13</span></span><br><span class="line">    date_str = <span class="string">"2020-02-15"</span></span><br><span class="line">    day = Date.parse_from_string(date_str)</span><br><span class="line">    print(day)</span><br><span class="line">    <span class="comment"># 2020/2/15</span></span><br><span class="line">    day1 = Date.from_string(date_str)</span><br><span class="line">    print(day1)</span><br><span class="line">    <span class="comment"># 2020/2/15</span></span><br></pre></td></tr></table></figure>
<h4 id="Python的私有属性"><a href="#Python的私有属性" class="headerlink" title="Python的私有属性"></a>Python的私有属性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> company <span class="keyword">import</span> Date</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, birthday)</span>:</span></span><br><span class="line">        <span class="comment"># 私有属性</span></span><br><span class="line">        self.__birthday = birthday</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 返回年龄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2020</span> - self.__birthday.year</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    user = User(Date(<span class="number">1997</span>,<span class="number">5</span>,<span class="number">28</span>))</span><br><span class="line">    <span class="comment"># # 未使用私有属性时</span></span><br><span class="line">    <span class="comment"># print(user.__birthday)</span></span><br><span class="line">    <span class="comment"># # 1997/5/28</span></span><br><span class="line">    <span class="comment"># print(user.get_age()) </span></span><br><span class="line">    <span class="comment"># # 23</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 只能通过类中的公共方法来访问私有属性</span></span><br><span class="line">    print(user.get_age())</span><br><span class="line">    <span class="comment"># 23</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 但是这个私有属性只是加了小技巧，还是可以访问</span></span><br><span class="line">    print(user._User__birthday)</span><br><span class="line">    <span class="comment"># 1997/5/28</span></span><br></pre></td></tr></table></figure>
<h4 id="Python的自省"><a href="#Python的自省" class="headerlink" title="Python的自省"></a>Python的自省</h4></li>
<li>自省是通过一定的机制查询到对象的内部结构</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">"user"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, school_name)</span>:</span></span><br><span class="line">        self.schoolname = school_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    user = Student(<span class="string">"Suria"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过__dict__查询属性,也可以对属性进行赋值</span></span><br><span class="line">print(user.__dict__)</span><br><span class="line"><span class="comment"># &#123;'schoolname': 'Suria'&#125;</span></span><br><span class="line">user.__dict__[<span class="string">"school_addr"</span>] = <span class="string">"Beijing"</span></span><br><span class="line">print(user.school_addr)</span><br><span class="line"><span class="comment"># Beijing</span></span><br><span class="line">print(Person.__dict__)</span><br><span class="line"><span class="comment"># &#123;'__module__': '__main__', 'name': 'user', '__dict__': &lt;attribute '__dict__' of 'Person' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Person' objects&gt;, '__doc__': None&#125;</span></span><br><span class="line">print(user.name)</span><br><span class="line"><span class="comment"># user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dir 比 __dict__属性更强大</span></span><br><span class="line"><span class="comment"># dir打印只有属性，没有属性值</span></span><br><span class="line">print(dir(user))</span><br><span class="line"><span class="comment"># ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'name', 'school_addr', 'schoolname']</span></span><br></pre></td></tr></table></figure>
<h4 id="super函数"><a href="#super函数" class="headerlink" title="super函数"></a>super函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    b = B()</span><br><span class="line">    <span class="comment"># b</span></span><br></pre></td></tr></table></figure>
<p>如果想要打印出a<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"b"</span>)</span><br><span class="line">        super().__init__()</span><br><span class="line">        <span class="comment"># Python2中的方法</span></span><br><span class="line">        <span class="comment"># super(B,self).__init__()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    b = B()</span><br><span class="line">    <span class="comment"># b</span></span><br><span class="line">    <span class="comment"># a</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>既然我们重写了B的构造函数，为什么还要去调用super?<br>多线程函数中使用，部分代码如下<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, user)</span>:</span></span><br><span class="line">        self.user = user</span><br><span class="line">        super().__init__(name=name)</span><br></pre></td></tr></table></figure></li>
<li>super函数的执行顺序<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"A"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"B"</span>)</span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"C"</span>)</span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"D"</span>)</span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(D.__mro__)</span><br><span class="line">    <span class="comment"># (&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;)</span></span><br><span class="line">    d = D()</span><br><span class="line">    print(d)</span><br><span class="line"><span class="comment"># D</span></span><br><span class="line"><span class="comment"># B</span></span><br><span class="line"><span class="comment"># C</span></span><br><span class="line"><span class="comment"># A</span></span><br></pre></td></tr></table></figure>
<h4 id="django-rest-framework-中对多继承使用的经验"><a href="#django-rest-framework-中对多继承使用的经验" class="headerlink" title="django rest framework 中对多继承使用的经验"></a>django rest framework 中对多继承使用的经验</h4></li>
</ul>
<p>使用Mixin</p>
<h5 id="Mixin的模式特点"><a href="#Mixin的模式特点" class="headerlink" title="Mixin的模式特点"></a>Mixin的模式特点</h5><ol>
<li>Mixin类功能单一</li>
<li>不和基类关联，可以和任意基类组合，基类可以不和mixin关联就能初始化成功</li>
<li>在mixin中不要使用super用法</li>
</ol>
<h4 id="python中的with语句"><a href="#python中的with语句" class="headerlink" title="python中的with语句"></a>python中的with语句</h4><ul>
<li>最简单的try和except用法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"code started"</span>)</span><br><span class="line">    <span class="keyword">raise</span> KeyError</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"key error"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># code started</span></span><br><span class="line"><span class="comment"># key error</span></span><br></pre></td></tr></table></figure></li>
<li>try,except, else, finally<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"code started"</span>)</span><br><span class="line">    <span class="keyword">raise</span> KeyError</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"key error"</span>)</span><br><span class="line"><span class="comment"># 没有抛出异常才会运行</span></span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    print(<span class="string">"other error"</span>)</span><br><span class="line"><span class="comment"># 不管前面的有没有异常，都会运行finally中的代码</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"finally"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># code started</span></span><br><span class="line"><span class="comment"># key error</span></span><br><span class="line"><span class="comment"># finally</span></span><br></pre></td></tr></table></figure></li>
<li>return语句<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exe_try</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">"code started"</span>)</span><br><span class="line">        <span class="keyword">raise</span> KeyError</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="comment"># 只有return 1存在，打印result结果是None</span></span><br><span class="line">    <span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"key error"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="comment"># return 1 与 return 2 同时存在，result为2</span></span><br><span class="line">    <span class="comment"># 没有抛出异常才会运行</span></span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        print(<span class="string">"other error"</span>)</span><br><span class="line">    <span class="comment"># 不管前面的有没有异常，都会运行finally中的代码</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">"finally"</span>)</span><br><span class="line">        <span class="comment"># return 1 2 3 都存在，打印结果result为3 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    result = exe_try()</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
<h4 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h4>上下文管理器协议，可以直接使用with语句<br>在with语句中，进入时调用<strong>enter</strong>,退出时调用<strong>exit</strong>。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"enter"</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="comment"># 获取资源  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self,exc_type,exc_val,exc_tb)</span>:</span></span><br><span class="line">        print(<span class="string">"exit"</span>)</span><br><span class="line">    <span class="comment"># 释放资源</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"do something"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Sample() <span class="keyword">as</span> sample:</span><br><span class="line">    sample.do_something()</span><br><span class="line"></span><br><span class="line"><span class="comment"># enter</span></span><br><span class="line"><span class="comment"># do something</span></span><br><span class="line"><span class="comment"># exit</span></span><br></pre></td></tr></table></figure>
<h4 id="contextlib简化上下文管理器"><a href="#contextlib简化上下文管理器" class="headerlink" title="contextlib简化上下文管理器"></a>contextlib简化上下文管理器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="comment"># 可以将函数变成上下文管理器</span></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_open</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    print(<span class="string">"file open"</span>)</span><br><span class="line">    <span class="comment"># 生成器</span></span><br><span class="line">    <span class="keyword">yield</span> &#123;&#125;</span><br><span class="line">    <span class="comment"># 之后是exit的内容</span></span><br><span class="line">    print(<span class="string">"file end"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> file_open(<span class="string">"one.txt"</span>) <span class="keyword">as</span> f_opened:</span><br><span class="line">    print(<span class="string">"file processing"</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="自定义序列类"><a href="#自定义序列类" class="headerlink" title="自定义序列类"></a>自定义序列类</h3><p>Python是基于协议进行编程的</p>
<h4 id="序列类型的分类"><a href="#序列类型的分类" class="headerlink" title="序列类型的分类"></a>序列类型的分类</h4><p>两种分类</p>
<h5 id="容器序列"><a href="#容器序列" class="headerlink" title="容器序列"></a>容器序列</h5><p>序列中可以放置任意类型的数据<br>有<strong>list、tuple、deque</strong></p>
<h5 id="扁平序列"><a href="#扁平序列" class="headerlink" title="扁平序列"></a>扁平序列</h5><p>有<strong>str、bytes、byearray、array.array</strong><br>放置同一种类型的数据</p>
<h5 id="可变序列"><a href="#可变序列" class="headerlink" title="可变序列"></a>可变序列</h5><p><strong>list、deque、bytearray、array</strong></p>
<h5 id="不可变序列"><a href="#不可变序列" class="headerlink" title="不可变序列"></a>不可变序列</h5><p><strong>str、tuple、bytes</strong></p>
<h4 id="序列的-、-和extend的区别"><a href="#序列的-、-和extend的区别" class="headerlink" title="序列的+、+=和extend的区别"></a>序列的+、+=和extend的区别</h4><ol>
<li>+= 可以接受不同类型的数据<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a += (<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment">#[1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line">a.extend([<span class="number">6</span>,<span class="number">7</span>])</span><br><span class="line"><span class="comment"># [1,2,3,4,5,6,7]</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="实现可切片的对象"><a href="#实现可切片的对象" class="headerlink" title="实现可切片的对象"></a>实现可切片的对象</h4><p>模式 [start:end:step]<br>start 默认为0，step默认为1，当step为负整数是，表示反向切片，这是start应该比end的值大。<br><img src="切片.PNG" alt="切片"><br>删除有<code>del aList[:3]</code>切片元素连续，<code>del aList[::2]</code>切片不连续，隔一个删一个。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numbers</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, group_name, company_name, staffs)</span>:</span></span><br><span class="line">        self.group_name = group_name</span><br><span class="line">        self.company_name = company_name</span><br><span class="line">        self.staffs = staffs</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实现翻转功能</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reversed__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.staffs.reverse()</span><br><span class="line">    <span class="comment"># 实现切片的关键</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        <span class="comment"># pass</span></span><br><span class="line">        <span class="comment"># 打印结果是：None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># return self.staffs[item]</span></span><br><span class="line">        <span class="comment"># ['LZY', 'WYJ']</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 切片之后还是一个Group</span></span><br><span class="line">        cls = type(self)</span><br><span class="line">        <span class="keyword">if</span> isinstance(item, slice):</span><br><span class="line">            <span class="keyword">return</span> cls(group_name=self.group_name, company_name= self.company_name, staffs=self.staffs[item])</span><br><span class="line">        <span class="keyword">elif</span> isinstance(item, numbers.Integral):</span><br><span class="line">            <span class="keyword">return</span> cls(group_name=self.group_name, company_name= self.company_name, staffs=[self.staffs[item]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.staffs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter(self.staffs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">in</span> self.staffs:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">group = Group(company_name=<span class="string">"BLCU"</span>,group_name=<span class="string">"lOCAL"</span>,staffs=[<span class="string">'LZY'</span>,<span class="string">'WYJ'</span>,<span class="string">'YL'</span>,<span class="string">'XWJ'</span>,<span class="string">'WN'</span>])</span><br><span class="line"></span><br><span class="line">print(group[:<span class="number">2</span>])</span><br><span class="line">print(group[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># &lt;__main__.Group object at 0x0000017BFFEDFA58&gt;    </span></span><br><span class="line"><span class="comment"># &lt;__main__.Group object at 0x0000017BFFEDFB38&gt;  </span></span><br><span class="line">print(group.staffs)</span><br><span class="line"><span class="comment"># ['LZY', 'WYJ', 'YL', 'XWJ', 'WN']</span></span><br></pre></td></tr></table></figure></p>
<h4 id="bisect管理可排序序列"><a href="#bisect管理可排序序列" class="headerlink" title="bisect管理可排序序列"></a>bisect管理可排序序列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来处理已排序的蓄力，用来维护已排序的序列</span></span><br><span class="line"><span class="comment"># bisect使用二分查找</span></span><br><span class="line"></span><br><span class="line">inter_list = []</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>] </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    bisect.insort(inter_list,i)</span><br><span class="line"></span><br><span class="line">print(inter_list)</span><br><span class="line"><span class="comment"># [1, 2, 4, 8, 10, 15]</span></span><br><span class="line">print(bisect.bisect(inter_list,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 插入的数据在列表中的位置</span></span><br><span class="line">print(bisect.bisect_left(inter_list,<span class="number">2.0</span>))</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># bisect_left和bisect_right左端插入和右端插入</span></span><br></pre></td></tr></table></figure>
<h4 id="array-和-deque"><a href="#array-和-deque" class="headerlink" title="array 和 deque"></a>array 和 deque</h4><ol>
<li>array<br>Ctrl+鼠标左键<br>array 只能存放指定的数据类型<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> array</span><br><span class="line">x = array.array(<span class="string">'i'</span>)</span><br><span class="line">x.append(<span class="number">2</span>)</span><br><span class="line">x.append(<span class="number">4</span>)</span><br><span class="line">x.extend([<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">print(x)</span><br><span class="line">print(x.count(x))</span><br><span class="line"><span class="comment"># array('i', [2, 4, 5, 6])</span></span><br><span class="line"><span class="comment"># 0</span></span><br></pre></td></tr></table></figure>
<h4 id="列表-生成器-字典推导式"><a href="#列表-生成器-字典推导式" class="headerlink" title="列表/生成器/字典推导式"></a>列表/生成器/字典推导式</h4><h5 id="列表生成式（列表推导式）"><a href="#列表生成式（列表推导式）" class="headerlink" title="列表生成式（列表推导式）"></a>列表生成式（列表推导式）</h5>列表推导式是通过一行代码生成列表。<br>列表生成式性能高于列表操作<br><code>odd_list = [i for in range(20) if i%2==1]</code><h5 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h5><code>odd_gen = (i for i in range(20) if i % 2 == 1 )</code><br>odd_gen的类型为generator。<br>生成器可以转换为列表类型，<code>odd_list = list(odd_gen)</code>。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">odd_gen = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span> )</span><br><span class="line">print(odd_gen)</span><br><span class="line"><span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x0000025421CF68B8&gt;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> odd_gen:</span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment"># 正常打印 1,3,5......</span></span><br></pre></td></tr></table></figure>
<h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">"xz"</span>:<span class="number">28</span>,<span class="string">"wyb"</span>:<span class="number">22</span>&#125;</span><br><span class="line">reversed_dict = &#123;value:key <span class="keyword">for</span> key, value <span class="keyword">in</span> my_dict.items()&#125;</span><br><span class="line">print(reversed_dict)</span><br><span class="line"><span class="comment"># &#123;28: 'xz', 22: 'wyb'&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h4><p><code>myset = set(my_dict.keys())</code><br><code>myset = {key for key,value in my_dict.items()}</code></p>
<h3 id="深入Python的set和dict"><a href="#深入Python的set和dict" class="headerlink" title="深入Python的set和dict"></a>深入Python的set和dict</h3><h4 id="dict中的abc继承"><a href="#dict中的abc继承" class="headerlink" title="dict中的abc继承"></a>dict中的abc继承</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Mapping, MutableMapping</span><br><span class="line"><span class="comment"># dict属于mapping类型</span></span><br><span class="line">a = &#123;&#125;</span><br><span class="line">print(isinstance(a,MutableMapping))</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>
<h3 id="对象引用、可变性和垃圾回收"><a href="#对象引用、可变性和垃圾回收" class="headerlink" title="对象引用、可变性和垃圾回收"></a>对象引用、可变性和垃圾回收</h3><p>C3算法</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>建立博客初心</title>
    <url>/2020/01/26/Suria-test-article/</url>
    <content><![CDATA[<p>这是我的第一个测试</p>
<h3 id="初心"><a href="#初心" class="headerlink" title="初心"></a>初心</h3><h4 id="记录学习编程的心路"><a href="#记录学习编程的心路" class="headerlink" title="记录学习编程的心路"></a>记录学习编程的心路</h4><p>我发现走过的很多坑，如果不在每个坑那里种下一朵小花，当我回过头时，就会忘记那些曾收获过的小确幸。那些在泥泞地留下的脚印终会变浅。</p>
<h4 id="学习语言"><a href="#学习语言" class="headerlink" title="学习语言"></a>学习语言</h4><p>语言是过不去的坎，她们是我的初恋，我在学习英语和法语身上投入了很多沉没成本。希望这个博客能够继续记录我和她们的爱恨情仇。</p>
<h4 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h4><p>要知道，我可是个网文写手，如果有一天，我发现自己连自己的感触都不想抒发了，这打击也太大了。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Python高级编程</title>
    <url>/2020/02/02/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="列表推导"><a href="#列表推导" class="headerlink" title="列表推导"></a>列表推导</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="string">'x'</span>,<span class="string">'w'</span>,<span class="string">'j'</span>]</span><br><span class="line"><span class="keyword">for</span> i, element <span class="keyword">in</span> enumerate(s):</span><br><span class="line">    print(i, element)</span><br><span class="line"><span class="comment"># 0 x</span></span><br><span class="line"><span class="comment"># 1 w</span></span><br><span class="line"><span class="comment"># 2 j</span></span><br></pre></td></tr></table></figure>
<h4 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h4><ul>
<li>迭代器实现迭代器协议的容器对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = iter(<span class="string">'abcdefg'</span>)</span><br><span class="line">print(next(i))</span><br><span class="line"><span class="comment"># a</span></span><br></pre></td></tr></table></figure>
<p>当序列遍历完，会抛出StopIteration异常。</p>
<ul>
<li>生成器</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Reality-Is-Broken</title>
    <url>/2020/02/12/Reality-Is-Broken/</url>
    <content><![CDATA[<h3 id="生词"><a href="#生词" class="headerlink" title="生词"></a>生词</h3><p><strong>escapist</strong>:逃避现实的</p>
<p><strong>uncanny</strong>:奇怪的，离奇的</p>
<p><strong>snappy</strong>:活泼的，明快的</p>
<p><strong>plutonium</strong>:钚</p>
<p><strong>groundbreaking</strong>:开创性的，创新的</p>
<p><strong>collaborate</strong>:合作</p>
<p><strong>trifling filler</strong>:微不足道的填充物</p>
<p><strong>interstice</strong>: n空隙、裂口</p>
<p><strong>salvation</strong>:n 解救，拯救</p>
<p><strong>atmospheric-level</strong>:大气水平</p>
<p><strong>cataclysm</strong>:(突然降临的)大灾难</p>
<p><strong>exodus</strong>:N-SING 成批离开</p>
<p><strong>tempest</strong>:暴风雨</p>
<h3 id="节选片段"><a href="#节选片段" class="headerlink" title="节选片段"></a>节选片段</h3><ul>
<li><p><em>Reality is Broken</em> is the most eye-opening book I read this year. With awe-inspiring expertise, clarity of thought and engrossing writing style, Jane McGonigal cleanly exploded every misconception I’ve ever had about game and gaming. If you thought that games are for kids, that games are squandered time, or that games are dangerously isolating, additive, unproductive, and <strong>escapist</strong>, you are in for a giant surprise!</p>
</li>
<li><p>Jane McGonigal’s <strong>uncanny</strong> vision and <strong>snappy</strong> writing give all of us a plausible glimpse of a positive humane future, and of how gaming - of all things - will  take us there.</p>
</li>
<li><p>Her insights in <em>Reality Is Broken</em> have the elegant, compact, deadly simplicity of <strong>plutonium</strong> and the same explosive force.</p>
</li>
<li><p>Jane McGonigal’s <strong>groundbreaking</strong> research offers a surprising solution to how we can build stronger communities and <strong>collaborate</strong> at extreme scales: by playing bigger and better games.</p>
</li>
<li><p>It is game that gives us something to do when there is nothing to do. We thus call games “pastimes” and regard them as <strong>trifling fillers</strong> of the <strong>interstices</strong> of our lives. But they are much more important than that. They are clues to the future. And their serious cultivation now is perhaps our only <strong>salvation</strong>.</p>
</li>
</ul>
<ul>
<li>You can’t pull millions of person-hours out of a society without creating an <strong>atmospheric-level</strong> event. If it happens in a generation, I think the twenty-first century will see a social <strong>cataclysm</strong> larger than that caused by cars, radios, and TV, combined…The <strong>exodus</strong> of these people from the real world, from our normal daily life, will create a change in social climate that makes global warming look like a <strong>tempest</strong> in a teacup.</li>
</ul>
<h3 id="生词-1"><a href="#生词-1" class="headerlink" title="生词"></a>生词</h3><p><strong>drove</strong>:n 人群<br><strong>stretch</strong>:n 一段时间<br><strong>nine-to-fiver</strong>:朝九晚五的人<br><strong>underutilize</strong>:未充分利用的<br><strong>raid</strong>:突击、游击<br><strong>quest</strong>:探索、远征<br><strong>multiplayer</strong>:(电子游戏)多玩家的<br><strong>intent</strong>:n意图 adj专心的<br><strong>handheld</strong>:手持型<br><strong>console</strong>:n 安慰、控制台<br><strong>sneak</strong>:溜<br><strong>eliminate</strong>:v 消灭<br><strong>dedicate</strong>:vt 奉献、献身<br><strong>burnish</strong>:v 刷新<br><strong>silo</strong>:发射井<br><strong>cognitive</strong>:adj 认知的<br><strong>lavish</strong>:毫无节制的<br><strong>skyrocketing</strong>:v 猛涨</p>
<h3 id="节选片段-1"><a href="#节选片段-1" class="headerlink" title="节选片段"></a>节选片段</h3><ul>
<li>Gamers have had enough of reality. They are abandoning it in <strong>droves</strong> - a few hours here, an entire weekend there, sometimes every spare minute of every day for <strong>stretches</strong> at a time - in favor of simulated environments and online games.</li>
<li>Who are thry? They are the <strong>nine-to-fivers</strong> who come home and apply all of the smarts and talents that are <strong>underutilized</strong> at work to plan and coordinate complex <strong>raids</strong> and <strong>quests</strong> in massively <strong>multiplayer</strong> online games.</li>
<li>They’re the <em>World of Warcraft</em> fans who are so <strong>intent</strong> on mastering the challenges of their favorite game.</li>
<li>They’re the <em>Brain Age</em> and <em>Mario Kart</em> players who take <strong>handheld</strong> game <strong>consoles</strong> everywhere they go, <strong>sneaking</strong> in short puzzles, races, and minigames as often as possible, and as a result nearly <strong>eliminating</strong> mental downtime from their lives.</li>
<li>They’re the United States tropps stationed overseas who <strong>dedicate</strong> so many hours a week to <strong>burnishing</strong> their Halo<br>in-game service record that earning virtual combat medals is widely known as the most popular activity for off-duty soliers.</li>
<li><p>And we are creating a massive virtual <strong>silo</strong> of <strong>cognitive</strong> effort, emotional energy, and collective attention <strong>lavished</strong> on game worlds instead os on the real world.</p>
</li>
<li><p>The <strong>ever-skyrocketing</strong> amounts of time and money spent on games are being observed with alarm by some - concerned parents, teachers, and politicians.</p>
</li>
</ul>
<h3 id="生词-2"><a href="#生词-2" class="headerlink" title="生词"></a>生词</h3><p><strong>bewilderment</strong>:n 迷茫</p>
<p><strong>disdain</strong>:v&amp;n 鄙视</p>
<p><strong>substantial</strong>:重大的</p>
<p><strong>surreal</strong>:超现实的、离奇的</p>
<p><strong>headlong</strong>:快速的，一头扎进去的</p>
<p><strong>identical</strong>:相同的</p>
<p><strong>scenario</strong>:设想</p>
<p><strong>counterintuitive</strong>:违反直觉的</p>
<p><strong>hindsight</strong>:后见之明</p>
<h3 id="摘抄"><a href="#摘抄" class="headerlink" title="摘抄"></a>摘抄</h3><ul>
<li>Meanwhile, they are met with <strong>bewilderment</strong> and <strong>disdain</strong> by more than a few nongamers, who still make up nearly half of the U.S, population, although their numbers are rapidly decreasing. Many of them deem gaming a clear waste of time.</li>
<li>And unless something dramatic happens to reverse the resulting exodus, we’re fast on our way to becoming a society in which a <strong>substantial</strong> portion of our population devotes its greatest efforts to playing games, creates its best memories in game environments, and experiences its biggest successes in game worlds.</li>
<li>To a nongamer, this forecast might seem <strong>surreal</strong>, or like science fiction. Are huge <strong>swaths</strong> of civilization really disappearing into game worlds? Are we really rushing <strong>headlong</strong> into a future where the majority of us use games to satisfy many of our most important needs?</li>
<li>Indeed, the very first written history of human gameplay, Herodotus’ Histories, the ancient Greek account of the Persian Wars - dating back more than three thousand years - describes a nearly <strong>identical</strong> <strong>scenario</strong>.</li>
<li>It’s a bit <strong>counterintuitive</strong> to think about the future in terms of the past.</li>
<li>I’ve learned an important trick: to develop foresight, you need to practice <strong>hindsight</strong>.</li>
</ul>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>Web开发 1</title>
    <url>/2020/02/02/Web%E5%BC%80%E5%8F%91-1/</url>
    <content><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><h5 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h5><ul>
<li><p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>放在<code>&lt;head&gt;&lt;/head&gt;</code>标签中，解决中文乱码</p>
</li>
<li><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code> 实现网页尺寸“自适应”。</p>
</li>
<li><p>SEO(搜索引擎优化) <code>&lt;meta name=&quot;keyword&quot; content=&quot;Web开发学习&quot;&gt;</code> <code>&lt;meta name=&quot;description&quot; content=&quot;这是跟着B站小甲鱼学习记录的内容。&quot;&gt;</code></p>
</li>
<li><p>实现网页跳转 <code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;5;http://&quot;&gt;</code> 五秒后刷新进入url指向的的网址。</p>
</li>
</ul>
<h5 id="base"><a href="#base" class="headerlink" title="base"></a>base</h5><ul>
<li>位于<code>&lt;head&gt;</code>标签内，可以用来设置基准URL。</li>
</ul>
<h5 id="pre-元素"><a href="#pre-元素" class="headerlink" title="pre 元素"></a>pre 元素</h5><ul>
<li>HTML 字符实体（Character Entities）</li>
</ul>
<h5 id="定义代码元素"><a href="#定义代码元素" class="headerlink" title="定义代码元素"></a>定义代码元素</h5><ul>
<li>pre 保存样式</li>
<li>code 代码样式</li>
<li>var 定义程序的变量</li>
<li>kbd 定义用户的输入 </li>
<li>samp 定义程序的输出</li>
</ul>
<h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><ul>
<li>短小的引用使用 q 元素</li>
<li>大段的引用使用 blockquote 元素</li>
<li>cite 元素用于定义作品的标题</li>
<li>abbr 元素用于定义简称或者缩写<br><code>&lt;p&gt;&lt;abbr title=&quot;自然语言处理&quot;&gt; NPL&lt;/abbr&gt;是一门课程。&lt;/p&gt;</code></li>
<li>dfn元素用来表现定义中的术语</li>
<li>address 联系信息，显示斜体。</li>
<li>ruby\rt\rp元素加入拼音<br><code>&lt;ruby&gt;魑&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;chi&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;</code></li>
<li>bdo元素修改默认文本方向<br><code>&lt;bdo dir=&quot;ltr&quot;&gt;&lt;/bdo&gt;</code><br>ltr 从左向右<br>rtl 从右向左</li>
</ul>
<h5 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h5><ul>
<li>strong元素，加粗，表示重要的寓意，b元素也能加粗，但是没有寓意。</li>
<li>em 倾斜强调， i斜体。<br>使用css代替b和i。 </li>
<li>del元素和ins元素，删除和下横线。</li>
<li>s元素定义不太准确的删除。</li>
<li>u下划线，拼写错误的单词或专有名词。</li>
<li>mark 标记文本，黄色颜色标注。</li>
<li>sup上标，sub下标。</li>
<li>small使指定元素变小。</li>
</ul>
<h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><ul>
<li>ul无序列表 li <code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code> </li>
<li><p>ol有序列表 li</p>
<p>|属性|值|描述|<br>|:—|—-|—-:|<br>|reversed|reversed|规定列表顺序为降序|<br>|start|number|规定有序列表的起始值|<br>|type|1,A,a,I，i|规定在列表中使用的标记类型|</p>
</li>
<li><p>两个常用的CSS属性<br>list-style-type 设置列表的标志<br>square、disc(实心圆)<br>list-style-image 设置列表自动以标志 <code>list-style-image:url(&quot;&quot;);</code></p>
</li>
<li><p>列表嵌套</p>
</li>
<li>定义列表 dl dt(项目内容) dd(描述)</li>
</ul>
<h5 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Suria<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;thead&gt;&lt;/thead&gt;</code> <code>&lt;tbody&gt;&lt;/body&gt;</code> <code>&lt;tfoot&gt;&lt;/tfoot&gt;</code>可以包裹<code>&lt;tr&gt;</code> <code>&lt;th&gt;</code>。</li>
<li>rollspan属性 跨行</li>
<li><code>&lt;colgroup&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;</code></li>
</ul>
<h5 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span>重写<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>target=”_blank”在新的页面打开</li>
<li>默认值 value=””</li>
<li>自动聚焦 直接在标签中加autofocus</li>
<li>禁用元素 disabled 禁止修改，无法跟着表格数据传输</li>
<li>readonly 虽然无法输入，但是可以提交数据。</li>
<li><code>&lt;label for=&quot;可以是input标签的id值&quot;&gt;&lt;/label&gt;</code>包裹文本，隐式关联</li>
<li>fieldset元素， 对表单进行包裹。legend元素对包裹的框显示说明。</li>
<li>select元素 <code>&lt;select&gt;&lt;option value=&quot;&quot;&gt;&lt;/option&gt;&lt;/select&gt;</code><br><code>&lt;optgroup&gt;&lt;/optgroup&gt;</code>对很多选项进行分组。</li>
<li>input元素的type属性<br>按钮：submit、button、reset<br>单选框: radio name属性要一致<br>复选框：checkbox<br>时间和日期：time\date\month\week\datetine-local<br>(百分号编码)</li>
<li>搜索框 search</li>
<li>颜色选择框 color</li>
<li>图像按钮 image <code>&lt;input type=&quot;image&quot; scr=&quot;&quot;&gt;</code></li>
<li>把input元素隐藏 hidden</li>
<li>file 上传文件 设置<code>enctype=&quot;multipart/from-data&quot;
accept属性设置文件类型。</code>accept=”image/*”<code>所有的图像类型。
限制上传文件尺寸</code><input type="hidden" name="MAX_FILE_SIZE" value="1024">`<br>直接添加 multiple属性可以上传多个文件</li>
<li>限制数字输入number，限制数字输入范围属性：min、max和step（每一次调整幅度）。</li>
<li>数值滚动条 range, value=””初始值。</li>
<li>邮箱、电话和网址，email、tel、url，控住输入的准确性,但有限制。<code>pattern=&quot;&quot;</code>用来自定义匹配，用到正则表达式。<code>placehoder=&quot;&quot;</code>用来提示说明，<code>required</code>属性，必须填。<code>size=&quot;&quot;</code>输入框的大小。<code>maxlength</code>最长输入。</li>
<li>list属性和datalist元素。可以使用id值互相关联。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>网址:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">list</span>=<span class="string">"urllist"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"urllist"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"http://"</span>&gt;</span>网址1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"http://"</span>&gt;</span>网址2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"http://"</span>&gt;</span>网址3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>output元素<br><code>&lt;output name=&quot;x&quot; for=&quot;a b&quot;&gt;&lt;/output&gt;</code><br>a和b分别是不同input的id值。</p>
</li>
<li><p><code>&lt;textarea rows=&quot;5&quot; cols=&quot;10&quot;&gt;&lt;/textarea&gt;</code><br>cols和rows等于字符。</p>
</li>
</ul>
<h5 id="网页的架构"><a href="#网页的架构" class="headerlink" title="网页的架构"></a>网页的架构</h5><ul>
<li>原始使用div元素布局网页，但是它是非语义化元素，html5有了语义化结构。语义与实现分离。</li>
<li>details元素表详情，summary元素表总结。</li>
</ul>
<h5 id="图片操作"><a href="#图片操作" class="headerlink" title="图片操作"></a>图片操作</h5><ul>
<li>map元素在图片上建立映射关系，area元素确定区域。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span> <span class="attr">alt</span>=<span class="string">"图片说明"</span> <span class="attr">usemap</span>=<span class="string">"#book"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">"book"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- circle 需要提供圆心坐标以及圆的半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"circle"</span> <span class="attr">coords</span>=<span class="string">"284,241,163"</span> <span class="attr">alt</span>=<span class="string">"描述"</span> <span class="attr">href</span>=<span class="string">"网址"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- poly需要提供多边形每个点的坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"poly"</span> <span class="attr">coords</span>=<span class="string">"279,230,867,549,636,975,46,655"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- rect需要提供句型左上角和右下角的坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"rect"</span> <span class="attr">coords</span>=<span class="string">"710,818,886,1008"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>picture和source元素，根据窗口大小调整网页大小。</li>
<li>figcaption元素包裹在figure元素中，用来在图片下面显示图片名字。</li>
</ul>
<h5 id="在网页中嵌入视频"><a href="#在网页中嵌入视频" class="headerlink" title="在网页中嵌入视频"></a>在网页中嵌入视频</h5><ul>
<li><code>&lt;video width=&quot;宽&quot; height=&quot;高&quot; src=&quot;视频&quot; controls autoplay muted&gt;备胎&lt;/video&gt;</code>在.mp4视频属性-详细信息中看宽和高。</li>
<li>视频预加载 preload属性，值有auto\none\metadate(加载视频内容)。</li>
<li>视频封面 <code>poster=&quot;图片url&quot;</code></li>
</ul>
<h5 id="嵌入音频"><a href="#嵌入音频" class="headerlink" title="嵌入音频"></a>嵌入音频</h5><ul>
<li><code>&lt;audio src=&quot;.mp3&quot;&gt;非常抱歉，本音频不在这个星球上&lt;/audio&gt;</code></li>
<li>track添加字母，vtt格式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WEBVTT</span><br><span class="line"></span><br><span class="line">00:00:09.250 --&gt; 00:00:11.270</span><br><span class="line">大家好</span><br><span class="line"></span><br><span class="line">00:00:11.270 --&gt; 00:00:13.010</span><br><span class="line">我是Suria</span><br><span class="line"></span><br><span class="line">00:00:03.010 --&gt; 00:00:17.010</span><br><span class="line">今天还是奋斗的一天。</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"宽"</span> <span class="attr">height</span>=<span class="string">"高"</span> <span class="attr">src</span>=<span class="string">"视频"</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">muted</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加备胎 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">".mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">track</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">srclang</span>=<span class="string">"zh"</span> <span class="attr">label</span>=<span class="string">"中文字幕"</span> <span class="attr">kind</span>=<span class="string">"subtitles"</span> <span class="attr">default</span>&gt;</span></span><br><span class="line">    非常抱歉，视频无法播放。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
default 默认加载</li>
</ul>
<h5 id="嵌入一个网页"><a href="#嵌入一个网页" class="headerlink" title="嵌入一个网页"></a>嵌入一个网页</h5><ul>
<li>嵌入网页<br><code>&lt;iframe src=&quot;网址&quot; width=&quot;1024px&quot; height=&quot;800px&quot; sandbox=&quot;&quot;&gt;抱歉，您的浏览器不支持iframe&lt;/iframe&gt;</code><br>sandbox最高程度保护嵌入网页<br><img src="sandbox.PNG" alt="可设置选项"></li>
<li>嵌入百度地图<br><code>&lt;iframe src=&quot;https://map.baidu/&quot; width=&quot;1024&quot; height=&quot;800px&quot;&gt;&lt;/iframe&gt;</code></li>
</ul>
<h5 id="数值显示"><a href="#数值显示" class="headerlink" title="数值显示"></a>数值显示</h5><ul>
<li>meta<br><code>&lt;meter id=&quot;money&quot; high=&quot;0.8&quot; low=&quot;0.2&quot; optimum=&quot;0.6&quot; value=&quot;0.2&quot; min=&quot;0&quot; max=&quot;1&quot;&gt;&lt;/meter&gt;</code></li>
<li>progress 进度条<br><code>&lt;progress max=&quot;1&quot; value=&quot;0.8&quot;&gt;&lt;/progress&gt;</code></li>
</ul>
<h5 id="html简化Emmet语法"><a href="#html简化Emmet语法" class="headerlink" title="html简化Emmet语法"></a>html简化Emmet语法</h5><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p><img src="css.PNG" alt="css图解"></p>
<h4 id="样式引用"><a href="#样式引用" class="headerlink" title="样式引用"></a>样式引用</h4><h5 id="内联样式-Inline-Style"><a href="#内联样式-Inline-Style" class="headerlink" title="内联样式(Inline Style)"></a>内联样式(Inline Style)</h5><p>标签的style属性</p>
<h5 id="内部样式表-Internal-style-Sheet"><a href="#内部样式表-Internal-style-Sheet" class="headerlink" title="内部样式表(Internal style Sheet)"></a>内部样式表(Internal style Sheet)</h5><p>在文档头部通过<code>&lt;style&gt;&lt;/style&gt;</code>中定义样式。</p>
<h5 id="外部样式表-External-Style-Sheet"><a href="#外部样式表-External-Style-Sheet" class="headerlink" title="外部样式表(External Style Sheet)"></a>外部样式表(External Style Sheet)</h5><p>多个网页同用一种样式，<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; herf=&quot;&quot;&gt;</code></p>
<h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><h5 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h5><ul>
<li>通用选择器 <code>*</code>。</li>
<li>元素选择器 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>类选择器 <code>.ClassName</code>。</li>
<li>id选择器 <code>#IdName</code>。</li>
</ul>
<h5 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h5><ul>
<li><p>交集选择器<br>语法规则：<code>元素选择器类选择器/id选择器{}</code></p>
</li>
<li><p>并集选择器 选择器1，选择器2,{}</p>
</li>
<li><p>后代选择器 选择器1 选择器2 选择器3{}</p>
</li>
<li><p>子元素选择器 选择器1&gt;选择器2{}<br>匹配直接子元素</p>
</li>
<li><p>相邻兄弟选择器 选择器1 + 选择器2{} 效果产生在选择器2指定的内容身上。</p>
</li>
<li><p>通用兄弟选择器 选择器1~选择器2{}<br>不同于上面的选择器，这个不用选定相邻的选择器。</p>
</li>
</ul>
<h5 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h5><ul>
<li>::firstline-line{} 应用于文本第一行。</li>
<li>::first-letter{} 文本的第一个字符。</li>
<li>::before 和 ::after分别是在之前和之后插入内容。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="built_in">url</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">"lorem"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>selection匹配用户选择的部分文本。<br><img src="其他选择器.PNG" alt="其他伪类选择器"></li>
</ul>
<h6 id="动态伪类选择器"><a href="#动态伪类选择器" class="headerlink" title="动态伪类选择器"></a>动态伪类选择器</h6><p>:link链接未被访问，:visited链接被访问过，:hover鼠标悬停在链接上方，:active鼠标按下链接的那一刻。顺序，LOVE&amp;HATE</p>
<ul>
<li>:focus 选中的样式。<h6 id="UI伪类选择器"><a href="#UI伪类选择器" class="headerlink" title="UI伪类选择器"></a>UI伪类选择器</h6><img src="ui.PNG" alt="UI伪类选择器"></li>
<li>:enable 可用 :disable 禁用</li>
<li>:checked 被选中的样式</li>
<li>:required 和 :option 分别是可选和必选样式</li>
<li>:default 设置默认元素样式</li>
<li>:valid :invalid 分别定义有效输入和无效输入。</li>
<li>:in-range 和 out-range 来这是用户输入数字在范围内、不在范围内。</li>
<li>read-only 和 read-wirte 只读和可写。</li>
</ul>
<h6 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h6><ul>
<li>:root 根元素样式</li>
<li>:empty 空元素样式（很少用）</li>
<li>:first-child 第一个子元素样式 :last-child最后一个子元素，如果效果没有出来，可以改成:last-of-type。</li>
<li>:only-child 父元素的唯一子元素，匹配独生子；only-of-type,匹配父元素下唯一类型子元素。</li>
<li>:first-of-type父元素下的子元素。(尝试用用。)<h5 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h5><h5 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h5></li>
</ul>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h4 id="defer属性"><a href="#defer属性" class="headerlink" title="defer属性"></a>defer属性</h4><ul>
<li>实现延迟执行脚本</li>
<li>只能用于外部脚本文件<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewpoint"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"Suria"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"t1.js"</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>你好呀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello Web<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x= <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>; i&lt;x.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    x[i].innerText = <span class="string">"我是Suria"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="async属性"><a href="#async属性" class="headerlink" title="async属性"></a>async属性</h5></li>
<li>异步执行脚本<h5 id="noscript"><a href="#noscript" class="headerlink" title="noscript"></a>noscript</h5></li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>python 方法</title>
    <url>/2020/01/31/python%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h4 id="Python-的基本函数"><a href="#Python-的基本函数" class="headerlink" title="Python 的基本函数"></a>Python 的基本函数</h4><h5 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.count(sub, start, end)</span><br></pre></td></tr></table></figure>
<ul>
<li>sub 搜索的子字符串</li>
<li>start 字符串开始搜索的地方，默认为第一个字符串（0）</li>
<li>end 字符串结束搜索的位置，默认为最后一个。<br>返回子字符串在字符串中出现的次数。</li>
</ul>
<h5 id="结巴分词基本操作"><a href="#结巴分词基本操作" class="headerlink" title="结巴分词基本操作"></a>结巴分词基本操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = jieba.cut(article, cut_all = Ture/<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># True是全模式， Flase是精确模式 默认用精确模式</span></span><br></pre></td></tr></table></figure>
<h5 id="去除指定字符串"><a href="#去除指定字符串" class="headerlink" title="去除指定字符串"></a>去除指定字符串</h5><ol>
<li>strip() 可以去除头尾指定字符。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.strip(sub)</span><br><span class="line"><span class="comment"># 去除开头指定字符</span></span><br><span class="line">str.lstrip(sub)</span><br><span class="line"><span class="comment"># 去除结尾指定字符</span></span><br><span class="line">str.rstrip(sub)</span><br></pre></td></tr></table></figure>
当sub为空时，默认去除字符串头尾的空格字符。</li>
<li>replace()<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.replace(old, new,max)</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>old和new可以使用正则表达式模式。</li>
<li>max 指的是从左到右最多max次。</li>
</ul>
<ol>
<li>re.sub()<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">'/n123/r456/t789/s'</span></span><br><span class="line">re.sub(<span class="string">'[/n/r/t]'</span>,<span class="string">''</span>,s)</span><br><span class="line"><span class="comment"># 输出结果：'123456789'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(old, new, str)</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的基本搭建</title>
    <url>/2021/06/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"文章名"</span></span><br></pre></td></tr></table></figure>
<p>显示信息：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题 <span class="comment"># 自动创建</span></span><br><span class="line">data: 日期 <span class="comment"># 自动创建</span></span><br><span class="line">tags: </span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">- 标签3</span><br><span class="line">categories:</span><br><span class="line">- 分类1</span><br><span class="line">- 分类2</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<h3 id="在文章中插入图片"><a href="#在文章中插入图片" class="headerlink" title="在文章中插入图片"></a>在文章中插入图片</h3><p><a href="https://blog.csdn.net/Fitz1318/article/details/86548129" target="_blank" rel="noopener">Hexo文章中插入图片</a></p>
<ol>
<li>在站点配置项目 <code>_config,yml</code> 中修改 <code>post_asset_folder: true</code></li>
<li>安装插件：<code>npm install https://github.com/CodeFalling/hexo-asset-image -- save</code></li>
<li>在文章同文件夹下的创建与文章名相同的文件夹，在里面存储图片。</li>
<li>在文中想添加的地方写入 <code>![](图片.图片格式)</code></li>
</ol>
<h3 id="更换风格"><a href="#更换风格" class="headerlink" title="更换风格"></a>更换风格</h3><ol>
<li>首先要进入项目的根目录下下载<br><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></li>
<li>修改根目录下的 _config.yml 文件，找到 theme 字段<br><code>theme: next</code></li>
<li>样式修改需要在 themes/next/_config.yml 中修改</li>
</ol>
<h3 id="点击鼠标，显示爱心"><a href="#点击鼠标，显示爱心" class="headerlink" title="点击鼠标，显示爱心"></a>点击鼠标，显示爱心</h3><p><a href="https://blog.csdn.net/qq_36759224/article/details/85420403#font_colorFF00001_font_20" target="_blank" rel="noopener">参考网址</a></p>
<ol>
<li>在 \themes\next\source\js 下新建文件 love.js，在 love.js 文件中添加以下代码：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure></li>
<li>在 \themes\next\layout_layout.swig 文件末尾添加以下代码：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/love.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>内存管理</title>
    <url>/2020/02/21/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="内存的基础知识"><a href="#内存的基础知识" class="headerlink" title="内存的基础知识"></a>内存的基础知识</h3><p>内存可存数据。程序执行前<strong>需要先放在内存中才能被CPU处理</strong>——缓和CPU与硬盘之间的速度矛盾。</p>
<p>内存地址从0开始，<strong>每个地址对应一个存储单元</strong>。</p>
<p>如果计算机“<strong>按字节编址</strong>”，则<strong>每个存储单元大小</strong>为<strong>1字节</strong>，即1B，即8个二进制位。</p>
<p>如果<strong>字长为16位</strong>的计算机“<strong>按字编址</strong>”，则<strong>每个存储单元大小</strong>为<strong>1个字</strong>；16个二进制位。</p>
<p><img src="补充知识.PNG" alt="补充知识"></p>
<p>三种策略解决内存装入：</p>
<ol>
<li>绝对装入</li>
<li>可重定向装入（静态重定位）</li>
<li>动态运行时装入（动态重定位）</li>
</ol>
<h4 id="绝对装入"><a href="#绝对装入" class="headerlink" title="绝对装入"></a>绝对装入</h4><p>在编译时，如果知道程序将放到内存中的哪个位置，编译程序将产生地址的目标代码。装入程序按照装入模块中的地址，将程序和数据装入内存。</p>
<p>绝对装入<strong>只适用于单道程序环境</strong>。</p>
<h4 id="可重定位装入"><a href="#可重定位装入" class="headerlink" title="可重定位装入"></a>可重定位装入</h4><p><strong>静态重定位</strong>：又称<strong>可重定位装入</strong>。编译、链接后的装入模块的地址都是从0开始的，指令中使用的地址、数据存放的地址都是相对于起始地址而言的逻辑地址。可根据内存的当前情况，将装入模块装入到内存中的适当位置。装入时对地址进程“<strong>重定位</strong>”，将逻辑地址变换为物理地址（地址变换是在装入时一次完成的）。</p>
<p>静态重定位的特点是在一个作业装入内存时，<strong>必须分配其要求的全部内存空间</strong>，如果没有足够的内存，就不能装入该作业。</p>
<p>作业一旦进入内存后，<strong>在运行期间就不能再移动</strong>，也不能再申请内存空间。</p>
<p>用于早期的多道批处理操作系统。</p>
<h4 id="动态运行时装入"><a href="#动态运行时装入" class="headerlink" title="动态运行时装入"></a>动态运行时装入</h4><p><strong>动态重定位</strong>：又称为<strong>动态运行时装入</strong>。编译、链接后的装入模块的地址都是从0开始的。装入程序把装入模块装入内存中，并不会立即把逻辑地址装换为物理地址，而是<strong>把地址转换推迟到程序真正要执行时才进行</strong>。因此装入内存后所有的地址依然是逻辑地址。这种方式需要一个<strong>重定位寄存器</strong>的支持。</p>
<p>采用动态重定位时<strong>允许程序在内存中发生移动</strong>。</p>
<p><img src="动态重定位.PNG" alt="动态重定位"></p>
<p>需设置重定位寄存器。</p>
<h4 id="从写程序到程序运行"><a href="#从写程序到程序运行" class="headerlink" title="从写程序到程序运行"></a>从写程序到程序运行</h4><p><img src="从写程序到程序运行.PNG" alt="从写程序到程序运行"></p>
<h4 id="链接的三种方式"><a href="#链接的三种方式" class="headerlink" title="链接的三种方式"></a>链接的三种方式</h4><ol>
<li><p><strong>静态链接</strong>：在程序运行之前，先将各目标模块及他们所需的库函数链接称一个完成的可执行文件（装入模块），只有不在拆开。<br><img src="静态链接.PNG" alt="静态链接"></p>
</li>
<li><p><strong>装入时动态链接</strong>：将个目标模块装入内存中，边装入边链接的链接方式。<br><img src="装入时动态链接.PNG" alt="装入时动态链接"></p>
</li>
<li><p><strong>运行时动态链接</strong>：在程序执行中需要该目标模块时，才对它进行链接。其优点是便于修改和更改，便于实现对目标模块的共享。<br><img src="运行时动态链接.PNG" alt="运行时动态链接"></p>
</li>
</ol>
<p><img src="内存的基础知识.png" alt="内存的基础知识.png"></p>
<h3 id="内存管理概念"><a href="#内存管理概念" class="headerlink" title="内存管理概念"></a>内存管理概念</h3><ol>
<li>操作系统负责<strong>内存空间的分配与回收</strong></li>
<li>操作系统需要提供某种技术从逻辑上<strong>对内存空间进行扩充</strong><br>虚拟技术，操作系统的虚拟性</li>
<li>操作系统需要提供地址转换功能，负责程序的<strong>逻辑地址</strong>与<strong>物理地址</strong>的转换（三种装入方式）</li>
<li>保证各进程在自己的内存空间内运行，不会越界。<br>内存保护可采取两种方法：<br>方法一：在CPU中<strong>设置一对上、下限寄存器</strong>，参访进程的上、下限地址。进程的指令要访问某个地址时，CPU检查是否越界。<br>方法二：采用<strong>重定位寄存器</strong>（又称<strong>基址寄存器</strong>）和<strong>界地址寄存器</strong>（又称<strong>限长寄存器</strong>）进行越界检查。重定位寄存器中存放的是进程的<strong>起始物理地址</strong>。界地址寄存器中存放的是进程的<strong>最大逻辑地址</strong>。</li>
</ol>
<h3 id="覆盖与交换"><a href="#覆盖与交换" class="headerlink" title="覆盖与交换"></a>覆盖与交换</h3><p>引入<strong>覆盖技术</strong>，用来<strong>解决“程序大小超过物理内存总和”的问题</strong></p>
<p>覆盖技术的思想：将<strong>程序分为多个段</strong>（多个模块）。常用的段常驻内存，不常用的段在需要时调入内存。</p>
<p>内存中分为<strong>一个“固定区”</strong>和<strong>若干个“覆盖区”</strong>。</p>
<p>需要常驻内存的段放在“<strong>固定区</strong>”中，<strong>调入后就不再调出</strong>（除非运行结束）</p>
<p>不常用的段放在“<strong>覆盖区</strong>”，<strong>需要用时调入内存，用不到时调出内存</strong>。</p>
<h4 id="覆盖技术"><a href="#覆盖技术" class="headerlink" title="覆盖技术"></a>覆盖技术</h4><p><img src="覆盖技术.PNG" alt="覆盖技术"></p>
<p><strong>必须由程序员声明覆盖结构</strong>，操作系统完成自动覆盖。<br><strong>缺点：对用户不透明</strong>，增加了用户编程负担。<br>覆盖技术只用于早期的操作平台，已经退出了历史舞台。</p>
<h4 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h4><p> 交换（对换）技术的设计思想：内存空间紧张时，系统将内存中的某些进程暂时<strong>换出</strong>外存，把外存中某些已具备运行条件的进程<strong>换入</strong>内存（进程在内存与磁盘间的动态调度）</p>
<p> 暂时换出外语才能等待的进程状态为<strong>挂起状态（挂起态，suspend）</strong></p>
<p> 挂起态又可以进一步细分为<strong>就绪挂起、阻塞挂起</strong>两种状态。<br> <img src="交换问题.PNG" alt="交换问题"><br>(<strong>注意：PCB会常驻内存</strong>，不会被换出外存。)</p>
<p><img src="覆盖与交换.png" alt="覆盖与交换.png"></p>
<h3 id="连续分配管理方式"><a href="#连续分配管理方式" class="headerlink" title="连续分配管理方式"></a>连续分配管理方式</h3><p><strong>连续分配</strong>：指为用户进程分配的必须是一个<strong>连续的内存空间</strong></p>
<h4 id="单一连续分配"><a href="#单一连续分配" class="headerlink" title="单一连续分配"></a>单一连续分配</h4><p><img src="单一.PNG" alt="单一"></p>
<h4 id="固定分区分配"><a href="#固定分区分配" class="headerlink" title="固定分区分配"></a>固定分区分配</h4><p><img src="固定.PNG" alt="固定"></p>
<p><img src="固定1.PNG" alt="固定1"></p>
<h4 id="动态分区分配"><a href="#动态分区分配" class="headerlink" title="动态分区分配"></a>动态分区分配</h4><p><img src="动态.PNG" alt="动态"></p>
<ol>
<li><img src="两种动态方法.PNG" alt="两种动态方法"></li>
<li>当有很多空闲分区都能满足需求时，应该选择那个分区进行分配？</li>
</ol>
<p>把一个新作业装入内存时，需按照一定的<strong>动态分区分配算法</strong>，把空闲分区表（或空闲分区链）中选出一个分区分配给该作业。</p>
<ol>
<li>如何进行分区的分配与回收操作？<br>（假设系统采用的数据结构是“空闲分区表”……如何分配）<br><img src="问题3.PNG" alt="问题3"></li>
</ol>
<p><img src="问题3_1.PNG" alt="问题3_1"></p>
<p>回收情况1<br>回收区前有一个相邻的空闲分区</p>
<p>情况2<br>回收区后有一个相邻的空闲分区</p>
<p>情况3<br>回收区前后各有一个相邻的空闲分区</p>
<p>合并之前或之后的空闲分区</p>
<p>情况4<br>回收区的前、后都没有相邻的空闲分区<br>新增一个表项</p>
<p>（注：各表项的顺序不一定按照地址递增顺序排列，具体的排列方式需要依据动态分区分配算法来确定。）</p>
<p><strong>动态分区分配</strong>又称为<strong>可变分区分配</strong>。这种分配方式<strong>不会预先划分内存分区</strong>，而是在进程装入内存时，<strong>根据进程的大小动态地建立分区</strong>，并根据分区的大小证号适合进程的需要。因此系统分区的大小和数目是可变的。</p>
<p>动态分区分配<strong>没有内部碎片</strong>，但是<strong>有外部碎片</strong>。<br><strong>内部碎片</strong>，分配给某个进程的内存区域中，如果有些部分没有用上。<br><strong>外部碎片</strong>如果内存中空闲空间的总和本来可以满足某进程的要求，但是由于进程需要的是一整块连续的内存空间，因此这些“碎片”不能满足进程的需求。</p>
<p>可以通过<strong>紧凑（拼凑，Compaction）</strong>技术来解决外部碎片。<br><img src="连续分配管理.png" alt="连续分配管理.png"></p>
<p>另外，需要对管理空闲分区的数据结构有印象——空闲分区表，空闲分区链。</p>
<h3 id="动态分区分配算法"><a href="#动态分区分配算法" class="headerlink" title="动态分区分配算法"></a>动态分区分配算法</h3><h4 id="首次适应算法"><a href="#首次适应算法" class="headerlink" title="首次适应算法"></a>首次适应算法</h4><p><strong>算法思想</strong>：每次都是从低地址开始查找，找到第一个能满足大小的空闲分区。</p>
<p><strong>如何实现：空闲分区以地址递增的次序排列</strong>。每次分配内存时顺序查找<strong>空闲分区链</strong>（或<strong>空闲分区表</strong>），找到代销能满足要求的第一个空闲分区。</p>
<p><img src="首次适应.PNG" alt="首次适应"></p>
<h4 id="最佳适应算法"><a href="#最佳适应算法" class="headerlink" title="最佳适应算法"></a>最佳适应算法</h4><p><strong>算法思想</strong>：由于动态分区分配是是一种连续分配方式，为各进程分配的空间必须是连续的一整片区域。因此为了保证“大进程”到来时能有连续的大片空间，可以尽可能多地留下大片空闲区，即，优先使用更小的空闲区。</p>
<p><strong>如何实现</strong>：空闲分区<strong>按容器递增次序链接</strong>。每次分配内存时顺序查找<strong>空闲分区链</strong>（或<strong>空闲分区表</strong>），找到大小能满足要求的第一个空闲分区。</p>
<p><strong>缺点：每次都选最小的分区进行分配，会留下越来越多的、很小的、难以利用的内存块。因此这种方法会产生很多外部碎片。</strong></p>
<h4 id="最坏适应算法"><a href="#最坏适应算法" class="headerlink" title="最坏适应算法"></a>最坏适应算法</h4><p>又称<strong>最大适应算法（Largest Fit）</strong></p>
<p>为了解决最佳适应算法的问题——即留下太多难以利用的小碎片，可以在每次分配时优先使用最大的连续空闲区，这样分配后圣墟的空闲区就不会太小，很方便使用。</p>
<p>空闲分区<strong>按容量递减次序链接</strong>。每次分配内存时顺序查找<strong>空闲分区链</strong>（或<strong>空闲分区表</strong>），找到大小能满足要求的第一个空闲分区。</p>
<p><strong>缺点：每次都选最大的分区进行分配，虽然可以让范配后留下的空闲区更大，更可用，但这汇总方式会导致较大的连续空闲区被迅速用完。如果之后有“大进程”到达，就没有内存分区可用了</strong>。</p>
<h4 id="邻近适应算法"><a href="#邻近适应算法" class="headerlink" title="邻近适应算法"></a>邻近适应算法</h4><p><img src="邻近适应算法.PNG" alt="邻近适应算法"></p>
<h4 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">算法</th>
<th>算法思想</th>
<th>分区排列顺序</th>
<th>优点</th>
<th style="text-align:right">缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">首次适应</td>
<td>从头到尾找适合的分区</td>
<td>空闲分区以地址递增次序排列</td>
<td>综合看性能最好。算法开销小，回收分区后一般不需要对空闲分区队列重新排序</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">最佳适应</td>
<td>优先使用最小的分区，以保留更多大分区</td>
<td>空闲分区以容量递增次序排列</td>
<td>会有更多的大分区被保留下来，更能满足大进程需求</td>
<td style="text-align:right">会产生很多太小的、难以利用的碎片；算法开销发，回收分区后可能需要对空闲分区队列重新排序</td>
</tr>
<tr>
<td style="text-align:left">最坏适应</td>
<td>优先使用更大的分区，乙方产生太小的不可用的碎片</td>
<td>空闲分区以容量递减次序排列</td>
<td>可以减少难以利用的小碎片</td>
<td style="text-align:right">大分区容易被用完，不利于大进程；算法开销大</td>
</tr>
<tr>
<td style="text-align:left">邻近适应</td>
<td>由首次适应演变而来，每次从上次查找结束为止开始查找</td>
<td>空闲分区以地址地址递增次序排列（可排列成循环链表）</td>
<td>不用每次都从低地址的小分区开始检索。算法开销小</td>
<td style="text-align:right">会使高地址的大分区也被用完</td>
</tr>
</tbody>
</table>
</div>
<h3 id="基本分页存储管理的基本概念"><a href="#基本分页存储管理的基本概念" class="headerlink" title="基本分页存储管理的基本概念"></a>基本分页存储管理的基本概念</h3><p><strong>连续分配</strong>：为用户进程分配的必须是一个<strong>连续的内存空间</strong>。<br><strong>非连续分配</strong>：为用户进程分配的可以是一些<strong>分散的内存空间</strong>。</p>
<h4 id="什么是分页存储"><a href="#什么是分页存储" class="headerlink" title="什么是分页存储"></a>什么是分页存储</h4><p>将内存空间分为一个个<strong>大小相等的分区</strong>（比如：每个分区4KB），每个分区就是一个“<strong>页框</strong>”（<strong>页框=页帧=内存块=物理块=物理页面</strong>）。每个页框有一个编号，即“<strong>页框号</strong>”（<strong>页框号=页帧号=内存块号=物理块号=物理页号</strong>），页框号<strong>从0开始</strong>。</p>
<p>将<strong>进程的逻辑地址空间</strong>也分为<strong>与页框大小相等</strong>的一个个部分，每个部分称为一个“<strong>页</strong>”或“<strong>页面</strong>”。每个页面也有一个编号，即“<strong>页号</strong>”，页号也是<strong>从0开始</strong>。</p>
<p>操作系统<strong>以页框为单位为各个进程分配</strong>内存空间。进程的每个页面分别放入一个也狂中。也就是说，进程的<strong>页面</strong>与内存的<strong>页框</strong>有<strong>一一对应</strong>的关系。</p>
<p><img src="页.PNG" alt="页"></p>
<h4 id="重要的数据结构——页表"><a href="#重要的数据结构——页表" class="headerlink" title="重要的数据结构——页表"></a>重要的数据结构——页表</h4><p>为了能知道进程的每个页面在内存中存放的位置，操作系统腰围每个进程建立一张<strong>页表</strong>。</p>
<p>注：页表通常存在PCB（进程控制块）中<br><img src="页表.PNG" alt="页表"></p>
<p><img src="页表占字节.PNG" alt="页表占字节"></p>
<p><strong>计算机中内存块的数量——&gt;页表项中块号至少占多少字节</strong></p>
<p><img src="页表项.PNG" alt="页表项"></p>
<p>页表中的<strong>页号</strong>可以是<strong>隐含</strong>的，即<strong>页号不占用存储空间</strong>。</p>
<p><strong>注意：页表记录的只是内存块号，而不是内存块的起始地址！</strong><br><strong>J号内存块的起始地址=J *内存块大小</strong></p>
<h4 id="如何实现地址装换"><a href="#如何实现地址装换" class="headerlink" title="如何实现地址装换"></a>如何实现地址装换</h4><p><img src="实现地址装换.PNG" alt="实现地址装换"></p>
<p><img src="页号计算.PNG" alt="页号计算"></p>
<p><img src="页号页内偏移量计算.PNG" alt="页号页内偏移量计算"></p>
<p><img src="二进制计算.PNG" alt="二进制计算"></p>
<p>在计算机内部，地址是用二进制表示的，如果<strong>页面大小</strong>刚好是<strong>2的整数幂</strong>，则计算机硬件可以很快速的把逻辑地址拆分成页号，页内偏移量。</p>
<p>如何计算：<br><strong>页号</strong>=逻辑地址/页面长度（取除法的<strong>整数</strong>部分）<br><strong>页内偏移量</strong>=逻辑地址%页面长度（取除法的<strong>余数</strong>部分）</p>
<p>总结：页面大小刚好是2的整数次幂有什么好处？</p>
<ol>
<li><p>逻辑地址的拆分更加迅速——如果每个页面的大小为2^kB,用二级制数表示逻辑地址，则<strong>末尾K位</strong>即为<strong>页内偏移量</strong>，其余部分就是<strong>页号</strong>。因此，如果让每个页面的大小为2的整数幂，计算机硬件就可以很方便地得出一个逻辑地址对应的页号和页内偏移量，而无需进行除法运算，从而提升运行速度。</p>
</li>
<li><p>物理地址的计算更加迅速——根据逻辑地址得到页号，根据页号查询页表从而找到哦啊页面存放的内存块号，将二进制表示的内存块号和页内偏移量拼接起来，就可以得到最终的物理地址。</p>
</li>
</ol>
<p><img src="技巧.PNG" alt="技巧"></p>
<p><img src="基本分页存储管理的基本概念.png" alt="基本分页存储管理的基本概念.png"></p>
<h3 id="基本地址变换机构"><a href="#基本地址变换机构" class="headerlink" title="基本地址变换机构"></a>基本地址变换机构</h3><p><strong>重点理解、记忆基本地址变换机构（用于实现逻辑地址到物理地址转换的一组硬件机构）的原理和流程</strong></p>
<p>通常会在系统中设置一个<strong>页表寄存器</strong>（PTR），存放<strong>页表在内存中的起始地址F</strong>和<strong>页表长度M</strong>。进程未执行时，页表的始址和页表长度<strong>放在进程控制块（PCB）中</strong>，当进程被调度时，操作系统内核会把他们放到页表寄存器中。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>专业课</tag>
      </tags>
  </entry>
  <entry>
    <title>个人编程作业</title>
    <url>/2020/01/29/try/</url>
    <content><![CDATA[<h4 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h4><ul>
<li>自己独立完成，并在代码中标注详细的注释，另外需要撰写readme文件,说明思路和流程</li>
<li>模块化编程</li>
<li>使用面向对象编程</li>
<li>使用多线程编程<br>说明：期末提交初稿代码，已经完成的函数模块可执行。全部代码和程序运行结果于课程评分前一周提交个人github代码仓库。</li>
</ul>
<h4 id="作业1"><a href="#作业1" class="headerlink" title="作业1"></a>作业1</h4><ol>
<li>文本特征抽取：参考Coh-Metrix version3.0 indices，编写自己的mini版Coh-Metrix（中文或英文），只需要实现 Descriptive、Lexical Diversity 和Readability 中的指标，每类指标至少选取三个以上指标进行实现。 输出结果可以参考Cohmatrix-Webtool。验证方法，找任意文章作为输入，输出实现的各指标的数值结果。</li>
</ol>
<h4 id="作业2"><a href="#作业2" class="headerlink" title="作业2"></a>作业2</h4><ol>
<li>文本人物、动物关系分析：针对本节课后作业中的语料（中文、英文都需要做），抽取其中的人物、动物名称，并分析人物与人物之间关系的紧密程序，紧密程度为人物和人物（或动物）在一定的上下文里（比如500词）共存的次数。</li>
</ol>
]]></content>
      <categories>
        <category>编程练习</category>
      </categories>
      <tags>
        <tag>编程练习</tag>
      </tags>
  </entry>
  <entry>
    <title>优化博客</title>
    <url>/2020/01/29/%E4%BC%98%E5%8C%96%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h4 id="为自己的博客添加特效"><a href="#为自己的博客添加特效" class="headerlink" title="为自己的博客添加特效"></a>为自己的博客添加特效</h4><p><a href="https://blog.csdn.net/qq_36759224/article/details/85420403#font_colorFF00001_font_20" target="_blank" rel="noopener">参考网址</a></p>
<h5 id="添加网站雪花飘落效果"><a href="#添加网站雪花飘落效果" class="headerlink" title="添加网站雪花飘落效果"></a>添加网站雪花飘落效果</h5><p>在 \Hexo\themes\next\source\js 目录下新建一个 snow.js 文件，粘贴以下代码：<br>样式1是纹理分明的雪花<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*样式一*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">	$.fn.snow = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $flake = $(<span class="string">'&lt;div id="snowbox" /&gt;'</span>).css(&#123;<span class="string">'position'</span>: <span class="string">'absolute'</span>,<span class="string">'z-index'</span>:<span class="string">'9999'</span>, <span class="string">'top'</span>: <span class="string">'-50px'</span>&#125;).html(<span class="string">'&amp;#10052;'</span>),</span><br><span class="line">	documentHeight 	= $(<span class="built_in">document</span>).height(),</span><br><span class="line">	documentWidth	= $(<span class="built_in">document</span>).width(),</span><br><span class="line">	defaults = &#123;</span><br><span class="line">		minSize		: <span class="number">10</span>,</span><br><span class="line">		maxSize		: <span class="number">20</span>,</span><br><span class="line">		newOn		: <span class="number">1000</span>,</span><br><span class="line">		flakeColor	: <span class="string">"#AFDAEF"</span> <span class="comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span></span><br><span class="line">	&#125;,</span><br><span class="line">	options	= $.extend(&#123;&#125;, defaults, options);</span><br><span class="line">	<span class="keyword">var</span> interval= setInterval( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> startPositionLeft = <span class="built_in">Math</span>.random() * documentWidth - <span class="number">100</span>,</span><br><span class="line">	startOpacity = <span class="number">0.5</span> + <span class="built_in">Math</span>.random(),</span><br><span class="line">	sizeFlake = options.minSize + <span class="built_in">Math</span>.random() * options.maxSize,</span><br><span class="line">	endPositionTop = documentHeight - <span class="number">200</span>,</span><br><span class="line">	endPositionLeft = startPositionLeft - <span class="number">500</span> + <span class="built_in">Math</span>.random() * <span class="number">500</span>,</span><br><span class="line">	durationFall = documentHeight * <span class="number">10</span> + <span class="built_in">Math</span>.random() * <span class="number">5000</span>;</span><br><span class="line">	$flake.clone().appendTo(<span class="string">'body'</span>).css(&#123;</span><br><span class="line">		left: startPositionLeft,</span><br><span class="line">		opacity: startOpacity,</span><br><span class="line">		<span class="string">'font-size'</span>: sizeFlake,</span><br><span class="line">		color: options.flakeColor</span><br><span class="line">	&#125;).animate(&#123;</span><br><span class="line">		top: endPositionTop,</span><br><span class="line">		left: endPositionLeft,</span><br><span class="line">		opacity: <span class="number">0.2</span></span><br><span class="line">	&#125;,durationFall,<span class="string">'linear'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$(<span class="keyword">this</span>).remove()</span><br><span class="line">	&#125;);</span><br><span class="line">	&#125;, options.newOn);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.fn.snow(&#123; </span><br><span class="line">	    minSize: <span class="number">5</span>, <span class="comment">/* 定义雪花最小尺寸 */</span></span><br><span class="line">	    maxSize: <span class="number">50</span>,<span class="comment">/* 定义雪花最大尺寸 */</span></span><br><span class="line">	    newOn: <span class="number">300</span>  <span class="comment">/* 定义密集程度，数字越小越密集 */</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<hr>
<p>样式2是团状雪花<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*样式二*/</span></span><br><span class="line"><span class="comment">/* 控制下雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowFall</span>(<span class="params">snow</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 可配置属性 */</span></span><br><span class="line">    snow = snow || &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.maxFlake = snow.maxFlake || <span class="number">200</span>;   <span class="comment">/* 最多片数 */</span></span><br><span class="line">    <span class="keyword">this</span>.flakeSize = snow.flakeSize || <span class="number">10</span>;  <span class="comment">/* 雪花形状 */</span></span><br><span class="line">    <span class="keyword">this</span>.fallSpeed = snow.fallSpeed || <span class="number">1</span>;   <span class="comment">/* 坠落速度 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 兼容写法 */</span></span><br><span class="line">requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123; setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>); &#125;;</span><br><span class="line"></span><br><span class="line">cancelAnimationFrame = <span class="built_in">window</span>.cancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msCancelAnimationFrame ||</span><br><span class="line">	<span class="built_in">window</span>.oCancelAnimationFrame;</span><br><span class="line"><span class="comment">/* 开始下雪 */</span></span><br><span class="line">snowFall.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/* 创建画布 */</span></span><br><span class="line">    snowCanvas.apply(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">/* 创建雪花形状 */</span></span><br><span class="line">    createFlakes.apply(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">/* 画雪 */</span></span><br><span class="line">    drawSnow.apply(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建画布 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 添加Dom结点 */</span></span><br><span class="line">    <span class="keyword">var</span> snowcanvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">    snowcanvas.id = <span class="string">"snowfall"</span>;</span><br><span class="line">    snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    snowcanvas.height = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">    snowcanvas.setAttribute(<span class="string">"style"</span>, <span class="string">"position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;"</span>);</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(snowcanvas);</span><br><span class="line">    <span class="keyword">this</span>.canvas = snowcanvas;</span><br><span class="line">    <span class="keyword">this</span>.ctx = snowcanvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="comment">/* 窗口大小改变的处理 */</span></span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">        <span class="comment">/* snowcanvas.height = window.innerHeight */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 雪运动对象 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flakeMove</span>(<span class="params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasWidth);   <span class="comment">/* x坐标 */</span></span><br><span class="line">    <span class="keyword">this</span>.y = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasHeight);  <span class="comment">/* y坐标 */</span></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="built_in">Math</span>.random() * flakeSize + <span class="number">2</span>;          <span class="comment">/* 形状 */</span></span><br><span class="line">    <span class="keyword">this</span>.maxSize = flakeSize;                           <span class="comment">/* 最大形状 */</span></span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + fallSpeed;         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.fallSpeed = fallSpeed;                         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed;                             <span class="comment">/* Y方向速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.velX = <span class="number">0</span>;                                      <span class="comment">/* X方向速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.stepSize = <span class="built_in">Math</span>.random() / <span class="number">30</span>;                 <span class="comment">/* 步长 */</span></span><br><span class="line">    <span class="keyword">this</span>.step = <span class="number">0</span>                                       <span class="comment">/* 步数 */</span></span><br><span class="line">&#125;</span><br><span class="line">flakeMove.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="keyword">this</span>.x,</span><br><span class="line">        y = <span class="keyword">this</span>.y;</span><br><span class="line">    <span class="comment">/* 左右摆动(余弦) */</span></span><br><span class="line">    <span class="keyword">this</span>.velX *= <span class="number">0.98</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.velY &lt;= <span class="keyword">this</span>.speed) &#123;</span><br><span class="line">        <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.velX += <span class="built_in">Math</span>.cos(<span class="keyword">this</span>.step += <span class="number">.05</span>) * <span class="keyword">this</span>.stepSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.y += <span class="keyword">this</span>.velY;</span><br><span class="line">    <span class="keyword">this</span>.x += <span class="keyword">this</span>.velX;</span><br><span class="line">    <span class="comment">/* 飞出边界的处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.x &gt;= canvas.width || <span class="keyword">this</span>.x &lt;= <span class="number">0</span> || <span class="keyword">this</span>.y &gt;= canvas.height || <span class="keyword">this</span>.y &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.reset(canvas.width, canvas.height)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 飞出边界-放置最顶端继续坠落 */</span></span><br><span class="line">flakeMove.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * width);</span><br><span class="line">    <span class="keyword">this</span>.y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.size = <span class="built_in">Math</span>.random() * <span class="keyword">this</span>.maxSize + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + <span class="keyword">this</span>.fallSpeed;</span><br><span class="line">    <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed;</span><br><span class="line">    <span class="keyword">this</span>.velX = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span></span><br><span class="line">flakeMove.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> snowFlake = ctx.createRadialGradient(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="number">0</span>, <span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.size);</span><br><span class="line">    snowFlake.addColorStop(<span class="number">0</span>, <span class="string">"rgba(255, 255, 255, 0.9)"</span>);  <span class="comment">/* 此处是雪花颜色，默认是白色 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">.5</span>, <span class="string">"rgba(255, 255, 255, 0.5)"</span>); <span class="comment">/* 若要改为其他颜色，请自行查 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">1</span>, <span class="string">"rgba(255, 255, 255, 0)"</span>);    <span class="comment">/* 找16进制的RGB 颜色代码。 */</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.fillStyle = snowFlake;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.size, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 创建雪花-定义形状 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFlakes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="keyword">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="keyword">this</span>.flakes = [],</span><br><span class="line">        canvas = <span class="keyword">this</span>.canvas;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxFlake; i++) &#123;</span><br><span class="line">        flakes.push(<span class="keyword">new</span> flakeMove(canvas.width, canvas.height, <span class="keyword">this</span>.flakeSize, <span class="keyword">this</span>.fallSpeed))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 画雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawSnow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="keyword">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="keyword">this</span>.flakes;</span><br><span class="line">    ctx = <span class="keyword">this</span>.ctx, canvas = <span class="keyword">this</span>.canvas, that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">/* 清空雪花 */</span></span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; maxFlake; e++) &#123;</span><br><span class="line">        flakes[e].update();</span><br><span class="line">        flakes[e].render(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*  一帧一帧的画 */</span></span><br><span class="line">    <span class="keyword">this</span>.loop = requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        drawSnow.apply(that);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调用及控制方法 */</span></span><br><span class="line"><span class="keyword">var</span> snow = <span class="keyword">new</span> snowFall(&#123;<span class="attr">maxFlake</span>:<span class="number">60</span>&#125;);</span><br><span class="line">snow.start();</span><br></pre></td></tr></table></figure><br>然后在\Hexo\next\layout\layout.swig 文件里引用即可：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 雪花特效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"\js\snow.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>没有效果就把<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.8.3/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.8.3/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>网址中的js代码复制在 \Hexo\themes\next\source\js 新建两个js文件，以同样的方法再引用。</p>
<h5 id="增加天气，使用插件"><a href="#增加天气，使用插件" class="headerlink" title="增加天气，使用插件"></a>增加天气，使用插件</h5><p><a href="https://cj.weather.com.cn/plugin/pc/view" target="_blank" rel="noopener">天气网站</a><br>自定义，生成类似于下面的代码<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"weather-view-he"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">WIDGET = &#123;ID: <span class="string">'1AgrGVYAQZ'</span>&#125;;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://apip.weatherdt.com/view/static/js/r.js?v=1111"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>插入 \themes\next\layout_layout.swig中</p>
<p>顺便说一下，插件真的好用！</p>
<p>啊，没有一点头绪，它在我的网页上短暂地出现过。然后消失不见，再也找不到了。</p>
<p>真是苦恼！！！！！！</p>
<p>我知道，是一个网页只能调用一个天气。</p>
<h5 id="在博客底端加入诗词"><a href="#在博客底端加入诗词" class="headerlink" title="在博客底端加入诗词"></a>在博客底端加入诗词</h5><p><a href="https://www.jinrishici.com/doc/" target="_blank" rel="noopener">官网</a><br><a href="https://cloud.tencent.com/developer/article/1577027" target="_blank" rel="noopener">参考网站</a></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>学习爬虫 1</title>
    <url>/2020/02/02/%E5%AD%A6%E4%B9%A0%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装是永远逃不过的首要话题</p>
<ol>
<li>安装Phantomjs（失败）<br><a href="https://phantomjs.org/download.html" target="_blank" rel="noopener">Phantomjs官网</a></li>
</ol>
<p>但是我下载了半天也没反应，既然它是解决浏览器跳出显示的问题，应该也没有什么大的影响。</p>
<p>Phamtomjs在18年停止开发了，技术更新换代，坚守更新自己开发的产品真不容易。</p>
<ol>
<li>安装aiohttp</li>
</ol>
<p>因为request库是<strong>阻塞式</strong> http请求库，当发送请求后，程序会一直等待服务器响应，直到得到相应后，程序才会进行下一步处理。</p>
<p>aiohttp是一个提供异步 Web 服务的库，从Python3.5版本开始，Python中加入async/await关键字。</p>
<p><code>pip install aiohttp</code></p>
<p>官方推荐安装两个库，一个是字符编码检测库cchardet，一个是加速DNS的解析库aiodns。</p>
<p><code>pip install cchardet aiodns</code></p>
<p>(建议在网速好的地方下载)</p>
<ol>
<li>安装解析库</li>
</ol>
<ul>
<li>lxml 是 Python 的解析库， 支持 HTML 和 XML 的解析，支持Xpath的解析方式，而且解析效率高。（具体是啥，我也不太清楚）</li>
</ul>
<p><code>pip install lxml</code></p>
<ul>
<li>Beautiful Soup 是 Python 的 HTML 或 XML 的解析库，可以用它来方便地从网友中提取数据。</li>
</ul>
<p><code>pip install beautifulsoup4</code></p>
<p>验证使用<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(<span class="string">'&lt;p&gt;Hello&lt;/p&gt;'</span>,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.string)</span><br><span class="line"><span class="comment"># Hello</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>pyquery 同样是一个强大的网络解析器（个人比较喜欢用pyquery）</li>
</ul>
<p><code>pip install pyquery</code></p>
<ul>
<li>在爬虫过程中，会遇到各种各样的验证码，大多数验证码是图形验证码，我们可以使用<strong>OCR</strong>来识别。tesserocr</li>
</ul>
<p>OCR (Optical Character Recognition):光学字符识别，是指通过扫描字符，然后通过其形状将其翻译成电子文本的过程。</p>
<p>tesserocr是Python的一个OCR 识别库，但其实是对tesseract的一层 Python API 封装，在安装tesserocr 之前先安装 <a href="https://digi.bib.uni-mannheim.de/tesseract/" target="_blank" rel="noopener">tesseract</a>。</p>
<p><code>pip install tesserocr pillow</code></p>
<ol>
<li>数据库的安装</li>
</ol>
<p>主要安装的有关系型数据库 MySQL 以及非关系型数据库 MongoDB、Redis。</p>
<p>在网上找教程，进行下载安装。</p>
<p>Redis是一个机遇内存的高效非关系型数据库。推荐下载Redis Desktop Manager可视化管理工具。</p>
<p>要想将数据储存到数据库中，仍需要安装操作的库。</p>
<p><code>pip install pymysql</code></p>
<p><code>pip install pymongo</code></p>
<p><code>pip install redis</code></p>
<p>另外，RedisDump是一个用于Redis数据导入、导出的工具，是基于Ruby实现的。</p>
<p>所以，先安装Ruby，再安装RedisDump。</p>
<p>安装Ruby之后，可以执行gem命令。<code>gem install redis-dump</code>。</p>
<p>安装成功后就可以执行 <code>redis-dump</code> 和 <code>redis-load</code>。</p>
<ol>
<li>Web库的安装</li>
</ol>
<p>啊，我又见到纠缠了很久的Flask了。</p>
<ul>
<li>Flask是一个轻量级的Web服务程序，主要用来做一些API服务。</li>
</ul>
<p><code>pip install flask</code></p>
<ul>
<li>Tornado是一个支持异步的Web框架，通过使用<strong>非阻塞I/O流</strong>，它可以支持成千上万的开放连接，效率非常高。（作者说的，我目前还不信。）</li>
</ul>
<p><a href="https://www.cnblogs.com/songhuasheng/p/10254597.html" target="_blank" rel="noopener">Python+WEB框架之Tornado</a></p>
<p><code>pip install tornado</code></p>
<p>验证安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.write(<span class="string">"Hello, World"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_app</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tornado.web.Application([</span><br><span class="line">        (<span class="string">r"/"</span>, MainHandler),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = make_app()</span><br><span class="line">    app.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>
<ol>
<li>App爬取相关库的安装</li>
</ol>
<p>除了爬 Web 网站，爬虫也可以抓取App的数据，而这些数据一般是通过请求服务器的接口来获取的。由于 App 没有浏览器这种可以比较直观地看到后台请求的工具，所以主要用一些抓包技术来抓取数据。</p>
<ul>
<li>Charles 是一个网络抓包工具，相比 Fiddler 功能更为强大，而且跨平台支持更好。</li>
<li>mitmproxy 是一个支持HTTP和HTTPS的抓包程序，类似Fiddler、Charles的功能，只不过它通过控制台的形式操作。（控制台是个啥？）mitmproxy还有两个关联组件，一个是mitmdump，它是mitmproxy的命令行接口，利用它可以对接Python脚本，实现监听后处理；另一个是mitmweb,它是Web程序，通过它可以清楚地观察到mitmproxy捕获的请求。</li>
</ul>
<p>安装 <code>pip install mitmproxy</code>。</p>
<p>对于 mitmproxy 来说，如果想要截获HTTPS请求，就需要设置证书。mitmproxy在安装后会提供一套CA证书，只要客户端信任了mitmproxy提供的证书，就可以通过它获取HTTPS提供的具体内容。（有需要再去64页看）</p>
<ul>
<li>Appium是移动端的自动化测试软件，类似于Selenium,利用它来驱动Android、iOS等设备中完成自动化测试，比如模拟点击、滑动、输入等操作，<a href="http://appium.io/" target="_blank" rel="noopener">官网地址</a>，首先安装Appium，Appium负责驱动移动端来完成一系列操作，他使用UIAutomator和Selendroid来实现驱动。</li>
</ul>
<p>可以直接下载Appium Desktop来安装，页可以通过Node.js来安装。<code>npm install -g appium</code></p>
<ul>
<li>Android开发环境配置，直接安装Android Studio。(算了，我还是之后用到了再下载吧。太可怕了。有这么多东西需要下载，还不知道会有多少Bugs等着我。)</li>
</ul>
<ol>
<li>爬虫框架的安装</li>
</ol>
<ul>
<li>pyspider是国人编写的强大的网络爬虫框架。它支持JavaScript渲染，这个过程依赖于PhantomJS（仍然要安装）的。</li>
</ul>
<p><code>pip install pyspider</code>，如果报错，<code>pip install pycurl-7.43.0-cp36-cp36m-win_amd64.whl</code>。验证完成<code>pyspider all</code>，pyspider的Web服务就会在本地5000端口运行，可以打开<a href="http://localhost:5000/。" target="_blank" rel="noopener">http://localhost:5000/。</a></p>
<ul>
<li>Scrapy是一个强大的爬虫框架，依赖的库比较多</li>
<li>Scrapy-Splash是一个Scrapy中支持JavaScript渲染的工具，这个还得安装docker,我当初跳入这个巨坑，至今仍心有余悸。之后还是找人帮我安装吧。</li>
</ul>
<p>还是无法相信，docker会轻轻松松安装好，慎重开始安装。</p>
<ol>
<li>还有一些在docker之后安装的，等用到再跳坑吧。</li>
</ol>
]]></content>
      <categories>
        <category>学习爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>初识 Pygame</title>
    <url>/2020/02/03/%E5%88%9D%E5%A7%8B-Pygame/</url>
    <content><![CDATA[<h4 id="打印文本"><a href="#打印文本" class="headerlink" title="打印文本"></a>打印文本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.locals <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">600</span>,<span class="number">500</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印文本</span></span><br><span class="line">myfont = pygame.font.Font(<span class="literal">None</span>,<span class="number">60</span>)</span><br><span class="line"><span class="comment"># 字体可以使用 Arial</span></span><br><span class="line">white = <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span></span><br><span class="line">blue = <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span></span><br><span class="line">textImage = myfont.render(<span class="string">"Hello Pygame"</span>, <span class="literal">True</span>, white)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制文本前，先清除屏幕，进行绘制，再刷新展示</span></span><br><span class="line">screen.fill(blue)</span><br><span class="line">screen.blit(textImage, (<span class="number">100</span>,<span class="number">100</span>))</span><br><span class="line">pygame.display.update()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于上面的代码运行了一次就停止了，机制没有办法获取任何用户输入。</span></span><br><span class="line"><span class="comment"># 我们需要一个循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type <span class="keyword">in</span> (QUIT, KEYDOWN):</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 其实下面的代码感觉没什么效果</span></span><br><span class="line">    screen.fill(blue)</span><br><span class="line">    screen.blit(textImage,(<span class="number">100</span>,<span class="number">100</span>))</span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure>
<h4 id="绘制园"><a href="#绘制园" class="headerlink" title="绘制园"></a>绘制园</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.locals <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">600</span>,<span class="number">500</span>))</span><br><span class="line">pygame.display.set_caption(<span class="string">"Drawing Circles"</span>)</span><br><span class="line"><span class="comment"># 取得跳出的框的名字</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type <span class="keyword">in</span> (QUIT, KEYDOWN):</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        screen.fill((<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 画一个圆</span></span><br><span class="line">        color = <span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span></span><br><span class="line">        position = <span class="number">300</span>,<span class="number">250</span></span><br><span class="line">        <span class="comment"># 相对于框的圆的位置</span></span><br><span class="line">        radius = <span class="number">100</span></span><br><span class="line">        width = <span class="number">10</span></span><br><span class="line">        <span class="comment"># 画圆的画笔的粗细</span></span><br><span class="line">        pygame.draw.circle(screen, color, position, radius, width)</span><br><span class="line"></span><br><span class="line">        pygame.display.update()</span><br></pre></td></tr></table></figure>
<h4 id="移动长方体"><a href="#移动长方体" class="headerlink" title="移动长方体"></a>移动长方体</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.locals <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">600</span>,<span class="number">500</span>))</span><br><span class="line">pygame.display.set_caption(<span class="string">"Drawing Rectangles"</span>)</span><br><span class="line"></span><br><span class="line">pos_x = <span class="number">300</span></span><br><span class="line">pos_y = <span class="number">250</span></span><br><span class="line">vel_x = <span class="number">2</span></span><br><span class="line">vel_y = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type <span class="keyword">in</span> (QUIT, KEYDOWN):</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        screen.fill((<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 移动这个长方体</span></span><br><span class="line">        color = <span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span></span><br><span class="line">        pos_x += vel_x</span><br><span class="line">        pos_y += vel_y</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保证这个长方体在屏幕内</span></span><br><span class="line">        <span class="keyword">if</span> pos_x &gt; <span class="number">500</span> <span class="keyword">or</span> pos_x &lt; <span class="number">0</span>:</span><br><span class="line">            vel_x = -vel_x</span><br><span class="line">        <span class="keyword">if</span> pos_y &gt; <span class="number">500</span> <span class="keyword">or</span> pos_y &lt; <span class="number">0</span>:</span><br><span class="line">            vel_y = -vel_y</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 画长方形</span></span><br><span class="line">        color = <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span></span><br><span class="line">        width = <span class="number">0</span> <span class="comment"># 填满</span></span><br><span class="line">        pos = pos_x, pos_y, <span class="number">100</span>, <span class="number">100</span></span><br><span class="line">        pygame.draw.rect(screen, color, pos, width)</span><br><span class="line"></span><br><span class="line">        pygame.display.update()</span><br></pre></td></tr></table></figure>
<h4 id="碰到边框颜色就变化的蹦跶小方格"><a href="#碰到边框颜色就变化的蹦跶小方格" class="headerlink" title="碰到边框颜色就变化的蹦跶小方格"></a>碰到边框颜色就变化的蹦跶小方格</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.locals <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">600</span>,<span class="number">500</span>))</span><br><span class="line">pygame.display.set_caption(<span class="string">"Drawing Rectangles"</span>)</span><br><span class="line"></span><br><span class="line">pos_x = <span class="number">300</span></span><br><span class="line">pos_y = <span class="number">250</span></span><br><span class="line">vel_x = <span class="number">2</span></span><br><span class="line">vel_y = <span class="number">1</span></span><br><span class="line">color = <span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type <span class="keyword">in</span> (QUIT, KEYDOWN):</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        screen.fill((<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 移动这个长方体</span></span><br><span class="line">        pos_x += vel_x</span><br><span class="line">        pos_y += vel_y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保证这个长方体在屏幕内</span></span><br><span class="line">        <span class="keyword">if</span> pos_x &gt; <span class="number">500</span> <span class="keyword">or</span> pos_x &lt; <span class="number">0</span>:</span><br><span class="line">            vel_x = -vel_x</span><br><span class="line">            a = random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">            b = random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">            c = random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">            color = a,b,c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pos_y &gt; <span class="number">400</span> <span class="keyword">or</span> pos_y &lt; <span class="number">0</span>:</span><br><span class="line">            vel_y = -vel_y</span><br><span class="line">            a = random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">            b = random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">            c = random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">            color = a,b,c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        width = <span class="number">0</span></span><br><span class="line">        pos = pos_x, pos_y, <span class="number">100</span>, <span class="number">100</span></span><br><span class="line">        pygame.draw.rect(screen, color, pos, width)</span><br><span class="line">        pygame.display.update()</span><br></pre></td></tr></table></figure>
<h4 id="画线"><a href="#画线" class="headerlink" title="画线"></a>画线</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.locals <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">600</span>,<span class="number">500</span>))</span><br><span class="line">pygame.display.set_caption(<span class="string">"Drawing Lines"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type <span class="keyword">in</span> (QUIT, KEYDOWN):</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        screen.fill((<span class="number">0</span>,<span class="number">80</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画线</span></span><br><span class="line">    color = <span class="number">100</span>, <span class="number">255</span>, <span class="number">200</span></span><br><span class="line">    width = <span class="number">8</span></span><br><span class="line">    pygame.draw.line(screen, color, (<span class="number">100</span>,<span class="number">100</span>),(<span class="number">500</span>,<span class="number">400</span>),width)</span><br><span class="line"></span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure>
<h5 id="五颜六色的线"><a href="#五颜六色的线" class="headerlink" title="五颜六色的线"></a>五颜六色的线</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.locals <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">600</span>,<span class="number">500</span>))</span><br><span class="line">pygame.display.set_caption(<span class="string">"Drawing Lines"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type <span class="keyword">in</span> (QUIT, KEYDOWN):</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        screen.fill((<span class="number">0</span>,<span class="number">80</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画线</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line"></span><br><span class="line">        a = random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">        b = random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">        c = random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">        <span class="comment">#color = 100,255,200</span></span><br><span class="line">        color = a,b,c</span><br><span class="line">        width = <span class="number">5</span></span><br><span class="line">        <span class="comment"># (x,y)</span></span><br><span class="line">        x1 = random.randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">        y1 = random.randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">        x2 = random.randint(<span class="number">0</span>,<span class="number">100</span>) + x1</span><br><span class="line">        y2 = random.randint(<span class="number">0</span>,<span class="number">100</span>) + y1</span><br><span class="line">        pygame.draw.line(screen, color, (x1,y1),(x2, y2),width)</span><br><span class="line"></span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure>
<h4 id="画弧线"><a href="#画弧线" class="headerlink" title="画弧线"></a>画弧线</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.locals <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">600</span>,<span class="number">500</span>))</span><br><span class="line">pygame.display.set_caption(<span class="string">"Drawing Arcs"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type <span class="keyword">in</span> (QUIT, KEYDOWN):</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        screen.fill((<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画半圆</span></span><br><span class="line">    color = <span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span></span><br><span class="line">    position = <span class="number">200</span>,<span class="number">150</span>,<span class="number">200</span>,<span class="number">200</span></span><br><span class="line">    start_angle = math.radians(<span class="number">0</span>)</span><br><span class="line">    end_angle = math.radians(<span class="number">180</span>)</span><br><span class="line">    width = <span class="number">8</span></span><br><span class="line">    pygame.draw.arc(screen, color, position, start_angle, end_angle, width)</span><br><span class="line"></span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>游戏编程</tag>
      </tags>
  </entry>
  <entry>
    <title>安装初试Basemap</title>
    <url>/2020/02/13/%E5%AE%89%E8%A3%85%E5%88%9D%E8%AF%95Basemap/</url>
    <content><![CDATA[<h3 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h3><p>因为特别想试一下公众号中提及的地图的可视化，觉得地图可视化真炫酷。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>摆脱不了的安装，公众号里说，basemap是基于matplotlib开发的。</p>
<p>首先<code>pip install matlotlib</code></p>
<p>接着我去搜了搜如何安装 basemap，具体分为三步。</p>
<ol>
<li>安装geos，还是<code>pip install geos</code>。</li>
<li><p>下载两个.whl文件。<strong>要与自己的Python版本匹配</strong>，<a href="https://blog.csdn.net/weixin_42473844/article/details/100172288" target="_blank" rel="noopener">安装指导网址</a></p>
</li>
<li><p>在安装目录下pip两个.whl文件。主线，先是pyproj文件。</p>
</li>
</ol>
<h3 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h3><p>刚开始就是抄别人的代码（抄公众号代码）</p>
<h4 id="显示世界地图"><a href="#显示世界地图" class="headerlink" title="显示世界地图"></a>显示世界地图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.basemap <span class="keyword">import</span> Basemap</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line">map = Basemap()</span><br><span class="line"></span><br><span class="line">map.drawcoastlines()</span><br><span class="line">plt.show()</span><br><span class="line">plt.savefig(<span class="string">'map.png'</span>)</span><br><span class="line"><span class="comment"># 但照片上啥也没有</span></span><br></pre></td></tr></table></figure>
<p><img src="map1.PNG" alt="map"></p>
<h4 id="显示球形地图"><a href="#显示球形地图" class="headerlink" title="显示球形地图"></a>显示球形地图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.basemap <span class="keyword">import</span> Basemap</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line">map = Basemap(projection=<span class="string">'ortho'</span>, lat_0=<span class="number">0</span>,lon_0=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给地球涂上蓝色</span></span><br><span class="line">map.drawmapboundary(fill_color=<span class="string">'aqua'</span>)</span><br><span class="line"><span class="comment"># 给国家涂上大地的颜色</span></span><br><span class="line">map.fillcontinents(color=<span class="string">'coral'</span>,lake_color=<span class="string">'aqua'</span>)</span><br><span class="line">map.drawcoastlines()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="map2.PNG" alt="map"></p>
<p>意外找到了basemap的文档，哈哈哈，非常好。<br><a href="https://matplotlib.org/basemap/users/geography.html" target="_blank" rel="noopener">文档</a></p>
<p>但是文档中这个例子还是比较鸡肋，找来CSDN中高访问量的操作：<br><a href="https://blog.csdn.net/ouening/article/details/55227364" target="_blank" rel="noopener">Basemap绘制中国地图</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统概述</title>
    <url>/2020/02/11/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1/</url>
    <content><![CDATA[<h3 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a>操作系统的概念</h3><p><img src="step.PNG" alt="操作系统"><br>操作系统(Operating System, OS)是指控制和<strong>管理</strong>整个计算机系统的<strong>硬件和软件</strong>资源，并合理地组织和调度计算机的工作和资源的分配：以<strong>提供给用户和其他软件方便的接口和环境</strong>：它是计算机系统中最基本的<strong>系统软件</strong>。</p>
<h4 id="操作系统是系统资源的管理者。"><a href="#操作系统是系统资源的管理者。" class="headerlink" title="操作系统是系统资源的管理者。"></a>操作系统是系统资源的管理者。</h4><p><img src="c1.PNG" alt="作为系统的管理者"></p>
<h4 id="向上层提供方便易用的服务。"><a href="#向上层提供方便易用的服务。" class="headerlink" title="向上层提供方便易用的服务。"></a>向上层提供方便易用的服务。</h4><p>封装思想：操作系统把一些丑陋的硬件功能封装成简单易用的服务，使用户能更方便地使用计算机，用户无需关心底层硬件的原理，只需要对操作系统发出命令即可。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">服务</th>
<th style="text-align:center">解释</th>
<th style="text-align:center">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">GUI 图形化用户接口(Graphical User Interface)</td>
<td style="text-align:center">用户可以使用形象的图形界面进行操作，而不再需要记忆复杂的命令、参数</td>
<td style="text-align:center">在Windows操作系统中，删除一个文件只需要把文件“拖拽”到回收站即可</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>早期通过命令接口进行交互，命令接口分为两种。<br><strong>联机命令接口</strong> = <strong>交互式</strong>命令接口<br>例子(Windows系统)：win键+R；输入cmd,回车进入命令解释器；输入命令<br><strong>脱机命令接口</strong> = <strong>批处理</strong>命令接口<br>例子：搜索C盘中的*.bat文件，打开<br><img src="命令.PNG" alt="命令"><br>把一系列的命令罗列，根据文件中的命令一条条执行（相当于用户一次提出一堆的请求，系统跟着做一堆。）</li>
</ul>
<p><strong>程序接口</strong> ：可以在程序中进行<strong>系统调用</strong>来使用程序接口。普通用户不能直接使用程序接口，只能通过程序代码<strong>间接</strong>使用。</p>
<p>系统调用类似于函数调用，是应用程序请求操作系统服务的唯一方式。</p>
<p><img src="c2.PNG" alt="图示"></p>
<h4 id="最接近硬件的一层软件。"><a href="#最接近硬件的一层软件。" class="headerlink" title="最接近硬件的一层软件。"></a>最接近硬件的一层软件。</h4><ol>
<li>实现<strong>对硬件机器的拓展</strong>。</li>
<li>没有任何软件支持的计算机称为<strong>裸机</strong>。</li>
<li>通常把覆盖了软件的机器称为<strong>扩充机器</strong>，又称之<strong>虚拟机</strong>。<br>（Ctrl+Alt+Del）打开电脑任务管理器。</li>
</ol>
<p>补充知识：执行一个程序前<strong>需要将该程序放在内存中</strong>，才能被CPU处理。</p>
<h3 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h3><p>操作系统的四大特征是：<strong>并发</strong>，<strong>共享</strong>，<strong>虚拟</strong>，<strong>异步</strong>。其中<strong>并发</strong>和<strong>共享</strong>是两大最基本的特征，二者互为存在条件。</p>
<h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p><strong>并发</strong>：指两个或多个事件在同一时间间隔内发生。这些事件<strong>宏观上是同时发生</strong>的，但是<strong>微观上是交替发生的</strong>。<br><strong>并行</strong>：指两个或多个事件在同一时刻同时发生。</p>
<p><strong>操作系统的并发性</strong>指计算机系统中“同时”运行着多个程序，这些程序宏观上看是同时运行着的，而微观上看是交替运行的。</p>
<h5 id="重要考点"><a href="#重要考点" class="headerlink" title="重要考点"></a>重要考点</h5><p><strong>单核CPU</strong>同一时刻只能执行<strong>一个程序</strong>，各个程序只能<strong>并发</strong>地执行<br><strong>多核CPU</strong>同一时刻可以同时执行<strong>多个程序</strong>，多个程序可以<strong>并行</strong>地执行</p>
<h4 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h4><p>两种资源共享方式：<strong>互斥共享方式</strong>、<strong>同时共享方式</strong>。<br><strong>互斥共享方式</strong>：系统中的某些资源，虽然可以提供给多个进程使用，但<strong>一个时间段内只允许一个进程访问该资源</strong>。<br><strong>同时共享方式</strong>：系统中的某些资源，<strong>允许一个时间段内有多个进程“同时”对它们进行访问</strong>。</p>
<ul>
<li><strong>并发性</strong>指计算机系统中同时存在着多个运行着的程序。</li>
<li><strong>共享性</strong>指系统中的资源可供内存中多个并发执行的进程共同使用。</li>
</ul>
<h4 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h4><p><strong>虚拟</strong>是指一个物理上的实体变为若干个逻辑上的对应物。物理实体（前者）是实际存在的，二逻辑上对应物（后者）是用户感受到的。<br><strong>虚拟技术</strong>分为<strong>空分复用技术（如虚拟存储器技术）</strong>和<strong>时分复用技术（如虚拟处理器）</strong>。<br>显然，如果失去了并发性，则一个时间段内系统中只需运行一到程序，那么就失去了实现虚拟性的意义。因此<strong>没有并发性，就谈不上虚拟性</strong>。</p>
<h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p><strong>异步</strong>是指，再多道程序环境下，循序多个程序并发执行，但是由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。</p>
<h3 id="OS的发展与分类"><a href="#OS的发展与分类" class="headerlink" title="OS的发展与分类"></a>OS的发展与分类</h3><p><img src="OS的发展与分类.png" alt="OS的发展与分类"></p>
<p>要重点关注和理解各操作系统主要想解决的是什么问题，各自的优缺点。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">发展阶段</th>
<th style="text-align:center">主要想解决的问题</th>
<th style="text-align:center">主要优点</th>
<th style="text-align:center">主要缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">手工操作阶段</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">用户独占全机，人机速度矛盾导致资源利用率极低。</td>
</tr>
<tr>
<td style="text-align:center">单道批处理系统</td>
<td style="text-align:center">机器计算速度快，但是利用率不高</td>
<td style="text-align:center">缓解了一定程度的人机速度矛盾，资源利用率有所提升</td>
<td style="text-align:center">内存中仅能有一道程序运行，只有该程序运行结束之后才能调入下一道程序。CPU有大量的时间是在空闲等待I/O完成。资源利用率依然很低。</td>
</tr>
<tr>
<td style="text-align:center">多道批处理系统</td>
<td style="text-align:center">提高资源利用率</td>
<td style="text-align:center">多道程序并发执行，共享计算机资源。资源利用率大幅提升，CPU和其他资源更能保持“忙碌”状态，系统吞吐量增大</td>
<td style="text-align:center">用户相应时间长，没有人机交互功能</td>
</tr>
<tr>
<td style="text-align:center">分时操作系统</td>
<td style="text-align:center">解决用户无法操作系统</td>
<td style="text-align:center">用户请求可以被及时响应，解决了人机交互问题</td>
<td style="text-align:center">不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的，循环地为每个作业服务一个时间片，不区分任务紧急性。</td>
</tr>
<tr>
<td style="text-align:center">实时操作系统</td>
<td style="text-align:center">让计算机优先处理紧急任务</td>
<td style="text-align:center">能够优先响应一些紧急任务，某些紧急任务不需时间片排队。</td>
</tr>
</tbody>
</table>
</div>
<h4 id="单道批处理系统"><a href="#单道批处理系统" class="headerlink" title="单道批处理系统"></a>单道批处理系统</h4><p>引入<strong>脱机输入/输出技术</strong>，并由<strong>监督程序</strong>负责控制作业的输入、输出。</p>
<h4 id="多道批处理系统"><a href="#多道批处理系统" class="headerlink" title="多道批处理系统"></a>多道批处理系统</h4><p>每次网内存中读入多道程序。<br>操作系统正式诞生，用于支持多道程序并发运行。</p>
<h4 id="分时操作系统法"><a href="#分时操作系统法" class="headerlink" title="分时操作系统法"></a>分时操作系统法</h4><p>计算机以<strong>时间片</strong>为单位<strong>轮流为各个用户/作业服务</strong>，各用户可通过终端与计算机进行交互。</p>
<h4 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h4><p>在实时操作系统的控制下，计算机系统接收到外部信号后及时进行处理，并且<strong>要在严格的时限内处理外事件</strong>。实时操作系统的主要特点是<strong>及时性和可靠性</strong>。<br><img src="实时.PNG" alt="实时操作系统"></p>
<h4 id="网络操作系统"><a href="#网络操作系统" class="headerlink" title="网络操作系统"></a>网络操作系统</h4><p>伴随计算机网络的发展而诞生，能把网络中各个计算机有机地结合起来，实现数据传送等功能，<strong>实现网络中各种资源的共享（如文件共享）和各台计算机之间的通信</strong>。</p>
<h4 id="分布式操作系统"><a href="#分布式操作系统" class="headerlink" title="分布式操作系统"></a>分布式操作系统</h4><p>主要特点是<strong>分布性和并行性</strong>。系统中的各台计算机地位相同，<strong>任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务</strong>。</p>
<h3 id="操作系统的运行机制"><a href="#操作系统的运行机制" class="headerlink" title="操作系统的运行机制"></a>操作系统的运行机制</h3><h4 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h4><p>“指令”指处理器（CPU）能识别、执行的最基本的命令。</p>
<p>应用程序VS内核程序<br>CPU有两种状态，“内核态”和“用户态”<br>处于内核态时，说明此时正在<strong>运行的是内核程序</strong>，此时<strong>可以执行特权指令</strong><br>处于用户态时，说明此时正在运行的是<strong>应用程序</strong>，此时<strong>只能执行非特权指令</strong></p>
<p>CPU中有一个寄存器<strong>程序状态字寄存器(PSW)</strong>，其中有个二进制位，1表示“内核态”，0表示“用户态”。</p>
<p>内核态=核心态=管态；用户态=目态</p>
<h4 id="内核态、用户态的切换"><a href="#内核态、用户态的切换" class="headerlink" title="内核态、用户态的切换"></a>内核态、用户态的切换</h4><p><strong>内核态-&gt;用户态</strong>：执行一条<strong>特权指令</strong>——<strong>修改PSW</strong>的标志位为“用户态”，这个动作意味着操作系统将主动让出CPU使用权。<br><strong>用户态-&gt;内核态</strong>：由“<strong>中断</strong>”引发，<strong>硬件自动完成变态过程</strong>，出发中断信号意味着操作系统将强行夺回CPU的使用权。<br>除了非法使用特权指令之外，还有很多事件会触发中断信号。一个共性是，<strong>但凡需要操作系统接入的地方，都会触发中断信号。</strong></p>
<p><img src="操作系统的运行机制.png" alt="操作系统的运行机制"></p>
<h3 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h3><p><img src="中断和异常.png" alt="中断和异常"></p>
<h4 id="中断的作用"><a href="#中断的作用" class="headerlink" title="中断的作用"></a>中断的作用</h4><p>“中断”会使CPU由用户态变为内核态，使操作系统重新夺回对CPU的控制权。<br>CPU上会运行两种程序，一种是<strong>操作系统内核程序</strong>(整个系统的管理者)，一种是<strong>应用程序</strong></p>
<h4 id="中断的类型"><a href="#中断的类型" class="headerlink" title="中断的类型"></a>中断的类型</h4><ul>
<li><p>内中断：与当前执行的指令<strong>有关</strong>，中断信号来源于CPU<strong>内部</strong>。</p>
</li>
<li><p>外中断：与当前执行的指令<strong>无关</strong>，中断信号来源于CPU<strong>外部</strong>。</p>
</li>
</ul>
<ol>
<li>时钟中断，时钟部件每个一个时间片会给CPU发送一个时钟中断信号。</li>
<li>I/O中断，由输入/输出设备发出的中断信号</li>
</ol>
<h4 id="中断机制的基本原理"><a href="#中断机制的基本原理" class="headerlink" title="中断机制的基本原理"></a>中断机制的基本原理</h4><p><strong>不同的中断信号，需要用不同的中断处理程序来处理</strong>。当CPU检测到中断信号后，会根据中断信号的类型去查询“<strong>中断向量表</strong>”，以此来找到相应的中断处理程序在内存中的存放位置。</p>
<p>中断处理程序一定是内核程序，需要运行在“内核态”。</p>
<h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><h4 id="什么是系统调用"><a href="#什么是系统调用" class="headerlink" title="什么是系统调用"></a>什么是系统调用</h4><p>操作系统作为用户和计算机硬件之间的借口，需要向上提供一些简单易用的服务。主要包括命令接口和程序接口。其中程序接口由一组<strong>系统调用</strong>组成。</p>
<p><strong>应用程序可以通过系统调用来请求获得操作系统内核的服务。</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">普通应用程序</th>
<th style="text-align:center">可直接进行系统调用，也可使用库函数。有的库函数涉及系统调用，有的不涉及</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">编程语言</td>
<td style="text-align:center">向上提供库函数。有时会将系统调用封装成库函数，以隐藏系统调用的一些细节，使程序员编程更加方便。</td>
</tr>
<tr>
<td style="text-align:center">操作系统</td>
<td style="text-align:center">向上提供系统调用，使上层程序能请求内核的服务。</td>
</tr>
</tbody>
</table>
</div>
<h4 id="什么功能要用到系统调用"><a href="#什么功能要用到系统调用" class="headerlink" title="什么功能要用到系统调用"></a>什么功能要用到系统调用</h4><p><img src="系统调用.PNG" alt="系统调用"></p>
<p>应用程序通过<strong>系统调用</strong>请求操作系统的服务。而系统中的各种共享资源都是由操作系统内核统一掌管，因此<strong>凡是与共享资源有关的操作（如存储分配、I/O操作、文件管理等），都必须通过系统调用的方式向操作系统内核提出服务请求</strong>，由操作系统内核代为完成。这样<strong>可以保证系统的稳定性和安全性</strong>，放置用户进行非法操作。</p>
<h5 id="系统调用过程"><a href="#系统调用过程" class="headerlink" title="系统调用过程"></a>系统调用过程</h5><p><img src="调用过程.PNG" alt="调用过程"></p>
<p>传递系统调用参数 -&gt; 执行陷入指令（<strong>用户态</strong>） -&gt; 执行响应内请求核程序处理系统调用（<strong>核心态</strong>）-&gt; 返回执行应用程序</p>
<p>注意：</p>
<ol>
<li><p><strong>陷入指令</strong>是在<strong>用户态</strong>执行的，执行陷入指令之后立刻引发一个<strong>内中断</strong>，使CPU<strong>进入核心态</strong>。</p>
</li>
<li><p><strong>发出系统调用请求</strong>是在<strong>用户态</strong>，而<strong>对系统调用的相应处理</strong>在<strong>核心态</strong>下进行。</p>
</li>
</ol>
<p>陷入指令 = trap指令 = 访管指令<br><img src="系统调用小结.png" alt="系统调用小结"></p>
<h3 id="操作系统的体系结构"><a href="#操作系统的体系结构" class="headerlink" title="操作系统的体系结构"></a>操作系统的体系结构</h3><p><img src="操作系统内核.PNG" alt="操作系统内核"></p>
<ul>
<li>原语是一种特殊的程序，具有原子性。也就是说，这段程序的运行必须一气呵成，不可被“中断”。</li>
</ul>
<p><strong>内核</strong>是操作系统最基本、最核心的部分。<br>实现操作系统内核功能的那些程序就是<strong>内核程序</strong>。<br><img src="操作系统内核2.PNG" alt="操作系统内核2"><br><img src="内核.PNG" alt="内核"></p>
<p>注意：<br>操作系统<strong>内核</strong>需要运行在<strong>内核态</strong><br>操作系统的<strong>非内核</strong>功能运行在<strong>用户态</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">解释</th>
<th style="text-align:center">优点</th>
<th style="text-align:center">缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">大内核</td>
<td style="text-align:center">将操作系统的主要功能模块都作为系统内核，运行在核心态</td>
<td style="text-align:center">高性能</td>
<td style="text-align:center">内核代码庞大，结构混乱，难以维护</td>
</tr>
<tr>
<td style="text-align:center">微内核</td>
<td style="text-align:center">只把最基本的功能保留在内核</td>
<td style="text-align:center">内核功能少，结构清晰，方便维护</td>
<td style="text-align:center">需要频繁地在核心态和用户台之间切换，性能低</td>
</tr>
</tbody>
</table>
</div>
<p>典型的大内核/宏内核/单内核 操作系统：Linux、UNIX<br>典型的微内核操作系统：Windows NT</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>专业课</tag>
      </tags>
  </entry>
  <entry>
    <title>显示日历</title>
    <url>/2020/01/30/%E6%98%BE%E7%A4%BA%E6%97%A5%E5%8E%86/</url>
    <content><![CDATA[
<head>
    <meta charset="utf-8">
    <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
    <meta http-equiv="x-ua-compatible" content="IE=edge, chrome=1">
    <meta http-equiv="X-UA-Compatible" content="IE=9; IE=8;">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet' type='text/css'>
    <title>jQuery事件日历插件Calendar</title>
    <link rel="stylesheet" href="https://raw.githack.com/1260408088/static/master/calendar.css">
    <style type="text/css">
        ul, ol, li {
            list-style: none;
            padding: 0;
            margin: 0;
        }
		#demo {
			width: 200px;
			margin: 0px auto;
	}
    </style>
<link rel="alternate" href="/atom.xml" title="Suria_Blog" type="application/atom+xml">
</head>
<body>
<div id="demo">
    <div id="ca" style="position: absolute">
    </div>
</div>
<script src="https://raw.githack.com/1260408088/static/master/jquery.js"></script>
<script src="https://raw.githack.com/1260408088/static/master/calendar.js"></script>
<script>
    $(function () {
        head = "https://1260408088.github.io";
		transtime=300; // dong
    });
    $('#ca').calendar({
        width: 200,
        height: 200,
        onSelected: function (view, date, data) {   // 点击事件
            if (view == "month") {
                let fullYear = date.getFullYear();
                monthTag(fullYear, date.getMonth() + 1);
            } else {
                let year = date.getFullYear();
                let month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
                let day = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
                var fulltime = year + "-" + month + "-" + day;
                var keytime = year + "-" + (date.getMonth() + 1);
                let mycalendarElement = mycalendar[keytime];
                $(".toast").hide(transtime);
                $("#toast a").remove();
                $("#toast br").remove();
                for (var i = 0; i < mycalendarElement.length; i++) {
                    let ordertime = mycalendarElement[i]["date"].substring(0, 10);
                    if (fulltime == ordertime) {
                        console.log(fulltime)
                        console.log(ordertime)
                        $(".toast").show("transtime");
                        var title = mycalendarElement[i]["title"];
                        var link = head + mycalendarElement[i]["link"];
                        $("#toast").append('<a style="text-decoration:none;border-bottom-color:#fff;font-family:等线 Light;color: #fff;font-size: 13px;"' + 'href="' + link + '">' + '<marquee scrollamount=5 onMouseOut="this.start()" onMouseOver="this.stop()">' + title + '</marquee></a><br/>');

                        console.log(mycalendarElement[i]["link"]);
                    }
                }
            }
            /*console.log('view:' + view);
            alert('date:' + date);
            console.log('data:' + (data || 'None'));*/
        }
    });

    function resolveyear() { // 准备数据
        var currentyear = getCurrentyear();
        var currentmonth = getCurrentmonth();
        console.log(currentyear, currentmonth);
        gblmonth = currentmonth;
        if (currentmonth == 13) { // 首次加载，需要延时
            setCurrentmonth(1); // 首次以后不延时直接执行
            setTimeout(function () {
                $("#ca").append('<div id="toast" class="toast"></div>');
                $(".toast").hide("transtime");
                if (mycalendar) {
                    monthTag(currentyear);
                } else {
                    alert("网络有问题的，云日历功能不能使用....");
                }
            }, 2000);
        } else {
            monthTag(currentyear, null);
        }
    }

    // 对月份进行设置，json文件中存在的才显示
    function monthTag(currentyear, date) {
        removeHaveClass();
        // debugger;
        var flag = true;
        var mycalValue = new Array()
        for (let i = 1; i <= 12; i++) {
            if (mycalendar[currentyear + "-" + i]) {
                console.log("这才是当前的页" + mycalendar[currentyear + "-" + i]);
                console.log(i);
                addHaveClass(i);
                // 此处对当前月份下的日子进行匹配
                if (date) {
                    var month = date;
                } else {
                    var currentData = new Date();
                    var month = currentData.getMonth() + 1;
                }

                if (flag) { // 只在内部循环一次，当前页的数据后就不再管了
                    flag = false;
                    if (mycalendar[currentyear + "-" + month]) {
                        for (var j = 0; j < mycalendar[currentyear + "-" + month].length; j++) {
                            var pagedata = mycalendar[currentyear + "-" + month][j];
                            var needdate = pagedata["date"].substring(8, 10);
                            if (needdate < 10) {
                                needdate = needdate.replace(0, "");
                            }
                            mycalValue[j] = needdate; // 存到一个数组中备用
                            console.log(needdate);
                        }
                    }
                }
            }
        }
        resolveday(month, mycalValue, currentyear);
    }

    // 对月份下的日期进行渲染
    function resolveday(month, mycalValue, currentyear) {
        $(".toast").hide("transtime");
        console.log("mycal------------" + mycalValue);
        var precurrentyear=currentyear;
        var nextcurrentyear=currentyear;
        let attr = $("#cal" + month).children("li");
        var preMonth = month - 1 > 0 ? month - 1 : 12;
        var nextMonth = month + 1 > 12 ? 1 : month + 1;
        if (preMonth==12) {
            precurrentyear = currentyear - 1;
        }
        if(nextMonth==1){
            nextcurrentyear = currentyear + 1;
        }
        // if (preMonth != 1 && nextMonth != 1) { // 没有年份的跳跃
            var prevalue =judgeMonth(precurrentyear,preMonth); // 前一个月存在的数据
            var nextvalue =judgeMonth(nextcurrentyear,nextMonth); // 后一个月存在的数据
            jQuery.each(attr, function () {
                let emptclass = jQuery(this).attr("class");
                console.log(emptclass);
                if (emptclass) {
                    if(emptclass=="old"){ // 前一个月的数据
                     var dayVal = jQuery(this).text();
                     if (prevalue.indexOf(dayVal) > -1) { // 存在于数组之中,给当天的日期加一个样式
                         jQuery(this).css("color","#FF808E");
                     }
                 } else if(emptclass=="new"){
                    var dayVal = jQuery(this).text();
                    if (nextvalue.indexOf(dayVal) > -1) { // 存在于数组之中,给当天的日期加一个样式
                        jQuery(this).css("color","#FF808E");
                    }
                 }
                }else {
                    var dayVal = jQuery(this).text();
                    if (mycalValue.indexOf(dayVal) > -1) { // 存在于数组之中,给当天的日期加一个样式
                        jQuery(this).css("color","#FF808E");
                    }
                }
            });
        // }
    }
    
    function judgeMonth(currentyear,month) { // 解析当前年份与月份中存在的文章
        console.log("为什么不出现:"+currentyear+"----------"+month);
        var Value = new Array();
        if (mycalendar[currentyear + "-" + month]) {
            for (var j = 0; j < mycalendar[currentyear + "-" + month].length; j++) {
                var pagedata = mycalendar[currentyear + "-" + month][j];
                var needdate = pagedata["date"].substring(8, 10);
                if (needdate < 10) {
                    needdate = needdate.replace(0, "");
                }
                Value[j] = needdate; // 存到一个数组中备用
            }
        }
        console.log("judgeMonth:"+Value);
        return Value;
    }
    
    // 相对当前月份的上一月与下一月判断解析
    function nextMonth() {
        $(".toast").hide("transtime");
        monthTag(getCurrentyear(), getCurrentmonth());
    }

    function preMonth() {
        $(".toast").hide(transtime);
        monthTag(getCurrentyear(), getCurrentmonth());
    }

    function retuenday() {
        if (mycalendar) {
            monthTag(getCurrentyear(), getCurrentmonth());
        }
    }
</script>
</body>

]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>添加卡通人物（失败）</title>
    <url>/2020/01/28/%E6%B7%BB%E5%8A%A0%E5%8D%A1%E9%80%9A%E4%BA%BA%E7%89%A9/</url>
    <content><![CDATA[<h4 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h4><p>算了，我放弃，内容大于样式。</p>
<p>总之，我搞了两天都没搞出来，以后如果技术水平过关了，可以自己做个插件。（目前还是太弱。）</p>
<h4 id="可供参考的插件模型"><a href="#可供参考的插件模型" class="headerlink" title="可供参考的插件模型"></a>可供参考的插件模型</h4><p><a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">Live 2D</a></p>
<h5 id="我在自己网站里只挑那些好看-我觉得好看-的展示"><a href="#我在自己网站里只挑那些好看-我觉得好看-的展示" class="headerlink" title="我在自己网站里只挑那些好看(我觉得好看)的展示"></a>我在自己网站里只挑那些好看(我觉得好看)的展示</h5><hr>
<p>Epsilon2.1<br><img src="Epsilon2.1.gif" alt="Epsilon2.1"></p>
<hr>
<p>miku<br><img src="miku.gif" alt="miku"></p>
<hr>
<p>ni-j<br><img src="ni-j.gif" alt="ni-j"></p>
<hr>
<p>nico<br><img src="nico.gif" alt="nico"></p>
<hr>
<p>nito<br><img src="nito.gif" alt="nito"></p>
<hr>
<p>shizuku<br><img src="shizuku.gif" alt="shizuku"></p>
<hr>
<p>wanko<br><img src="wanko.gif" alt="wanko"></p>
<hr>
<p>z16<br><img src="z16.gif" alt="z16"></p>
<hr>
<p>koharu<br><img src="koharu.gif" alt="koharu"></p>
<hr>
<p>haruto<br><img src="haruto.gif" alt="haruto"></p>
<hr>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>练习网站</title>
    <url>/2020/02/11/%E7%BB%83%E4%B9%A0%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p><a href="learngitbranching.js.org">练习git</a></p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><a href="https://regexone.com/" target="_blank" rel="noopener">RegexOne</a><br><img src="疑问.PNG" alt="Lesson11"></p>
<h3 id="练习SQL网站"><a href="#练习SQL网站" class="headerlink" title="练习SQL网站"></a>练习SQL网站</h3><p><a href="https://sqlzoo.net/" target="_blank" rel="noopener">SQLZOO</a></p>
]]></content>
      <categories>
        <category>编程练习</category>
      </categories>
      <tags>
        <tag>编程练习</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫基础</title>
    <url>/2020/02/10/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="HTTP基本原理"><a href="#HTTP基本原理" class="headerlink" title="HTTP基本原理"></a>HTTP基本原理</h3><h4 id="URL和URI"><a href="#URL和URI" class="headerlink" title="URL和URI"></a>URL和URI</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">缩写</th>
<th style="text-align:center">全称</th>
<th style="text-align:center">中文名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">URI</td>
<td style="text-align:center">Uniform Resource Identifier</td>
<td style="text-align:center">统一资源标志符</td>
</tr>
<tr>
<td style="text-align:center">URL</td>
<td style="text-align:center">Uniform Resource Locator</td>
<td style="text-align:center">统一资源定位符</td>
</tr>
<tr>
<td style="text-align:center">URN</td>
<td style="text-align:center">Uniform Resource Name</td>
<td style="text-align:center">统一资源名称</td>
</tr>
</tbody>
</table>
</div>
<p>URI包含URL和URN。</p>
<h4 id="超文本-hypertext"><a href="#超文本-hypertext" class="headerlink" title="超文本(hypertext)"></a>超文本(hypertext)</h4><p>在浏览器中看到的网页就是超文本解析而成的，网页源代码是一系列HTML代码，可以称其为超文本。</p>
<h4 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h4><p>HTTPS的全称是Hyper Text Transfer Protocal over Secure Socket Layer，是以安全为目标的HTTP通道，简单来说既是HTTP的安全版，即HTTP下加入SSL层，简称为HTTPS。</p>
<p>HTTPS的安全基础是SSL，因此通过它传输的内容都是经过SSL加密的，它的主要作用可以分为两种：</p>
<ol>
<li>建立一个信息安全通道来保证数据传输的安全。</li>
<li>确认网站的真实性，凡是使用了HTTPS的网站，都可以通过点击浏览器地址栏的锁头标志查看网站认证之后的真实信息，也可以通过CA机构办法的安全签章来查询。</li>
</ol>
<h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><p>有客户端向服务器发出，分为4部分内容：请求方法(Request Method)，请求网址(Request URL)，请求头(Request Headers)，请求体(Request Body)。</p>
<h5 id="Request-Method"><a href="#Request-Method" class="headerlink" title="Request Method"></a>Request Method</h5><p>常见请求方法：GET和POST。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">请求方法</th>
<th style="text-align:center">参数传递</th>
<th style="text-align:center">数据量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">GET</td>
<td style="text-align:center">包含在URL中</td>
<td style="text-align:center">&lt;=1024字节</td>
</tr>
<tr>
<td style="text-align:center">POST</td>
<td style="text-align:center">通过表单形式传输</td>
<td style="text-align:center">没有限制</td>
</tr>
</tbody>
</table>
</div>
<h5 id="Request-URL"><a href="#Request-URL" class="headerlink" title="Request URL"></a>Request URL</h5><p>请求的网址，即统一资源定位符URL。</p>
<h5 id="Request-Headers"><a href="#Request-Headers" class="headerlink" title="Request Headers"></a>Request Headers</h5><p>请求头，用来说明服务器要使用的附加信息，比较重要的信息有Cookie、Referer、User-Agent等。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accept</td>
<td style="text-align:center">请求报头域，用来指定客户端可接受哪种类型的信息</td>
</tr>
<tr>
<td style="text-align:center">Accept-Language</td>
<td style="text-align:center">指定客户端可接受的语言类型</td>
</tr>
<tr>
<td style="text-align:center">Accept-Encoding</td>
<td style="text-align:center">指定客户端可接受的内容编码</td>
</tr>
<tr>
<td style="text-align:center">Host</td>
<td style="text-align:center">用来指定请求资源的主机IP和端口号，其内容为请求URL的原始服务器或网关的位置</td>
</tr>
<tr>
<td style="text-align:center">Cookie/Cookies</td>
<td style="text-align:center">这是网站为了辨别用户进行会话跟踪而储存在用户本地的数据</td>
</tr>
<tr>
<td style="text-align:center">Referer</td>
<td style="text-align:center">用来表示请求是从哪个页面发过来的，服务器可以拿到这一信息并做相应处理，如做来源统计</td>
</tr>
<tr>
<td style="text-align:center">User-Agent(UA)</td>
<td style="text-align:center">使服务器识别客户使用的操作系统及版本、浏览器及版本等信息。做爬虫时可以加上此信息，伪装为浏览器。</td>
</tr>
<tr>
<td style="text-align:center">Content-Type(互联网媒体类型 Internet Media Type 或者 MIME类型)</td>
<td style="text-align:center">在HTTP协议消息头中，它用来表示具体请求中的媒体类型信息。</td>
</tr>
</tbody>
</table>
</div>
<p>请求头是请求的重要组成部分，在写爬虫时，大部分情况都需要设定请求头。</p>
<h4 id="Request-Body"><a href="#Request-Body" class="headerlink" title="Request Body"></a>Request Body</h4><p>请求体一般承载的内容是POST请求中的表单数据，面对于GET请求，请求体为空。</p>
<p>Content-Type和POST提交数据方式的关系</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Content-Type</th>
<th style="text-align:center">提交数据的方式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">application/x-www-form-urlencoded</td>
<td style="text-align:center">表单数据</td>
</tr>
<tr>
<td style="text-align:center">multipart/form-data</td>
<td style="text-align:center">表单文件上传</td>
</tr>
<tr>
<td style="text-align:center">application/json</td>
<td style="text-align:center">序列化JSON数据</td>
</tr>
<tr>
<td style="text-align:center">text/xml</td>
<td style="text-align:center">XML数据</td>
</tr>
</tbody>
</table>
</div>
<p>在爬虫中，如果要构造POST请求，需要使用正确的Content-Type，并了解各个请求库的各个参数设置时使用的是哪种Content-Type，不然可能会导致POST提交后无法正常响应。</p>
<h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><p>响应，由服务端返回给客户端，可以分为三部分：响应状态码(Response Status Code)、响应头(Response Header)和响应体(Response Body)</p>
<h5 id="Response-Status-Code"><a href="#Response-Status-Code" class="headerlink" title="Response Status Code"></a>Response Status Code</h5><p>响应状态码表示服务器的响应状态。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">响应状态码</th>
<th style="text-align:center">响应状态</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">200</td>
<td style="text-align:center">正常响应</td>
</tr>
<tr>
<td style="text-align:center">404</td>
<td style="text-align:center">页面未找到</td>
</tr>
<tr>
<td style="text-align:center">500</td>
<td style="text-align:center">服务器内部发生错误</td>
</tr>
</tbody>
</table>
</div>
<h5 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h5><p>响应头包含了服务器对请求的应答信息。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">头信息</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Date</td>
<td style="text-align:center">表示响应产生的时间</td>
</tr>
<tr>
<td style="text-align:center">Last-Modified</td>
<td style="text-align:center">指定资源的最后修改时间</td>
</tr>
<tr>
<td style="text-align:center">Content-Encoding</td>
<td style="text-align:center">制定相应内容的编码</td>
</tr>
<tr>
<td style="text-align:center">Server</td>
<td style="text-align:center">包含服务器的信息，比如名称、版本号</td>
</tr>
<tr>
<td style="text-align:center">Content-Type</td>
<td style="text-align:center">文档类型，指定返回的数据类型</td>
</tr>
<tr>
<td style="text-align:center">Set-Cookie</td>
<td style="text-align:center">设置Cookies</td>
</tr>
<tr>
<td style="text-align:center">Expires</td>
<td style="text-align:center">指定响应的过期时间</td>
</tr>
</tbody>
</table>
</div>
<h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><p>响应的正文数据都在响应体中，比如请求网页时，它的响应体是网页的HTML代码；请求一张图片时，它的响应体就是图片的二进制数据。</p>
<h3 id="网页基础知识"><a href="#网页基础知识" class="headerlink" title="网页基础知识"></a>网页基础知识</h3><p>网页三大组成：HTML、JavaScript、CSS。</p>
<p>HTML是骨架，JavaScipt是肌肉，CSS是皮肤。</p>
<h3 id="爬虫基本原理"><a href="#爬虫基本原理" class="headerlink" title="爬虫基本原理"></a>爬虫基本原理</h3><p>爬虫简单分为三步：获取网页，提取信息，保存数据。</p>
<h4 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h4><h5 id="JavaScript渲染页面"><a href="#JavaScript渲染页面" class="headerlink" title="JavaScript渲染页面"></a>JavaScript渲染页面</h5><p>但是，现在越来越多的网页采用Ajax、前段模块化工具来构建，信息展示由JavaScript控制，架空HTML，这时候用简单的爬虫操作，什么也抓取不到，超级头大。</p>
<h5 id="会话和Cookies"><a href="#会话和Cookies" class="headerlink" title="会话和Cookies"></a>会话和Cookies</h5><h3 id="Cookies基本原理"><a href="#Cookies基本原理" class="headerlink" title="Cookies基本原理"></a>Cookies基本原理</h3>]]></content>
      <categories>
        <category>学习爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>考研英语</title>
    <url>/2020/02/10/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<h3 id="考研英语误区"><a href="#考研英语误区" class="headerlink" title="考研英语误区"></a>考研英语误区</h3><p>英语的五大能力：<strong>听、说、读、写、译</strong>。<br>40分阅读<br>25分写作</p>
<h4 id="词汇误区"><a href="#词汇误区" class="headerlink" title="词汇误区"></a>词汇误区</h4><ul>
<li>随意单词背诵<br>[图片]</li>
</ul>
<ol>
<li>专有名词</li>
<li>前后缀</li>
<li>五千多个单词</li>
</ol>
<h4 id="写作误区"><a href="#写作误区" class="headerlink" title="写作误区"></a>写作误区</h4><ul>
<li>只背不练</li>
<li>只练不改</li>
</ul>
<h3 id="单词’’"><a href="#单词’’" class="headerlink" title="单词’’"></a>单词’’</h3><h4 id="小词大做"><a href="#小词大做" class="headerlink" title="小词大做"></a>小词大做</h4><p>1（词根） 9（后缀）6（前缀）<br>后缀作用，改变词性</p>
]]></content>
      <categories>
        <category>考研计划</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>考研复习安排</title>
    <url>/2020/02/16/%E8%80%83%E7%A0%94%E5%A4%8D%E4%B9%A0%E5%AE%89%E6%8E%92/</url>
    <content><![CDATA[<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>张宇老师复习计划建议</p>
<ol>
<li><strong>2020 2月-5月</strong> 基础阶段 《张宇考研数学基础30讲》搭配2021爱启航张宇基础班 + 教材 + 复习全书</li>
<li><strong>2020 5月-9月</strong> 强化阶段 《高数18讲》《现代9讲》《概率9讲》张宇强化班<br>《闭关修炼》</li>
<li><strong>2020 9月-12月</strong> 模考冲刺阶段 《真题大全解》《命题人终极预测8套卷》《考研数学最后四套卷》</li>
</ol>
]]></content>
      <categories>
        <category>考研计划</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>进程管理</title>
    <url>/2020/02/13/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h3><p>程序：是<strong>静态的</strong>，是存放在磁盘里的可执行文件，是一系列指令集合</p>
<p>进程(Process)：是<strong>动态的</strong>，是程序一次执行过程。</p>
<p>同一个程序的多次执行会对应多个进程。</p>
<p>问题：操作系统是这些进程的管理者，它如何区分各个进程？</p>
<p>当进程被创建时，操作系统会为该进程分配一个<strong>唯一的、不重复的</strong>的“身份证号”——<strong>PID</strong>（Process ID，进程ID）</p>
<h4 id="进程的组成——PCB"><a href="#进程的组成——PCB" class="headerlink" title="进程的组成——PCB"></a>进程的组成——PCB</h4><p>操作系统要：</p>
<ol>
<li>记录PID，进程所属用户ID（UID）-<strong>基本的进程描述信息，可以让操作系统区分各个今晨</strong></li>
<li>还要记录给进程分配了哪些资源（如：分配了多少内存、正在使用哪些I/O设备、正在使用哪些文件）-<strong>可用于实现操作系统对资源的管理</strong></li>
<li>还要记录进程的运行情况（如：CPU使用时间、磁盘使用情况等）-<strong>可用于实现操作系统对进程的控制</strong></li>
</ol>
<p>这些信息都被保存在一个数据结构<strong>PCB</strong>（Process Control Block）中，即<strong>进程控制块</strong>。</p>
<p><img src="PCB.png" alt="PCB"></p>
<p><img src="进程的组成.png" alt="进程的组成"></p>
<p><strong>PCB</strong>是<strong>给操作系统用的</strong>。</p>
<p><strong>程序段、数据段</strong>是给<strong>进程自己用的</strong>。</p>
<p><img src="程序如何运行.PNG" alt="程序如何运行"></p>
<p>一个<strong>进程实体（进程映像）</strong>由<strong>PCB、程序段、数据段</strong>组成。</p>
<p><strong>进程</strong>是<strong>动态</strong>的，<strong>进程实体（进程映像）</strong>是<strong>静态</strong>的。</p>
<p><strong>进程</strong>是进程实体的<strong>运行过程</strong>，是系统进行<strong>资源分配</strong>和<strong>调度</strong>的一个独立单位。</p>
<h4 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h4><p><img src="进程的特征.PNG" alt="进程的特征"></p>
<p><img src="进程小结.PNG" alt="进程小结"></p>
<h3 id="进程的状态与装换"><a href="#进程的状态与装换" class="headerlink" title="进程的状态与装换"></a>进程的状态与装换</h3><h4 id="创建态、就绪态、运行态和终止态"><a href="#创建态、就绪态、运行态和终止态" class="headerlink" title="创建态、就绪态、运行态和终止态"></a>创建态、就绪态、运行态和终止态</h4><p><img src="创建态和就绪态.PNG" alt="创建态和就绪态"></p>
<p><img src="运行态.PNG" alt="运行态"></p>
<p>在进程运行的过程中，可能会<strong>请求等待某个事件的发生</strong>。</p>
<p>在这个事件发生之前，进程无法继续往下执行，此时操作系统让这个进程下CPU，并让它进入“<strong>阻塞态</strong>”。</p>
<p>一个进程可以执行exit系统调用，请求操作系统终止该进程。</p>
<p>此时该进程会进入“<strong>终止态</strong>”，操作系统会让该进程下CPU，并回收内存空间等资源，最后还要回收还进程的PCB。</p>
<p>当终止进程的工作完成后，这个进程就彻底消失了。</p>
<p><img src="状态小结.PNG" alt="状态小结"></p>
<p>注意：<strong>不能由阻塞态直接转换为运行态，也不能就绪态直接转换为阻塞态</strong>。</p>
<p>进程的整个生命周期中，大部分时间都处于三种基本状态中</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">三种基本状态</th>
<th style="text-align:center">解释</th>
<th style="text-align:center">补充</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">运行态(Running)</td>
<td style="text-align:center">占有CPU，并在CPU上运行</td>
<td style="text-align:center">单CPU情况下，同一时刻只有一个进程处于运行态，多核CPU情况下，可能有多个进程处于运行态</td>
</tr>
<tr>
<td style="text-align:center">就绪态(Ready)</td>
<td style="text-align:center">已经具备运行条件，但是由于没有空闲CPU，而暂时不能运行</td>
</tr>
<tr>
<td style="text-align:center">阻塞态(Waiting/Blocked)，又称：等待态</td>
<td style="text-align:center">因等待某一事件而暂时不能运行</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">另外两种状态</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建态(New，又称：新建态)</td>
<td style="text-align:center">进程正在被创建，操作系统为进程分配资源，初始化PCB</td>
</tr>
<tr>
<td style="text-align:center">终止态(Terminated，又称：结束态)</td>
<td style="text-align:center">进程正在从系统中撤销，操作系统会回收进程拥有的资源，撤销PCB</td>
</tr>
</tbody>
</table>
</div>
<p>进程PCB中，会有一个变量<strong>state</strong>来表示进程的当前状态。</p>
<h3 id="进程的组织方式"><a href="#进程的组织方式" class="headerlink" title="进程的组织方式"></a>进程的组织方式</h3><h4 id="链接方式"><a href="#链接方式" class="headerlink" title="链接方式"></a>链接方式</h4><p><img src="进程的组织.PNG" alt="进程的组织"></p>
<p>很多操作系统还会根据阻塞原因不同，再分为多个阻塞队列。</p>
<h4 id="索引方式"><a href="#索引方式" class="headerlink" title="索引方式"></a>索引方式</h4><p><img src="索引方式.PNG" alt="索引方式"></p>
<p><img src="进程的组织方式.png" alt="进程的组织方式"></p>
<p><img src="进程的状态与转换.png" alt="进程的状态与转换"> </p>
<h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><p>进程控制的主要功能是对系统中的所有进程实施有效的管理，它具有创建新进程、撤销已有进程、实现进程状态装换等功能。</p>
<p>简化理解：进程控制就是要实现进程状态转换。</p>
<p><img src="进程控制.PNG" alt="进程控制"></p>
<p><strong>原语</strong>是一种特殊的程序，它的<strong>执行具有原子性</strong>。也就是说，这段<strong>程序的运行必须一气呵成，不可中断</strong>。</p>
<p><img src="层次结构.PNG" alt="层次结构"></p>
<p><strong>原语</strong>的执行具有<strong>原子性</strong>，即执行过程只能一气呵成，期间<strong>不允许被中断</strong>。可以</p>
<p>用“<strong>关中断</strong>指令”和“<strong>开中断</strong>指令”这两个<strong>特权指令</strong>实现原子性。</p>
<p>CPU执行了<strong>关中断指令</strong>之后，就不在执行检查中断信号，直到执行<strong>开中断指令</strong>之后才会恢复检查。</p>
<p><img src="进程的创建.png" alt="进程的创建"></p>
<p><img src="进程的终止.png" alt="进程的终止"></p>
<p><img src="进程的阻塞和唤醒.png" alt="进程的阻塞和唤醒"></p>
<p><img src="进程的切换.png" alt="进程的切换"></p>
<p>无论哪个进程控制原语，要做的无非三类事情：</p>
<ol>
<li>更新PCB中的信息<br>修改进程状态（state) 保存/恢复运行状态</li>
<li>将PCB插入合适的队列</li>
<li>分配/回收资源</li>
</ol>
<h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><p>进程通信就是指进程之间的信息交换。</p>
<p>进程是分配系统资源的单位（包括内存地址空间），因此<strong>各进程</strong>拥有<strong>内存地址空间相互独立</strong>。</p>
<p>为了保证安全，<strong>一个进程不能直接访问另一个进程的地址空间</strong>。</p>
<p>但是进程之间的信息交换又是必须实现的，为了保证进程间的安全通信，操作系统提供了：<strong>共享存储、消息传递、管道通信</strong>。</p>
<h4 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h4><p>两个进程对共享空间的访问必须是<strong>互斥</strong>的。</p>
<ol>
<li><p><strong>基于数据结构</strong>的共享：比如共享空间只能放长度为10的数组。这种共享方式速度慢、限制多，是一种<strong>低级通信</strong>方式。</p>
</li>
<li><p><strong>基于存储区</strong>的共享：在内存中画一块共享存储区。<strong>高级通信</strong>方式。</p>
</li>
</ol>
<h4 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h4><p><img src="管道通信.PNG" alt="管道通信"></p>
<ol>
<li>管道只能采用<strong>半双工通信</strong>，某一时间段内只能实现单向的传输。如果要实现<strong>双向同时通信</strong>，则<strong>需要设置两个管道</strong>。</li>
<li>各进程要<strong>互斥</strong>地访问管道。</li>
<li>数据以字符流的形式写入管道，当<strong>管道写满</strong>时，<strong>写程序</strong>的write()系统调用将被<strong>阻塞</strong>，等待读进程将数据取走。当读进程将数据全部取走时，<strong>管道变空</strong>，此时<strong>读进程</strong>的read()系统将被<strong>阻塞</strong>。</li>
<li>如果<strong>没写满，就不允许读</strong>。如果<strong>没读完，就不允许写</strong>。</li>
<li>数据一旦被读出，就从管道中被抛弃，这就意味着<strong>读进程最多只能有一个</strong>，否则可能会有读错数据的情况。</li>
</ol>
<p><img src="进程通信.png" alt="进程通信"></p>
<h3 id="线程的概念和特点"><a href="#线程的概念和特点" class="headerlink" title="线程的概念和特点"></a>线程的概念和特点</h3><p>进程间并发，开销很大<br>线程间并发，开销很小</p>
<p><strong>引入线程机制后，并发带来的系统开销降低，系统并发性提升</strong>。</p>
<p>注意：从属于不同进程的线程间切换，也会导致进程的切花，开销也大。</p>
<p><img src="线程的优点和特点.PNG" alt="线程的优点和特点"></p>
<p><img src="线程的概念和特点.png" alt="线程的概念和特点"></p>
<h3 id="线程的实现方式（多线程模型）"><a href="#线程的实现方式（多线程模型）" class="headerlink" title="线程的实现方式（多线程模型）"></a>线程的实现方式（多线程模型）</h3><h4 id="用户级线程（User-level-Thread-ULT）"><a href="#用户级线程（User-level-Thread-ULT）" class="headerlink" title="用户级线程（User-level Thread,ULT）"></a>用户级线程（User-level Thread,ULT）</h4><p>历史背景：早期的操作系统只支持进程不支持线程。当时的“线程”是由线程库完成的。</p>
<ol>
<li>用户级线程由应用程序通过线程库实现，所有的<strong>线程管理工作</strong>都由<strong>应用程序负责</strong>（包括线程切换）</li>
<li>用户级线程中，<strong>线程切换</strong>可以在<strong>用户态下完成</strong>，无需操作系统干预。</li>
<li>在用户看来，是有多个线程。但是在操作系统内核看来，并不能意识到线程的存在。<strong>“用户级线程”</strong>就是“<strong>从用户视角看能看到的线程</strong>”。</li>
<li>优缺点：<br>优点：用户级线程的切换在用户空间即可完成，不需要切换到和心态，线程管理系统开销小，效率高。<br>缺点：当一个用户级线程被阻塞后，整个线程都会被堵塞，并发度不高。多个线程无法在多核处理机上并行运行。</li>
</ol>
<h4 id="内核级线程（Kernel-Level-Thread-KLT-又称“内核支持的线程”）"><a href="#内核级线程（Kernel-Level-Thread-KLT-又称“内核支持的线程”）" class="headerlink" title="内核级线程（Kernel-Level Thread, KLT, 又称“内核支持的线程”）"></a>内核级线程（Kernel-Level Thread, KLT, 又称“内核支持的线程”）</h4><p><img src="现成的实现方式.PNG" alt="线程的实现方式"><br>（一对一模型）</p>
<ol>
<li><strong>内核级线程的管理工作</strong>由<strong>操作系统</strong>完成。</li>
<li>线程调度、切换等工作都由内核负责，因此<strong>内核级线程的切换</strong>必然需要在<strong>核心态</strong>下才能完成。</li>
<li>操作系统会为每个内核级新城建立相应的TCB（Thread Control Block，线程控制模块）通过TCB对线程进行管理。“<strong>内核级线程</strong>”就是“<strong>从操作系统内核视角看能看到的线程</strong>”。</li>
<li>优缺点：<br>优点：当一个线程被阻塞后，别的线程还可以继续执行，并发性强。多线程可在多核处理机上并行执行。<br>缺点：一个用户进程会占用多个内核级线程，线程切换由操作系统内核完成，需要从用户态变为和心态，因此线程管理成本高，开销大。</li>
</ol>
<h4 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h4><p>一对一模型<br><img src="多线程.PNG" alt="多线程"><br><strong>多对一</strong>模型：多个用户级线程映射到一个内核级线程。且一个进程只被分配一个内核级线程。</p>
<p>优点：用户级线程切换在用户空间即可完成，不需要切换到核心态，线程管理的西永开销小，效率高。</p>
<p>缺点：当一个用户级线程被阻塞后，震哥哥进程都会被阻塞，并发度不高。多个线程不可再多核处理及上并行运行。</p>
<p><strong>重重重点</strong>：<br>操作系统只“看得见”内核级线程，因为只有<strong>内核级线程才是处理机分配的单位</strong>。</p>
<p><strong>多对多</strong>模型：<br>n用户及线程映射到m个内核级线程（<strong>n&gt;m</strong>）。每个用户进程对应m个内核级线程。<br>克服了多对一模型并发度不高的缺点（一个阻塞全体阻塞），哟克服了一对一模型中一个用户进程占用太多内核级线程，开销太大的缺点。</p>
<p>可以这样理解：<br>用户级线程是“代码逻辑”的载体<br>内核级线程是“运行机会”的载体</p>
<p><strong>内核级线程才是处理及分配的单位</strong>。</p>
<p>一段“代码逻辑”只有获得了“运行机会”才能被CPU执行。</p>
<p><img src="线程.png" alt="线程"></p>
<h3 id="处理机调度概念、层次"><a href="#处理机调度概念、层次" class="headerlink" title="处理机调度概念、层次"></a>处理机调度概念、层次</h3><h4 id="调度的基本概念"><a href="#调度的基本概念" class="headerlink" title="调度的基本概念"></a>调度的基本概念</h4><p>当有一堆任务要处理，但由于资源有限，这些事情没法同时处理。这就需要确定<strong>某种规则</strong>来<strong>决定</strong>处理这些任务的顺序，这就是“调度”研究的问题。</p>
<p>在多道程序中，进程的数量往往是多于处理机的个数的，这样就不可能并行地处理各个进程。</p>
<p><strong>处理机调度</strong>，就是从就绪队列中<strong>按照一定算法选择一个进程</strong>并<strong>将处理机分配给它</strong>运行，已实现进程的并发执行。</p>
<h4 id="调度的三个层次"><a href="#调度的三个层次" class="headerlink" title="调度的三个层次"></a>调度的三个层次</h4><h5 id="高级调度"><a href="#高级调度" class="headerlink" title="高级调度"></a>高级调度</h5><p><img src="gdd.PNG" alt="gdd"><br>由于内存空间有限，有时无法将用户提交的作业全部放入内存，因此就需要确定某种规则来决定将作业调入内存的顺序。</p>
<p><strong>高级调度(作业调度)</strong>。按一定的原则从外存上处于后备队列的作业中挑选一个（或多个）作业，给他们分配内存等必要资源，并<strong>建立相应的进程（建立PCB）</strong>，以使它（们）<strong>获得竞争处理机的权利</strong>。</p>
<p>高级调度是辅存（外存）与内存之间的调度。每个作业只调入一次，调出一次。<strong>作业调入时会建立相应的PCB，作业调出时才撤销PCB</strong>。高级调度主要是指调入的问题，因为只有调入的实际需要操作系统来确定，但调出的时机必然是作业运行结束才调出。</p>
<h5 id="中级调度"><a href="#中级调度" class="headerlink" title="中级调度"></a>中级调度</h5><p>引入了虚拟存储技术之后，可将暂时不能运行的进程调至外存等待。等它重新具备了运行条件且内存稍有空闲时，重新调入内存。</p>
<p>这么做的目的是为了<strong>提高内存利用率</strong>和<strong>系统吞吐量</strong>。</p>
<p>暂时调到外存等待的进程状态为<strong>挂起状态</strong>。值得注意的是，<strong>PCB</strong>并不会一起调到外存，而是<strong>会常驻内存</strong>。PCB中会记录进程数据在外存中的存放位置，进程状态等信息，操作系统通过内存中的PCB来保持对各个进程的监控、管理。被挂起的进程PCB会被放在<strong>挂起队列</strong>中。</p>
<p><strong>中级调度（内存调度）</strong>，就是要决定哪个处于挂起状态的进程重新调入内存。</p>
<p>一个进程可能会被多次调出、调入内存，因此<strong>中级调度</strong>发生的<strong>频率</strong>要比高级调度<strong>更高</strong>。</p>
<p><img src="中级调度.PNG" alt="中级调度"></p>
<h5 id="补充知识：进程的挂起态与七状态模型"><a href="#补充知识：进程的挂起态与七状态模型" class="headerlink" title="补充知识：进程的挂起态与七状态模型"></a>补充知识：进程的挂起态与七状态模型</h5><p>暂时调到外存等待的进程状态为<strong>挂起状态（挂起态suspend）</strong></p>
<p>挂起态又可以进一步细分为<strong>就绪挂起、阻塞挂起</strong>两种状态。</p>
<p>五状态模型——&gt;七状态模型</p>
<p><img src="挂起.PNG" alt="挂起"></p>
<p>注意：“挂起”和“阻塞”的区别，两种状态都是暂时不能获得CPU的服务，但是挂起态是将进程映像调到外存中，而阻塞态下进程映像还在内存中。</p>
<p>有的操作系统会把就绪挂起、阻塞挂起分为两个挂起队列，甚至会根据阻塞原因不同再把阻塞挂起进程进一步分为多个队列。</p>
<h5 id="低级调度"><a href="#低级调度" class="headerlink" title="低级调度"></a>低级调度</h5><p><img src="低级调度.PNG" alt="低级调度"></p>
<p><strong>低级调度(进程调度)</strong>，其主要任务是按照某种方法和策略从就绪队列中选取一个进程，将处理机分配给它。</p>
<p>进程调度室操作系统中<strong>最基本的一种调度</strong>，在一般的操作系统中都必须配置进程调度。<br>进程调度的<strong>频率很高</strong>，一般几十毫秒一次。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th>要做什么</th>
<th>调度发生在</th>
<th>发生频率</th>
<th style="text-align:right">对进程状态的影响</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">高级调度（作业调度）</td>
<td>按照某种规则，从后备队列中选择合适的作业将其调入内存，并为其创建进程</td>
<td>外存——&gt;内存（面向作业）</td>
<td>最低</td>
<td style="text-align:right">无——&gt;创建态——&gt;就绪态</td>
</tr>
<tr>
<td style="text-align:left">中级调度（内存调度）</td>
<td>按照某种规则，从挂起队列中选择合适的进程将其数据调回内存</td>
<td>外存——&gt;内存（面向过程）</td>
<td>中等</td>
<td style="text-align:right">挂起态——&gt;就绪态（阻塞挂起——&gt;阻塞态）</td>
</tr>
<tr>
<td style="text-align:left">低级调度（进程调度）</td>
<td>按照某种规则，从就绪队列中选择一个进程为其分配处理机</td>
<td>内存——&gt;CPU</td>
<td>最高</td>
<td style="text-align:right">就绪态——&gt;运行态</td>
</tr>
</tbody>
</table>
</div>
<p><img src="处理机调度.png" alt="处理机调度"></p>
<h3 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h3><h4 id="进程调度的时机"><a href="#进程调度的时机" class="headerlink" title="进程调度的时机"></a>进程调度的时机</h4><p><img src="进程调度.PNG" alt="进程调度"></p>
<p><strong>不能进行</strong>进程调度与切换的情况：</p>
<ol>
<li>在<strong>处理中断过程中</strong>。中断处理过程复杂，与硬件密切相关，很难做到在中断处理过程中进行进程切换。</li>
<li>进程在<strong>操作系统内核程序临界区</strong>中。</li>
<li>在<strong>原子操作过程中</strong>（原语）。原子操作不可中断。</li>
</ol>
<p>进程在<strong>操作系统内核程序临界区</strong>中<strong>不能</strong>进行调度与切换。<br><strong>内核程序临界区</strong>一般是用来访问<strong>某种内核数据结构</strong>的，比如进程的就绪队列。</p>
<h4 id="进程调度的方式"><a href="#进程调度的方式" class="headerlink" title="进程调度的方式"></a>进程调度的方式</h4><p><strong>非剥夺调度方式</strong>，又称<strong>非抢占方式</strong>。即，只允许进程主动放弃处理机。在运行过程中即使有更紧迫的人物到达，当前进程仍然会继续使用处理机，知道该进程终止或主动要求进入阻塞态。</p>
<p>实现简单，任务开销小但是无法及时处理紧急任务，适合于早期的批处理系统。</p>
<p><strong>剥夺调度方式</strong>，又称<strong>抢占方式</strong>，当一个进程正在处理机上执行时，如果有一个更重要或更紧迫的基础讷航需要使用处理机，则立即暂停正在执行的进程，将处理机分配给更重要紧迫的那个进程。</p>
<p>可以优先处理更紧急的进程，也实现让各及昵称按时间片轮流执行的功能（通过时钟中断），适合于分时操作系统，实时操作系统。</p>
<h4 id="进程的切换与过程"><a href="#进程的切换与过程" class="headerlink" title="进程的切换与过程"></a>进程的切换与过程</h4><p><img src="进程的切换与过程.PNG" alt="进程的切换与过程"></p>
<p><img src="进程调度的…….png" alt="进程调度的……"></p>
<h3 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h3><h4 id="CPU利用率"><a href="#CPU利用率" class="headerlink" title="CPU利用率"></a>CPU利用率</h4><p>由于早期CPU造价极其昂贵，因此人们会<strong>希望让CPU尽可能多地工作</strong></p>
<p><strong>CPU利用率</strong>：CPU“忙碌”的事件占总时间的比例。</p>
<p><strong>利用率</strong>=忙碌的事件/总时间</p>
<h4 id="系统吞吐量"><a href="#系统吞吐量" class="headerlink" title="系统吞吐量"></a>系统吞吐量</h4><p>对计算机来说，希望能用尽可能少的时间处理尽可能多的作业</p>
<p><strong>系统吞吐量</strong>：单位时间内完成作业的数量</p>
<p><strong>系统吞吐量</strong>=总共完成了多少道作业/总共花了多少时间</p>
<h4 id="周转时间"><a href="#周转时间" class="headerlink" title="周转时间"></a>周转时间</h4><p><strong>周转时间</strong>，是指<strong>作业被提交给系统开始</strong>，到<strong>作业完成为止</strong>的这段时间间隔。</p>
<p>（作业）<strong>周转时间</strong>=作业完成时间-作业提交时间</p>
<p><strong>平均周转时间</strong>=各作业周转时间之和/作业数</p>
<p><strong>带权周转时间</strong> = 作业周转时间/作业时机运行的时间 = （作业完成时间-作业提交时间）/作业实际运行的时间</p>
<p>带权周转时间与周转时间都是越小越好</p>
<p><strong>平均带权周转时间</strong>=各作业的带权周转时间之和/作业数</p>
<h4 id="等待时间"><a href="#等待时间" class="headerlink" title="等待时间"></a>等待时间</h4><p><strong>等待时间</strong>，指进程/作业<strong>处于等待处理机状态时间之和</strong>，等待时间越长，用户满意度越低。</p>
<p>对于<strong>进程</strong>来说，等待时间就是指进程建立后<strong>等待被服务的事件之和</strong>，在等待I/O完成的期间其实进程也是在被服务，所以不计入等待时间。</p>
<p>对于<strong>作业</strong>来说，不仅要考虑<strong>建立进程后的等待时间，还要加上作业在外存后备队列中等待的时间</strong>。</p>
<p><img src="调度算法的评价指标.png" alt="调度算法的评价指标"></p>
<h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><p>Tips:各种调度算法的学习思路</p>
<ol>
<li>算法思想</li>
<li>算法规则</li>
<li>这种调度算法是用于 作业调度 还是 进程调度？</li>
<li>抢占式？ 非抢占式？</li>
<li>优点和缺点</li>
<li>是否会导致<strong>饥饿</strong>（某进程/作业长期得不到服务）</li>
</ol>
<h4 id="先来先服务（FCFS，First-Come-First-Serve）"><a href="#先来先服务（FCFS，First-Come-First-Serve）" class="headerlink" title="先来先服务（FCFS，First Come First Serve）"></a>先来先服务（FCFS，First Come First Serve）</h4><p><img src="FCFS.png" alt="FCFS"></p>
<h4 id="短作业优先（SJF，Shortest-Job-First）"><a href="#短作业优先（SJF，Shortest-Job-First）" class="headerlink" title="短作业优先（SJF，Shortest Job First）"></a>短作业优先（SJF，Shortest Job First）</h4><h5 id="非抢占式的短作业优先调度算法"><a href="#非抢占式的短作业优先调度算法" class="headerlink" title="非抢占式的短作业优先调度算法"></a>非抢占式的短作业优先调度算法</h5><p>应该称为<strong>短进程优先调度算法（SPF）</strong></p>
<p>短作业/进程优先调度算法：每次调度时选择<strong>当前已到达</strong>且<strong>运行时间最短</strong>的作业/进程。</p>
<h5 id="抢占式的短作业优先调度算法"><a href="#抢占式的短作业优先调度算法" class="headerlink" title="抢占式的短作业优先调度算法"></a>抢占式的短作业优先调度算法</h5><p>称为<strong>最短剩余时间优先算法（SRTN）</strong></p>
<p><strong>最短剩余时间优先</strong>算法：每当有进程加入<strong>就绪队列改变时就需要及导读</strong>，如果新到达的进程<strong>剩余时间</strong>比当前运行的进程剩余时间<strong>更短</strong>，则由新进程<strong>抢占</strong>处理机，当前运行进程重新回到就绪队列。另外，当一个<strong>进程完成时也需要调度</strong>。</p>
<p><strong>注意</strong>：</p>
<ol>
<li>如果题目中<strong>未特殊说明</strong>，所提到的“短作业/进程优先算法”<strong>默认</strong>是<strong>非抢占式</strong>的。</li>
</ol>
<p><img src="SJF.png" alt="SJF"></p>
<h4 id="高响应比优先（HRRN-Highest-Response-Ratio-Next）"><a href="#高响应比优先（HRRN-Highest-Response-Ratio-Next）" class="headerlink" title="高响应比优先（HRRN Highest Response Ratio Next）"></a>高响应比优先（HRRN Highest Response Ratio Next）</h4><p><img src="高响应比.PNG" alt="高响应比"></p>
<p><img src="HRRN.png" alt="HRRN"></p>
<p>这几种算法主要关心对用户的公平性、平均周转时间、平均等待时间等评价系统整体性能的指标，但是不关心“响应时间”，也不区分任务的紧急程度，因此对于用户来说，交互性和糟糕。因此这三种算法一般适合用于<strong>早期的批处理系统</strong>。当然FCFS算法也常结合其他的算法使用，在现在也扮演着很重要的角色。</p>
<p><strong>注意做题，常出现在小题计算中</strong></p>
<h4 id="时间片轮转（RR，Round-Robin）"><a href="#时间片轮转（RR，Round-Robin）" class="headerlink" title="时间片轮转（RR，Round-Robin）"></a>时间片轮转（RR，Round-Robin）</h4><p>如果<strong>时间片太大</strong>，使得每个进程都可以在一个时间片内就完成，则时间片轮转调度算法<strong>退化为先来先服务</strong>调度算法，并且会<strong>增大进程响应时间</strong>，因此<strong>时间片不能太大</strong>。</p>
<p>另一方面，进程调度、切换是有时间代价的（保存、恢复运行环境），因此如果<strong>事件片太小</strong>，会导致<strong>进程切换过于频繁</strong>，系统会花大量的时间来处理进程切换。从而导致实际用于进程执行的事件比例减少，可见<strong>时间片也不能太小</strong>。</p>
<p>一般来说，设计时间片时要让切换进程的开销占比不超过1%。</p>
<p><img src="RR.PNG" alt="RR"></p>
<h4 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h4><p><img src="优先级调度算法非抢占式.PNG" alt="优先级调度算法非抢占式"></p>
<p><img src="优先级调度算法抢占式.PNG" alt="优先级调度算法抢占式"></p>
<p><img src="补充.PNG" alt="补充"></p>
<p><img src="优先级调度算法.png" alt="优先级调度算法"></p>
<h4 id="多级反馈队列调度算法"><a href="#多级反馈队列调度算法" class="headerlink" title="多级反馈队列调度算法"></a>多级反馈队列调度算法</h4><p>FCFS算法的优点是公平<br>SJF算法的优点是能尽快处理短作业，平均等待/周转时间等参数很优秀<br>时间片轮转算法可以让各个进程得到及时响应<br>优先级调度算法可以灵活地调整各种进程被服务的机会</p>
<p><img src="多级反馈队列调度算法.PNG" alt="多级反馈队列调度算法"></p>
<p><img src="多级反馈队列调度算法1.PNG" alt="多级反馈队列调度算法1"></p>
<p><img src="总结.PNG" alt="总结"></p>
<p><img src="回顾.PNG" alt="回顾"></p>
<p>比起早期的批处理系统来说，由于计算机造价大幅降级，因此之后出现的交互式操作系统（包括分时操作系统、实时操作系统等）更注重系统的响应时间、公平性、平衡性等指标。而这几种算法恰好也能较好地满足交互式系统的需求。因此这三种算法适合用于<strong>交互式系统</strong>（比如UNIX使用的就是多级反馈队列调度算法）</p>
<p><strong>一定要动手做课后习题</strong></p>
<h3 id="进程同步和互斥"><a href="#进程同步和互斥" class="headerlink" title="进程同步和互斥"></a>进程同步和互斥</h3><h4 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h4><p>进程具有<strong>异步性</strong>的特征。异步性是指，个并发执行的进程以各自独立、不可预知的速度向前推进。</p>
<p><strong>同步</strong>亦称<strong>直接制约关系</strong>，它是指为完成某种任务而建立的两个或多个进程，这些进城因为需要在某些位置上<strong>协调</strong>它们的<strong>工作次序</strong>而产生的制约关系。进程间的直接制约关系就是源于它们之间的相互合作。</p>
<h4 id="进程互斥"><a href="#进程互斥" class="headerlink" title="进程互斥"></a>进程互斥</h4><p>我们把<strong>一段时间内只允许一个进程使用</strong>的资源称为<strong>临界资源</strong>。许多物理设备（比如摄像头、打印机）都属于临界资源。此外还有很多变量、数据、内存缓冲区都属于临界资源。</p>
<p>对临界资源的访问，必须<strong>互斥</strong>地进程。互斥，亦称<strong>间接制约关系</strong>。**进程互斥指当一个进程访问某临界资源时，另一个想要访问该临界资源的进程必须等待。当前访问临界资源的进程访问结束，释放该临界资源后，另一个进程才会去访问临界资源。</p>
<p><img src="两种共享方式.PNG" alt="两种共享方式"></p>
<p>对临界资源的互斥访问，可以在逻辑上分为以下四个部分：<br><img src="对临界区的访问.PNG" alt="对临界区的访问"></p>
<p>注意：<br><strong>临界区</strong>是进程中<strong>访问临界资源</strong>的代码段。<br><strong>进入区</strong>和<strong>退出区</strong>是<strong>负责实现互斥</strong>的代码段。<br>临界区也可称为“临界段”。</p>
<p><img src="同步、互斥.png" alt="同步、互斥"></p>
<h3 id="进程互斥的软件实现方法"><a href="#进程互斥的软件实现方法" class="headerlink" title="进程互斥的软件实现方法"></a>进程互斥的软件实现方法</h3><p>学习提示：</p>
<ol>
<li>理解各个算法的思想、原理</li>
<li>结合上小节学习的“实现互斥的四种逻辑部分”，重点理解个算法在进入区、退出区都做了什么</li>
<li>分析个算法存在的缺陷（结合“实现互斥要遵循的四种原则”进行分析）</li>
</ol>
<h4 id="单标志法"><a href="#单标志法" class="headerlink" title="单标志法"></a>单标志法</h4><p>算法思想：两个进程在<strong>访问完临界区后</strong>会把使用临界区的权限转交给另一个进程。也就是说<strong>每个进程进入临界区的权限只能被另一个进程赋予</strong><br><img src="单标志法.PNG" alt="单标志法"></p>
<p>该算法<strong>可以实现“同一时刻最多只允许一个进程访问临界区”</strong></p>
<p><strong>单标志法</strong>存在的<strong>主要问题</strong>是：<strong>违背“空闲让进”原则</strong>。</p>
<h4 id="双标志先检查法"><a href="#双标志先检查法" class="headerlink" title="双标志先检查法"></a>双标志先检查法</h4><p>算法思想：设置一个布尔型数组flag[]，数组中各个元素用来<strong>标志各个进程想进入临界区的意愿</strong>。</p>
<p><img src="双标志检查法.PNG" alt="双标志检查法"></p>
<p>双标志先检查法的<strong>主要问题</strong>是：<strong>违反“忙则等待”原则</strong>。<br>原因在于，<strong>进入区的“检查”和“上锁”</strong>两个处理不是一气呵成的。“检查”后，“上锁”前可能发生切换。</p>
<h4 id="双标志后检查法"><a href="#双标志后检查法" class="headerlink" title="双标志后检查法"></a>双标志后检查法</h4><p><img src="后检查.PNG" alt="后检查"></p>
<h4 id="Peterson-算法"><a href="#Peterson-算法" class="headerlink" title="Peterson 算法"></a>Peterson 算法</h4><p>算法思想：结合双标志法、单标志法的思想。如果双方都争着想进入临界区，呢可以让进程尝试“孔融让梨”（谦让）。做一个有礼貌的进程。</p>
<p><img src="Peterson.PNG" alt="Peterson"></p>
<p>Peterson算法用软件方法解决了进程互斥问题，<strong>遵循了空闲让进、忙则等待、有限等待</strong>三个原则，但是仍然<strong>未遵循让权等待</strong>的原则。</p>
<h3 id="进程互斥的硬件实现方法"><a href="#进程互斥的硬件实现方法" class="headerlink" title="进程互斥的硬件实现方法"></a>进程互斥的硬件实现方法</h3><p>学习提示：</p>
<ol>
<li>理解各个方法的原理</li>
<li>了解各个方法的优缺点<h4 id="中断屏蔽方法"><a href="#中断屏蔽方法" class="headerlink" title="中断屏蔽方法"></a>中断屏蔽方法</h4><img src="中断屏蔽方法.PNG" alt="中断屏蔽方法"></li>
</ol>
<p>优点：简单高效<br>缺点：不适用于多处理机：只适用于操作系统内核进程，不适用于用户进程（因为开/关中断指令只能运行在内核态，这组指令如果能让用户随意使用会很危险）</p>
<h4 id="TestAndSet-TS指令-TSL指令"><a href="#TestAndSet-TS指令-TSL指令" class="headerlink" title="TestAndSet(TS指令/TSL指令)"></a>TestAndSet(TS指令/TSL指令)</h4><p><img src="TestAndSet.PNG" alt="TestAndSet"><br>优点：实现简单，无需像软件实现方法那样严格检查是否会有逻辑漏洞；适用于多处理机环境<br>缺点：不满足“让权等待”原则，暂时无法进入临界区的进程会占用CPU并循环执行TSL指令，从而导致“忙等”。</p>
<h4 id="Swap指令-XCHG指令"><a href="#Swap指令-XCHG指令" class="headerlink" title="Swap指令(XCHG指令)"></a>Swap指令(XCHG指令)</h4><p>有的地方也叫做Exchange指令，或简称XCHG指令。<br>Swap指令<strong>是用硬件实现的</strong>，执行的过程不允许被中断，只能一气呵成。以下是用C语言描述的逻辑</p>
<p><img src="Swap指令.PNG" alt="Swap指令"></p>
<p><img src="进程互斥的硬件实现方法.png" alt="进程互斥的硬件实现方法"></p>
<h3 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h3><p>进程互斥的四种软件实现方式（单标执法、双标志先检查法、双标志后检查、Peterson算法）<br>进程互斥的三种软件实现方式（中断屏蔽方法、TS/TSL指令、Swap/XCHG指令）</p>
<ol>
<li>在双标志先检查法中，<strong>进入区的“检查”、“上锁”操作无法一气呵成</strong>，从而导致整个进程有可能同时进入临界区的问题</li>
<li>所有的解决方案都<strong>无法实现“让权等待”</strong>。</li>
</ol>
<p>1965年，荷兰学者Dijkstra提出了一种实现进程互斥、同步的方法——<strong>信号量机制</strong>。</p>
<p>用户进程可以通过使用操作系统提供的<strong>一对原语</strong>来对<strong>信号量</strong>进行操作，从而很方便的实现了进程互斥、进程同步。</p>
<p><strong>信号量</strong>其实就是一个变量<strong>（可以是一个整数，也可以是更复杂的记录性变量），可以用一个信号量来</strong>表示系统中某种资源的数量**，比如：系统中只有一台打印机，就可以设置一个初值为1的信号量。</p>
<p><strong>一对原语</strong>：<strong>wait(S)</strong>原语和<strong>signal(S)</strong>原语，可以把原语理解为我们自己写的函数，函数名分别为wait和signal，括号里的<strong>信号量S</strong>其实就是函数调用时传入的一个参数。</p>
<p>wait、signal原语常简称为<strong>P、V操作</strong>。因此，做题的时候常把wait(S)、siganl(S)两个操作分别写为<strong>P(S)、V(S)</strong>。</p>
<h4 id="整型信号量"><a href="#整型信号量" class="headerlink" title="整型信号量"></a>整型信号量</h4><p><img src="整型信号量.PNG" alt="整型信号量"></p>
<h4 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h4><p><img src="记录型.PNG" alt="记录型"></p>
<p><img src="信息量机制.PNG" alt="信息量机制"></p>
<p><img src="记录型1.PNG" alt="记录型1"></p>
<p><img src="信号量机制.png" alt="信号量机制"></p>
<p>注：若考试中出现P(S)、V(S)的操作，除非特别说明，否则默认S为记录型信号量。</p>
<h3 id="用信号量机制实现进程互斥、同步、前驱关系"><a href="#用信号量机制实现进程互斥、同步、前驱关系" class="headerlink" title="用信号量机制实现进程互斥、同步、前驱关系"></a>用信号量机制实现进程互斥、同步、前驱关系</h3><p>Tips:不要一头扎进代码里，要注意理解信号量背后的含义，<strong>一个信号量对应一种资源</strong>。</p>
<p>信号量的值=这种资源的剩余数量（信号量的值如果小于0，说明此时有进程在等待这种资源）</p>
<p>P(S)——申请一个资源S，如果<strong>资源不够就阻塞等待</strong><br>V(S)——释放一个资源S，如果有进程在等待该资源，则<strong>唤醒一个进程</strong></p>
<p><img src="信号量机制实现进程互斥.PNG" alt="信号量机制实现进程互斥"></p>
<p><img src="信号量机制实现进程同步.PNG" alt="信号量机制实现进程同步"></p>
<p><img src="实现前驱关系.PNG" alt="实现前驱关系"></p>
<p><img src="信号.png" alt="信号"></p>
<h4 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h4><p><img src="问题分析.PNG" alt="问题分析"></p>
<p><img src="进程同步.PNG" alt="进程同步"></p>
<p><img src="问题分析1.PNG" alt="问题分析1"></p>
<p><img src="总结1.PNG" alt="总结1"></p>
<h4 id="多生产者多消费者问题"><a href="#多生产者多消费者问题" class="headerlink" title="多生产者多消费者问题"></a>多生产者多消费者问题</h4><p><img src="问题分析2.PNG" alt="问题分析2"></p>
<p><img src="如何实现1.PNG" alt="如何实现1"></p>
<p><img src="如何实现2.PNG" alt="如何实现2"></p>
<p>总结：在生产者-消费者问题中，如果缓冲区的大小为1，那么有可能不需要设置互斥信号量就可以实现互斥访问缓冲区的功能。当然这不是绝对的，要具体问题具体分析。</p>
<p><strong>建议</strong>：在考试中如果来不及仔细分析，可以加上互斥信号量，保证各进程一定会互斥地访问缓冲区。但需要注意的是，<strong>实现互斥的P操作一定要在实现同步的P操作之后，否则可能引起“死锁”</strong>。</p>
<p>PV操作题目的解题思路：</p>
<ol>
<li>关系分析。找出题目中描述的各个进程，分析它们之间的同步、互斥关系。</li>
<li>整理思路。根据各进程的操作流程确定P、V操作的大致顺序。</li>
<li>设置信号量。设置需要的信息量，并根据题目条件确定信号量初值。（互斥信号量初值一般为1，同步信号量的初始值要看对应资源的初始值是多少）</li>
</ol>
<p>解决“多生产者-多消费者问题”的关键在于<strong>理清复杂的同步关系</strong>。</p>
<p><img src="多生产者多消费者.PNG" alt="多生产者多消费者"></p>
<h4 id="吸烟者问题"><a href="#吸烟者问题" class="headerlink" title="吸烟者问题"></a>吸烟者问题</h4><p><img src="问题.PNG" alt="问题"></p>
<p><img src="吸烟者问题.PNG" alt="吸烟者问题"></p>
<p>吸烟者问题可以为我们解决“可以生产多个产品的单生产者”问题提供一个思路。</p>
<p>若一个生产者要生产多种产品（或者说会引发多种前驱事件），那么各个V操作应该放在各自对应“事件”发生之后的位置。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>专业课</tag>
      </tags>
  </entry>
  <entry>
    <title>考研计划安排</title>
    <url>/2020/02/05/%E8%80%83%E7%A0%94%E8%AE%A1%E5%88%92%E5%AE%89%E6%8E%92/</url>
    <content><![CDATA[<h4 id="总时间安排"><a href="#总时间安排" class="headerlink" title="总时间安排"></a>总时间安排</h4><h5 id="时间安排"><a href="#时间安排" class="headerlink" title="时间安排"></a>时间安排</h5><ul>
<li>专业课<br>2/10——<br>数据结构 + 组成原理</li>
</ul>
<p>计划看网课，整理知识点，计划3月完成</p>
<ul>
<li>数学<br>做题()+知识点总结</li>
</ul>
<h4 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h4><h5 id="408"><a href="#408" class="headerlink" title="408"></a>408</h5><p>这四门专业课之间有一定的内在联系，如果是初学者，必须先学习完<strong>数据结构和组成原理后</strong>再学习<strong>操作系统</strong>，否则有些概念和原理难以理解。</p>
<p>重点放在<strong>数据结构</strong>和<strong>组成原理</strong>上，尤其数据结构更要多花一些时间；操作系统和计算机网络的很多知识点需要在理解的基础上进行记忆，相对来说容易一些。当然难易程度是相对的，具体情况也要因人而异，灵活安排。</p>
<h5 id="帖子"><a href="#帖子" class="headerlink" title="帖子"></a>帖子</h5><p><a href="https://www.zhihu.com/question/22823169/answer/517447226gj" target="_blank" rel="noopener">计算机考研408统考该如何准备</a></p>
<h4 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h4><h5 id="考试内容"><a href="#考试内容" class="headerlink" title="考试内容"></a>考试内容</h5><ul>
<li>高数、现代、概率（重点是高数）</li>
</ul>
<h5 id="数学复习建议"><a href="#数学复习建议" class="headerlink" title="数学复习建议"></a>数学复习建议</h5><ul>
<li>重复！重复！重复！拿一个小本本，记录每天做错的题目，然后在本周的周日一天专门用来做这些错题，碰到不会做的，看懂答案后，挪到下周日继续做，七天一个重复循环。<strong>重复地做错题。</strong> <strong>坚持做错题，不要因为错题多而放弃！</strong></li>
<li>总结解题技巧，主要是高数。</li>
<li>高数 多做题！多做题！多做题！</li>
<li>线性代数整门课都在讲一个东西：如何解线性代数方程组，怎么去消元(矩阵变换)、怎么表示解(向量)等等，基本上所有的东西都可以用这个逻辑串联起来。（作者说的。）算！算！算！提高计算准确性。</li>
<li>“概率在很多人看来是玄学，学起来莫名其妙，其特点是概念多，概念间的关联相对较弱，这门课要多背。<strong>把握不同概率模型的区别，知道什么情况套什么模型。</strong></li>
</ul>
<h5 id="资料选择"><a href="#资料选择" class="headerlink" title="资料选择"></a>资料选择</h5><ul>
<li>买市面上知名度最高的，比如李永乐系列。</li>
</ul>
<ol>
<li>数学：高数教材（同济版）、线性代数（同济版）、概率（陈希儒版）。买最新版本！</li>
<li>李永乐复习全书</li>
</ol>
<h5 id="复习安排"><a href="#复习安排" class="headerlink" title="复习安排"></a>复习安排</h5><ul>
<li>数学的复习战线要长，四轮复习，每天抽1到2小时做做题，保持记忆和手感。</li>
<li>3,4,5全科扫盲，啃教材，做复习全书例题，两个月给高数，一个月给线代和概率。每天保证<strong>8小时</strong>g给数学。</li>
<li>习题轮，6,7，8月，做复习全书的习题，错题全部往错题本上记。碰到不明白的知识点再回头看教材。<strong>周日做之前错题</strong>。保证半天给数学。</li>
<li>查漏补缺，9、10月完成，再一轮快速地扫完正本复习全书的习题。<strong>半天给数学。</strong></li>
<li>备考轮，11、12月做模拟卷和真题，调整心态。</li>
</ul>
<h4 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h4><h5 id="考试内容-1"><a href="#考试内容-1" class="headerlink" title="考试内容"></a>考试内容</h5><ul>
<li>单词+长难句+作文模板 = 60~70分</li>
</ul>
<h5 id="复习建议"><a href="#复习建议" class="headerlink" title="复习建议"></a>复习建议</h5><ul>
<li>完形填空不同花大量时间去复习，20*0.5。</li>
<li>阅读分支超高，4篇<em>5题 </em>2分 = 40分，难度较大。争取拿到30分。</li>
<li>把碰到不懂的长难句记到笔记本上，经常回顾复习。</li>
<li>写作背模板。</li>
</ul>
<h5 id="资料选择-1"><a href="#资料选择-1" class="headerlink" title="资料选择"></a>资料选择</h5><ul>
<li>单词，先背真题生词，再背单词数（新东方绿皮乱序）</li>
<li>长难句，何凯文《长难句解密》</li>
</ul>
<h5 id="复习安排-1"><a href="#复习安排-1" class="headerlink" title="复习安排"></a>复习安排</h5><ul>
<li>每天雷打不动早中晚半小时背单词</li>
<li>6,7两月学长难句</li>
<li>8,9,10,11月做完型、阅读理解，将长难句融会贯通</li>
<li>12月做真题，背模板。</li>
<li>和数学一样，每周安排一天来做错题，分析之前没有看懂的长难句。<h4 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h4></li>
</ul>
<h5 id="考试内容-2"><a href="#考试内容-2" class="headerlink" title="考试内容"></a>考试内容</h5><p>单选16题<em>1 + 多选17题 </em>2 + 大题5题 * 10 = 100</p>
<h5 id="复习建议-1"><a href="#复习建议-1" class="headerlink" title="复习建议"></a>复习建议</h5><ul>
<li>多选题是扣分重灾区，得分率很低。大题和单选是得分的好地方。</li>
<li>大题的时候千万不要写的超出答题范围。采用“总-分-总”结构答题。</li>
</ul>
<h5 id="参考书"><a href="#参考书" class="headerlink" title="参考书"></a>参考书</h5><ul>
<li>肖秀荣全家桶，命题人知识点精讲精练+命题人讲真题+1000题+8套卷</li>
</ul>
<h5 id="复习安排-2"><a href="#复习安排-2" class="headerlink" title="复习安排"></a>复习安排</h5><p>10月以后每天抽一两小时出来复习政治，把参考资料啃下来。</p>
]]></content>
      <categories>
        <category>考研计划</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机考研</title>
    <url>/2020/02/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94/</url>
    <content><![CDATA[<h3 id="启发"><a href="#启发" class="headerlink" title="启发"></a>启发</h3><p>今天聊起自己想考计算机专业，一心想考心仪大学的计算机研究生，但是内心坚信自己根本考不上。当你面对两个选择的时候，选择更难走的那条路，显然我有这个想法，但是内心已经认定这条难走的路根本就是一条死路。</p>
<p>既然这样，我为什么不能把这条路看的更加透彻呢，做更多的准备，而不是坚定自己模糊的印象。</p>
<p>所以，我开始搜集各种各样的信息，当然很多学校都是超级难考的，先搜集，再选择。</p>
<h3 id="北航考研-961"><a href="#北航考研-961" class="headerlink" title="北航考研(961)"></a>北航考研(961)</h3><p><a href="http://scse.buaa.edu.cn/info/1102/5423.htm" target="_blank" rel="noopener">2020年硕士研究生入学考试专业课考研大纲</a><br>(这考试内容，我除了计算机网络能看懂一点要考什么，其他的甚至都不知道要考什么。)</p>
<p><a href="https://blog.csdn.net/fengxinlinux/article/details/88953994" target="_blank" rel="noopener">考研贴</a></p>
<h4 id="考试组成"><a href="#考试组成" class="headerlink" title="考试组成"></a>考试组成</h4><p>961计算机基础综合共包括三门课程的内容：<strong>计算机组成原理、操作系统、计算机网络技术</strong>，分别占60分，50分、40分。所有课程均不指定参考书。</p>
<p>408 <strong>操作系统，计算机网络，数据结构，计算机组成。</strong></p>
<p>这两门重合的有</p>
<h4 id="计算机组成原理部分的考试大纲（60分）"><a href="#计算机组成原理部分的考试大纲（60分）" class="headerlink" title="计算机组成原理部分的考试大纲（60分）"></a>计算机组成原理部分的考试大纲（60分）</h4><h5 id="整体要求"><a href="#整体要求" class="headerlink" title="整体要求"></a>整体要求</h5><p>(一).理解单处理器计算机系统中各部件的内部工作原理、组成结构以及相互连接方式，具有完整的计算机系统的整机概念；</p>
<p>(二).理解计算机系统层次化结构概念，掌握以MIPS为代表的RISC指令集体系结构的基本知识，能对MIPS汇编程序设计语言的相关问题进行分析；</p>
<p>(三).理解计算机存储系统的层次化结构，掌握层次化存储系统的设计、分析和性能计算；</p>
<p>(四).能根据指令语义进行单周期、多周期或流水线MIPS处理器的数据通路及其控制器的分析和简单设计；</p>
<p>(五).理解并掌握输入输出系统的基本知识。</p>
<h5 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h5><p>(一)、计算机系统概述</p>
<p>（1）计算机系统的基本组成与层次结构</p>
<p>（2）计算机系统的性能指标：吞吐量、响应时间、带宽、延迟；CPU时钟周期、主频、CPI、CPU执行时间；MIPS、MFLOPS、GFLOPS、TFLOPS、PFLOPS。</p>
<p>(二)、数据的表示和运算</p>
<p>（1）数制与编码</p>
<p>（2）定点数和浮点数的表示和运算</p>
<p>（3）算术逻辑单元ALU</p>
<p>l串行加法器和并行加法器</p>
<p>l算术逻辑单元ALU的功能和结构</p>
<p>(三)、存储器层次结构</p>
<p>（1）存储器的层次化结构</p>
<p>（2）主存储器与CPU的连接</p>
<p>（3）高速缓冲存储器(Cache)</p>
<p>lCache的基本工作原理</p>
<p>lCach和主存之间的映射方式</p>
<p>lCache中主存块的替换算法与写策略</p>
<p>l多层次Cache性能计算</p>
<p>（4）虚拟存储器</p>
<p>l虚拟存储器的基本概念</p>
<p>l页式虚拟存储器</p>
<p>lTLB(快表)</p>
<p>(四)、MIPS指令系统及汇编语言</p>
<p>（1）指令系统的基本知识（指令格式、寻址方式）</p>
<p>（2）MIPS汇编语言</p>
<p>(五)、MIPS处理器</p>
<p>（1）CPU的功能和基本结构</p>
<p>（2）单周期、多周期MIPS处理器数据通路的功能和基本结构</p>
<p>（3）硬布线控制器的功能和工作原理</p>
<p>l单周期处理器控制器</p>
<p>l多周期处理器控制器</p>
<p>（4）指令流水线</p>
<p>l指令流水线的基本概念</p>
<p>l流水线冒险及处理策略</p>
<p>l指令流水线的基本实现</p>
<p>（六）、总线与输入输出(I/O)系统</p>
<p>（1）总线的基本概念</p>
<p>（2）磁盘存储器</p>
<p>（3）I/O控制器</p>
<p>lI/O控制器的功能和基本结构</p>
<p>l存储映射I/O编址</p>
<p>（4）基本I/O方式</p>
<p>l程序查询方式</p>
<p>l程序中断方式：中断的基本概念，中断响应过程，中断处理过程，多重中断和中断屏蔽的概念；</p>
<p>lDMA方式，DMA控制器组成，DMA传送过程，设备传输性能计算。</p>
<h5 id="操作系统部分的考试大纲（50分）"><a href="#操作系统部分的考试大纲（50分）" class="headerlink" title="操作系统部分的考试大纲（50分）"></a>操作系统部分的考试大纲（50分）</h5><p>（一）可参考书目</p>
<p>1.操作系统实用教程（第三版），任爱华，清华大学出版社。</p>
<p>2.现代操作系统(Modern Operating System) (The 3rd Edition),陈向群,马洪兵等译,Andrew S. Tanenbaum著,机械工业出版社。</p>
<p>（二）复习内容</p>
<p>1.操作系统概述</p>
<p>a)操作系统的基本概念；内核态与用户态、中断、异常和系统调用。</p>
<p>2.进程管理</p>
<p>a)进程、线程的基本概念以及两者的区别；</p>
<p>b)进程控制块、进程的状态与转换；</p>
<p>c)进程同步的基本概念；实现临界区互斥的基本方法；信号量机制及P、V操作；了解经典同步问题，并通过信号量机制解决进程同步问题。</p>
<p>d)进程间通信，包括共享存储系统、消息传递系统、管道。</p>
<p>e)进程调度的基本准则；典型调度算法：先来先服务调度算法、短作业(短进程、短线程)优先调度算法、时间片轮转调度算法、优先级调度算法。</p>
<p>f)死锁的形成原因与必要条件；死锁预防、死锁避免、死锁检测和解除。</p>
<p>3.内存管理</p>
<p>a)程序装入与链接；逻辑地址与物理地址空间；重定位；内存保护。</p>
<p>b)分区管理；交换与覆盖技术；</p>
<p>c)分页管理方式；分段管理方式；段页式管理方式。</p>
<p>d)虚拟内存基本概念和局部性原理；缺页中断；地址变换过程；</p>
<p>e)页面置换算法：最佳置换算法(OPT)、先进先出置换算法(FIFO)、最近最少使用置换算法(LRU)、时钟置换算法(CLOCK)；工作集模型。</p>
<p>4.设备管理</p>
<p>a) I/O控制方式：程序控制、中断、DMA、通道；缓冲技术；假脱机技术(SPOOLing)。</p>
<p>5.文件系统</p>
<p>a)文件与文件系统的基本概念；组织方式；文件控制块；目录结构；文件存取控制；文件系统层次结构。</p>
<p>b）磁盘的结构；磁盘调度算法；廉价冗余磁盘阵列。</p>
<h5 id="计算机网络部分的考试大纲（40分）"><a href="#计算机网络部分的考试大纲（40分）" class="headerlink" title="计算机网络部分的考试大纲（40分）"></a>计算机网络部分的考试大纲（40分）</h5><p>（一）可参考书目</p>
<p>1、《计算机网络》(第7版)，谢希仁编著，电子工业出版社，2017</p>
<p>2、《计算机网络》(第5版)，Andrew S. Tanenbaum，严伟，潘爱民译，清华大学出版社，2012</p>
<p>（二）复习内容</p>
<p>1、计算机网络概述</p>
<p>(1)计算机网络定义与分类</p>
<p>(2)计算机网络体系结构</p>
<p>(3)网络标准化工作及相关组织</p>
<p>2、物理层</p>
<p>(1)物理层的基本概念</p>
<p>(2)数据通信的基础知识</p>
<p>(3)传输介质及其特性</p>
<p>(4)信道复用技术</p>
<p>(5)数字传输系统</p>
<p>(6)宽带接入技术</p>
<p>3、数据链路层</p>
<p>(1)数据链路层功能和设计要点</p>
<p>(2)错误检测和纠正</p>
<p>(3)基本数据链路协议，包括：停止-等待协议、后退N帧协议和选择重传协议；</p>
<p>(4)滑动窗口协议</p>
<p>(5)点对点协议PPP</p>
<p>(6)介质访问控制协议，包括介质访问控制基本概念、协议分类、CSMA/CD协议；</p>
<p>(7)以太网，包括IEEE局域网标准、以太网、高速以太网技术；</p>
<p>(8)局域网互连技术，包括物理层及数据链路层互连技术、网桥概念和工作原理、局域网交换机工作原理；</p>
<p>(9) 无线局域网(IEEE802.11)基本知识，包括CSMA/CA协议原理等。</p>
<p>4、网络层</p>
<p>(1)网络层提供的两种服务</p>
<p>(2) IP协议</p>
<p>(3)划分子网和构造超网</p>
<p>(4) ICMP协议</p>
<p>(5)路由算法及协议，包括路由算法分类、距离向量路由算法及RIP协议、链路状态路由算法及OSPF协议、BGP基本原理；</p>
<p>(6) IP组播基本原理、特点及用途</p>
<p>(7)网络地址转换NAT原理</p>
<p>(8) IPv6基本知识，包括：IPv6特点、地址、包结构等</p>
<p>5、传输层</p>
<p>(1)传输层功能及提供的服务</p>
<p>(2) UDP协议</p>
<p>(3) TCP协议，包括：报文段格式、可靠传输、流量控制、拥塞控制和连接管理。</p>
<p>6、应用层</p>
<p>(1)套接字编程接口</p>
<p>(2)域名系统DNS</p>
<p>(3)文件传送协议</p>
<p>(4)万维网WWW原理</p>
<p>(5)电子邮件系统构成与协议</p>
<h3 id="CSP考试"><a href="#CSP考试" class="headerlink" title="CSP考试"></a>CSP考试</h3><p>发现北航计算机机考淘汰不留情面，但是如果考了CSP可以免机试。</p>
<h4 id="报名"><a href="#报名" class="headerlink" title="报名"></a>报名</h4><p>2020年三次CCF CSP认证的时间安排为：3月15日，9月20日，12月13日。<br>非计算机协会会员300元/次，会员180元/次（学生会员需缴纳50元/年的会费），相当于一年可以打三次折。</p>
<h4 id="考试基本信息"><a href="#考试基本信息" class="headerlink" title="考试基本信息"></a>考试基本信息</h4><p>第一题：一般是数值方面的问题（一群整数）基本一个for循环可以解决的了，比较简单，学过C语言基本可以得分。推荐哈工大苏小红的C语言程序设计，这本书相对来说比较高阶，会有涉及到链表操作，这对学习数据结构很有帮助。</p>
<p>第二题：一般是接近的复杂度，最少得需要两个For循环，要说两个For循环也不难，难就难在一般是时序题、通常要排序，而且要用到多元数据。比如18年3月的第二题碰撞的小球，</p>
<p>数轴上有一条长度为L（L为偶数)的线段，左端点在原点，右端点在坐标L处。有n个不计体积的小球在线段上，开始时所有的小球都处在偶数坐标上，速度方向向右，速度大小为1单位长度每秒。<br>当小球到达线段的端点（左端点或右端点）的时候，会立即向相反的方向移动，速度大小仍然为原来大小。<br>当两个小球撞到一起的时候，两个小球会分别向与自己原来移动的方向相反的方向，以原来的速度大小继续移动。<br>现在，告诉你线段的长度L，小球数量n，以及n个小球的初始位置，请你计算t秒之后，各个小球的位置。</p>
<p>其中会涉及到长度、个数、时间、速度等不同单位的数据。</p>
<p>第三题：一般会是字符串的处理，而且一般是对复杂文本的处理，这里最好使用C++里边的String类做字符串处理，如果要自己用c语言写字符串处理函数，不仅不一定写对，而且还会相当麻烦，浪费时间。</p>
<p>第四题：一般会用到高等数据结构，比如树、图，而且需要用到的算法也不是课本上学到的简单算法，得用更高级一点的时间、空间效率更高一点的算法。</p>
<p>第五题：一般是纯粹的算法题。但是算法难度一般是ACM级别的，所以经过ACM训练的训练员也不一定能拿满分。<br>[原文链接]<a href="https://blog.csdn.net/u013495762/article/details/82870455" target="_blank" rel="noopener">https://blog.csdn.net/u013495762/article/details/82870455</a></p>
<p><a href="https://csp.ccf.org.cn/csp/index.action" target="_blank" rel="noopener">CSP认证管理系统（报名入口）</a></p>
<h4 id="考前准备"><a href="#考前准备" class="headerlink" title="考前准备"></a>考前准备</h4><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><h5 id="训练题："><a href="#训练题：" class="headerlink" title="训练题："></a>训练题：</h5><ol>
<li><a href="https://www.nowcoder.com/ta/acm-solutions" target="_blank" rel="noopener">ACM题库</a></li>
<li><a href="http://118.190.20.162/home.page" target="_blank" rel="noopener">CCF-CSP真题</a>，总结每年题型。</li>
<li><a href="https://blog.csdn.net/wu_xin1/article/details/100370518" target="_blank" rel="noopener">CCF-CSP刷题网站推荐</a></li>
</ol>
<h5 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h5><p>CCF—CSP考试是可以带书进去的 </p>
<ol>
<li>如果对语法掌握不熟练的话可以带一本编程语言书。</li>
<li>最好带一本C++ STL方面的书（是STL工具书，STL怎么使用的书，而不是STL源码分析类的书）STL方面的书可以帮助我们又快有准的写出想要的排序等代码，如果我们当场写的话会很浪费时间。</li>
<li>算法书，有资源的可以找一本ACM培训竞赛书，前面也说过书上的算法对付考试是不行的。需要更好的算法。<h5 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h5></li>
</ol>
<ul>
<li>每天写程序，不能手生，最少得2h，适应4h的考试时间。</li>
<li><p>技巧篇：说明——CCF-CSP是机器阅卷评分，题目规定有代码运行用时，超时的测试用例是没有分的。给分目前最小单位是10分，按照对你的代码的一个测试，比如从10到100这个规模来20%测试用例，100-1000来30%测试用例，1000-10000来50%测试用例，通过一个测试用例给10分，也就是说（1）我们自己测试对的在评分的时候不一定能拿满分；（2）我们在3、4、5题上也可以通过实现简单数据集上的代码而得分，而不是一分得不了，<strong>3、4、5题我们可以从最小规模开始，可以排除特殊情况来写代码，只要简单的测试用例能通过我们就能得分。</strong></p>
</li>
<li><p>首先不能再出基础性错误，输出严格保证更例子一样。</p>
</li>
<li><p>着重锻炼测试样例的能力，提交上去当时没有成绩。</p>
</li>
<li><p>锻炼单步调试能力。</p>
</li>
</ul>
<h3 id="考研408"><a href="#考研408" class="headerlink" title="考研408"></a>考研408</h3><p><img src="408.jpg" alt="408"></p>
<p>408四门专业课所占比例<br><img src="408_1.jpg" alt="408分值分布"></p>
<h4 id="科目考察"><a href="#科目考察" class="headerlink" title="科目考察"></a>科目考察</h4><ol>
<li>数据结构的考试内容有哪些？重点和难点怎么把握？（难度★★★★）</li>
</ol>
<p>数据结构的考试内容包括：线性表、栈、队列和数组、树和二叉树、图、查找和内部排序。首先要深刻理解数据结构的三要素：逻辑结构、存储结构以及在其上定义的各种基本操作，</p>
<ol>
<li>计算机组成原理的考试内容有哪些？如何复习?（难度★★★★★）</li>
</ol>
<p>计算机组成原理的考试内容包括：计算机系统概述、数据的表示和运算、存储器层次结构、指令系统、中央处理器、总线、输入/输出系统。</p>
<p>重点掌握单处理机计算机系统中各个部件的组成结构和基本工作原理。</p>
<ol>
<li>计算机操作系统的考试内容有哪些？重点和难点是什么？（难度★★★）</li>
</ol>
<p>计算机操作系统的考试内容主要包括：操作系统概述、进程管理、内存管理、文件管理和输入/输出管理。重点放在掌握基本概念和基本原理上，包括一些常用的算法。难点主要是运用操作系统的基本原理来分析和解决具体问题。</p>
<ol>
<li>计算机网络的考试内容有哪些？如何复习?（难度★★★）</li>
</ol>
<p>计算机网络的考试内容主要围绕TCP/IP协议层次的具体展开，包括以下内</p>
<p>容：物理层、数据链路层、网络层、传输层、应用层。复习时要注意按照层进行知识点的复习和总结。</p>
<p>这四门专业课之间有一定的内在联系，如果是初学者，必须先学习完数据结构和组成原理后再学习操作系统，否则有些概念和原理难以理解。</p>
<p>重点放在数据结构和组成原理上，尤其数据结构更要多花一些时间；操作系统和计算机网络的很多知识点需要在理解的基础上进行记忆，相对来说容易一些。当然难易程度是相对的，具体情况也要因人而异，灵活安排。</p>
<ol>
<li>专业课什么时候开始复习比较好？</li>
</ol>
<p>一般而言，专业基础比较好的考生，在3-8月更多关注英语、数学、政治这三门课程，等到9月才开始复习专业课。如果基础并不怎么好，建议7月就开始复习，不然到时候没办法合理分配时间。对于应届生来说，尤其是跨专业的应届生，一定要尽早准备，越早越好。</p>
<ol>
<li>408到底应该考多少分？</li>
</ol>
<p>这个要看学校，并不是所有学校都要求看很高的分数。由于408题目比较难，因此你的理想分数可以定到100分以上，当然大牛就冲击120以上吧，每年408专业课能考120以上的全国屈指可数。</p>
]]></content>
      <categories>
        <category>考研计划</category>
      </categories>
      <tags>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>语料库搭建</title>
    <url>/2020/09/20/%E8%AF%AD%E6%96%99%E5%BA%93%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="语料库准备"><a href="#语料库准备" class="headerlink" title="语料库准备"></a>语料库准备</h3><h4 id="双语网站有："><a href="#双语网站有：" class="headerlink" title="双语网站有："></a>双语网站有：</h4><ol>
<li><a href="https://language.chinadaily.com.cn/news_bilingual/" target="_blank" rel="noopener">https://language.chinadaily.com.cn/news_bilingual/</a></li>
<li><a href="http://www.china.org.cn/chinese/node_7160004.htm" target="_blank" rel="noopener">http://www.china.org.cn/chinese/node_7160004.htm</a></li>
<li><a href="https://www.fmprc.gov.cn/web/" target="_blank" rel="noopener">https://www.fmprc.gov.cn/web/</a></li>
<li><a href="http://www.kekenet.com/Article/media/economist/" target="_blank" rel="noopener">http://www.kekenet.com/Article/media/economist/</a></li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th>网站代号</th>
<th>名称</th>
<th>简要介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
</tr>
<tr>
<td>2</td>
</tr>
<tr>
<td>3</td>
</tr>
<tr>
<td>4</td>
</tr>
</tbody>
</table>
</div>
<h4 id="爬取内容"><a href="#爬取内容" class="headerlink" title="爬取内容"></a>爬取内容</h4><h4 id="双语书目："><a href="#双语书目：" class="headerlink" title="双语书目："></a>双语书目：</h4><p>涉及到已经出版的书本中英文的对照，英译中，中译英版本：</p>
<ol>
<li>英译中书籍：哈利波特</li>
<li>中译英书籍：三体</li>
</ol>
<h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><h4 id="数据库设计理念"><a href="#数据库设计理念" class="headerlink" title="数据库设计理念"></a>数据库设计理念</h4><ul>
<li><a href="https://www.cnblogs.com/cxyyh/p/11148991.html" target="_blank" rel="noopener">数据库设计</a></li>
<li><p>充分了解需求</p>
<ul>
<li>能够储存大量中英文对应句段和重点单词</li>
<li>能够快速查找单词所在的句子，并且展示</li>
<li>单词的类别能够展示出来<h4 id="7大常用开源数据库利弊全对比"><a href="#7大常用开源数据库利弊全对比" class="headerlink" title="7大常用开源数据库利弊全对比"></a><a href="https://zhuanlan.zhihu.com/p/47471253" target="_blank" rel="noopener">7大常用开源数据库利弊全对比</a></h4></li>
</ul>
</li>
</ul>
<p>总结：<br>|数据库名称|优点|<br>|—-|—-|<br>|PostgreSQL, MySQL, Oracle|数据库：存储数据，以便自己或其他应用程序之后能再次找到|<br>|Redis, Memcached|缓存：记住开销昂贵操作的结果，加快读取速度|<br>|ElasticSearch|搜索索引：允许用户按照关键字搜索数据，或以各种方式对数据进行过滤|<br>|Kafka, Flink, Storm|流处理：向其他进程发送消息，进行异步处理<br>|Hadoop|批处理：定期处理累积的大批量数据|</p>
<h5 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h5><div class="table-container">
<table>
<thead>
<tr>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>创建自定义数据类型和查询方式</td>
<td>MVCC系统需要定期“清理”</td>
</tr>
<tr>
<td>框架允许定义和创建自定义数据类型</td>
<td>高交易率环境中的问题</td>
</tr>
<tr>
<td>以十几种编程语言运行存储过程</td>
<td>由强大的社区发展起来</td>
</tr>
<tr>
<td>GiST(广义搜索树)系统</td>
<td>该机需要更大的努力</td>
</tr>
<tr>
<td>提供不同的排序和搜索算法</td>
</tr>
</tbody>
</table>
</div>
<p><a href="https://www.psycopg.org/docs/index.html" target="_blank" rel="noopener">PostgreSQL database adapter for Python</a></p>
<h5 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h5><p>MongoDB是介于关系数据库和非关系数据库之间的产品。他支持的数据结构非常松散，是类似于json的bjson格式，因此可以存储比较复杂的数据类型。</p>
<p>MongoDB最大的特点是它支持的查询语言非常强大，其语法类似于面向对司昂的查询语言。</p>
<ol>
<li><p>安装Mongodb</p>
<ol>
<li><a href="https://www.mongodb.com/dr/fastdl.mongodb.org/windows/mongodb-windows-x86_64-4.4.1-rc2-signed.msi/download" target="_blank" rel="noopener">网址</a></li>
<li><a href="https://www.cnblogs.com/chy18883701161/p/11100560.html" target="_blank" rel="noopener">安装指导</a></li>
<li><a href="https://www.cnblogs.com/chy18883701161/category/1491084.html" target="_blank" rel="noopener">Mongodb介绍</a></li>
</ol>
</li>
<li><p>上手使用</p>
<ol>
<li>在电脑上下载Mongodb,同时<code>pip install pymongodb</code></li>
<li><p>连接mongodb</p>
<ol>
<li>第一种是使用keyword argument(关键字变量)，另一种是MongoDB URI format(URI参数)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">client = MongoClient()</span><br><span class="line"><span class="comment"># keyword argument</span></span><br><span class="line">client = MongoClient(<span class="string">'localhost'</span>,<span class="number">27017</span>)</span><br><span class="line"><span class="comment"># MongoDB URI</span></span><br><span class="line">client = MongoClient(<span class="string">'mongodb://localhost:27017/'</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>用户密码验证（我没有设置密码）</p>
<ul>
<li><p>设置MongoDB密码</p>
<ul>
<li><a href="https://www.cnblogs.com/zilongmao/p/11428864.html" target="_blank" rel="noopener">手把手教你设置MongoDB密码</a></li>
<li>在mongo.exe中输入的命令<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有的数据库</span></span><br><span class="line">show dbs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入admin数据库</span></span><br><span class="line">use admi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建管理员账户</span></span><br><span class="line">db.createUser(&#123; user: <span class="string">"admin"</span>, pwd: <span class="string">"password"</span>, roles: [&#123; role: <span class="string">"userAdminAnyDatabase"</span>, db: <span class="string">"admin"</span> &#125;] &#125;) </span><br><span class="line"><span class="comment"># mongodb中的用户是基于身份role的，该管理员账户的role是 userAdminAnyDatabase。admin用户用于管理账户，不能进行关闭数据库等操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建root</span></span><br><span class="line">db.createUser(&#123;user: <span class="string">"root"</span>,pwd: <span class="string">"123456"</span>, roles: [ &#123; role: <span class="string">"root"</span>, db: <span class="string">"admin"</span> &#125; ]&#125;)</span><br><span class="line"><span class="comment"># 创建一个超级管理员root, root角色用于关闭数据库。</span></span><br><span class="line">db.shutdownServer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户自己的数据库管理角色</span></span><br><span class="line">use suriadb</span><br><span class="line">db.createUser(&#123;user: <span class="string">"suria"</span>,pwd: <span class="string">"123456"</span>,roles: [ &#123; role: <span class="string">"dbOwner"</span>, db: <span class="string">"suriadb"</span> &#125; ]&#125;)</span><br><span class="line"><span class="comment"># role: "dbOwner"代表数据库所有者角色，拥有最高该数据库最高权限。比如新建索引等当账号管理员和超级管理员，可以为自己的数据库创建用户了。（坑）这时候一定，一定要切换到所在数据库上去创建用户，不然创建的用户还是属于admin。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户</span></span><br><span class="line">show users</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line"><span class="comment"># 删除用户必须由账号管理员来删除，所以切换到admin角色</span></span><br><span class="line">use admin</span><br><span class="line">db.auth(<span class="string">"admin"</span>,<span class="string">"password"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除单个用户</span></span><br><span class="line">db.system.users.remove(&#123;user:<span class="string">"xxx"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有用户</span></span><br><span class="line">db.system.users.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure>
至此可以使用<code>mongodb://youruser:yourpassword2@localhost/yourdatabase</code>来连接你的mongodb。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">uri = <span class="string">"mongodb://suria:123456@localhost:27017/suriadb"</span></span><br><span class="line">client = MongoClient(uri)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>基本操作</p>
<ul>
<li><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md" target="_blank" rel="noopener">MongoDB 极简实践入门</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在mongo.exe中</span></span><br><span class="line"><span class="comment"># 展示当前的数据库</span></span><br><span class="line">show dbs</span><br><span class="line"><span class="comment"># 创建或者使用已有的数据库</span></span><br><span class="line">use new</span><br><span class="line"><span class="comment"># 在数据库中添加集合</span></span><br><span class="line">db.createCollection(<span class="string">'dataset'</span>)</span><br><span class="line"><span class="comment"># 展示当前数据库的集合</span></span><br><span class="line">show collections</span><br><span class="line"><span class="comment"># 删除dataset集合</span></span><br><span class="line">db.dataset.drop()</span><br><span class="line"><span class="comment"># 集合（collecion）类似于SQL的表格（table）</span></span><br></pre></td></tr></table></figure>
<p>剩下的操作都讲的非常详细，但是我不知直接在shell里面操作，应该多关注pymongo的包。</p>
</li>
<li><p>pymongo使用</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="工具学习"><a href="#工具学习" class="headerlink" title="工具学习"></a>工具学习</h4><h5 id="pyhanlp学习"><a href="#pyhanlp学习" class="headerlink" title="pyhanlp学习"></a>pyhanlp学习</h5><ul>
<li><p>安装篇</p>
<ul>
<li><a href="https://blog.csdn.net/sinat_34328764/article/details/89601048" target="_blank" rel="noopener">pyhanlp,HanLP安装与使用</a></li>
</ul>
<ol>
<li>安装Java和Visual C++环境<ol>
<li><a href="https://blog.csdn.net/write6/article/details/79136388" target="_blank" rel="noopener">JDK安装Java环境变量配置</a></li>
<li>根据上面安装还会有些小错误，然后<a href="https://blog.csdn.net/beyond9305/article/details/83211379" target="_blank" rel="noopener">改错</a></li>
</ol>
</li>
<li>安装Jpype<ol>
<li>推荐安装<a href="https://www.anaconda.com/products/individual/get-started" target="_blank" rel="noopener">anacoda</a>环境。<ul>
<li><a href="https://blog.csdn.net/qq_38161040/article/details/87929616" target="_blank" rel="noopener"> error: Microsoft Visual C++ 14.0 is required.</a>  </li>
<li>我选择的是直接安装Microsoft Visual C++ Build Tool 2015.</li>
</ul>
</li>
</ol>
</li>
<li>安装Jpype <code>conda install -c conda-forge jpype1</code></li>
<li>在命令窗口<code>import pyhanlp</code>还会直接下载data.(总之就是过程很麻烦)</li>
<li>最后显示下载的各种零件版本不匹配，实在是崩溃。只能重新安装python，配置环境变量，问题重重。</li>
<li><a href="https://www.cnblogs.com/monozxy/p/11419799.html" target="_blank" rel="noopener">git不是内部或外部命令，也不是可运行的程序</a></li>
</ol>
</li>
<li><p>安装虚拟环境</p>
<ul>
<li><p>感悟：<br>直到现在我才感受到虚拟机的重要性，以及便利。从我开始不停地安装python，报错，改错，卸载，转为anaconda，继而发现问题层出不穷。最关键的是我发现Pycharm中设置编码器竟然没有办法直接安装pyhanlp这个模板包，终于，转战虚拟环境。</p>
<p>其实虚拟环境中，都有python.exe和各种模板包支持各种操作。<br><a href="https://www.cnblogs.com/xuehuiping/p/12323080.html" target="_blank" rel="noopener">安装pyhanlp</a>，我觉得一开始不用git clone。</p>
</li>
<li><p><a href="https://blog.csdn.net/sinat_41898105/article/details/80714974" target="_blank" rel="noopener">Python如何实现虚拟环境的创建</a>，讲的非常详细。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在cmd终端运行</span></span><br><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualenvwrapper-win</span><br><span class="line"><span class="comment"># 配置windows环境变量：新建系统变量，变量名为WORKON_HOME，路径可以自行选择（本人使用路径D:\PythonVirtualenv）</span></span><br><span class="line"><span class="comment"># 查看虚拟环境配置是否成功，打开cmd输入lsvirtualenv，就可以查看虚拟环境所存在的目录</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建虚拟环境<code>mkvirtualenv test</code>这个虚拟环境名称(test)可以随意起），创建成功后直接进入虚拟环境test</li>
<li>使用命令<code>workon 文件名</code>进行切换虚拟环境。</li>
<li><code>deactivate</code>退出当前虚拟环境</li>
<li><code>rmvirtualenv test</code>删除虚拟环境。</li>
<li><p>到虚拟环境目录下，用<code>activate</code>激活虚拟环境。</p>
<h5 id="前端构建"><a href="#前端构建" class="headerlink" title="前端构建"></a>前端构建</h5><p><a href="https://blog.csdn.net/weixin_34849724/article/details/88813445" target="_blank" rel="noopener">前端ui组件库</a></p>
</li>
<li><p>前端UI</p>
</li>
</ul>
<ol>
<li>认识gulp.js。<ul>
<li>gulp是一个开源JavaScript工具包，用作前端Web开发中的流构建系统，基于Node.js和npm的任务运行器，用于自动化Web开发中涉及的耗时和重复性任务，如缩小，连接，缓存清除，单元测试，linting，优化等。<a href="https://www.leiue.com/what-is-gulp-js" target="_blank" rel="noopener">引用</a> (我还是尝试一下，说实话，还是没理解。)</li>
<li><a href="https://blog.csdn.net/xllily_11/article/details/51320002" target="_blank" rel="noopener">Gulp能做什么，前端装逼为何要用它</a><ol>
<li>JavaScript和CSS属于静态文件，如果地址不变，浏览器会缓存这些文件，那就意味着当我们需要改JavaScript或者CSS文件的时候，即使我们后端改了，那么客户端也是看不到。</li>
<li>解决JavaScript和CSS的在页面中的顺序问题。</li>
<li>性能优化。</li>
</ol>
</li>
<li><a href="https://www.jianshu.com/p/35571124770f" target="_blank" rel="noopener">Gulp.js实践详解__基于Gulp的多页面应用实践指南</a></li>
<li>这个管理工具对我来说还是有点难弄，[<a href="https://github.com/og/gulp-book#readme" target="_blank" rel="noopener">https://github.com/og/gulp-book#readme</a>]</li>
</ul>
</li>
<li><p>开始配置环境了。</p>
<ul>
<li>配置node环境<ul>
<li><a href="https://www.cnblogs.com/li150dan/p/10451772.html" target="_blank" rel="noopener">安装node.js教程</a>，这一篇讲解的非常清晰易懂，跟着一步步安装就行了。</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/xqbiii/p/8406978.html" target="_blank" rel="noopener">安装gulp</a> </p>
<ul>
<li>需要在gulp项目中再单独安装一次gulp，先切换到该目录下，再输入命令<code>npm install gulp</code>。</li>
<li><p>创建gulpfile.js文件在该目录下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line">gulp.task(<span class="string">'task1'</span>, done=&gt;&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">      done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'task2'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="built_in">console</span>.log(<span class="string">'hello gulp'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// gulp.task('task3', function()&#123;</span></span><br><span class="line"><span class="comment">//       console.log('hello world');</span></span><br><span class="line"><span class="comment">//       done(); // done is not defined.</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'my-task'</span>, gulp.series(<span class="string">"task1"</span>,<span class="string">"task2"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"AB"</span>)</span><br><span class="line">	done()</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
<p>在命令窗口输入，<code>gulp my-task</code>。</p>
<p><a href="https://blog.csdn.net/WU5229485/article/details/90173693" target="_blank" rel="noopener">参考: gulp报错：The following tasks did not complete: task_name</a> </p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h5 id="Fastapi与前端结合"><a href="#Fastapi与前端结合" class="headerlink" title="Fastapi与前端结合"></a>Fastapi与前端结合</h5><h6 id="Fastapi学习"><a href="#Fastapi学习" class="headerlink" title="Fastapi学习"></a>Fastapi学习</h6><ul>
<li>优点：高性能，强壮。</li>
<li>安装<code>pip install fastapi</code>.</li>
</ul>
<p>最小白的代码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/")</span></span><br><span class="line"><span class="comment"># async 是一个异步的标志，必须声明。</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"message"</span>: <span class="string">"Helloworld, FastAPI"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line">    uvicorn.run(app, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure></p>
<p>各种安装，尝试进一步的功能。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装模板引擎</span></span><br><span class="line">pip install jinja2</span><br><span class="line"><span class="comment"># 提供静态问价</span></span><br><span class="line">pip install aiofiles</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> starlette.requests <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> starlette.templating <span class="keyword">import</span> Jinja2Templates</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line">templates = Jinja2Templates(directory=<span class="string">"templates"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/")</span></span><br><span class="line"><span class="comment"># async 是一个异步的标志，必须声明。</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(request: Request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> templates.TemplateResponse(<span class="string">'index.html'</span>, &#123;<span class="string">"request"</span>: request, <span class="string">"respond"</span>:<span class="string">"Hi"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line">    uvicorn.run(app, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure>
<p>在这个python文件同目录下创建一个文件夹，文件夹名为templates，在该文件夹下新建index.html。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Flask<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;respond&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>输入表格内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> starlette.templating <span class="keyword">import</span> Jinja2Templates</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Form</span><br><span class="line"><span class="keyword">from</span> starlette.requests <span class="keyword">import</span> Request</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line">templates = Jinja2Templates(directory=<span class="string">"templates"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post("/user/")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_update_files</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">   request: Request,    </span></span></span><br><span class="line"><span class="function"><span class="params">   username: str = Form<span class="params">(...)</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">   password: int = Form<span class="params">(...)</span>,     </span></span></span><br><span class="line"><span class="function"><span class="params">   )</span>:</span></span><br><span class="line">    <span class="comment"># Form函数功能：对HTML页面传入数据进行接收和解析，   找到对应变量</span></span><br><span class="line">    print(<span class="string">"username"</span>,username)</span><br><span class="line">    print(<span class="string">"password"</span>,password)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> templates.TemplateResponse(</span><br><span class="line">       <span class="string">'post.html'</span>,    </span><br><span class="line">       &#123;<span class="string">'request'</span>: request, </span><br><span class="line">       <span class="string">'username'</span>: username,    </span><br><span class="line">       <span class="string">'password'</span>: password&#125;</span><br><span class="line">       )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(request: Request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> templates.TemplateResponse(</span><br><span class="line">       <span class="string">'post.html'</span>,    </span><br><span class="line">       &#123;<span class="string">'request'</span>: request&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line">    uvicorn.run(app, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件名为post. --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span>Post test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user/"</span> <span class="attr">method</span>=<span class="string">"Post"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">label</span>&gt;</span>username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">label</span>&gt;</span>password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Flask<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; password &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>上传文件代码<ul>
<li></li>
</ul>
</li>
</ul>
<h3 id="设计思考"><a href="#设计思考" class="headerlink" title="设计思考"></a>设计思考</h3><h4 id="语料库网站对比"><a href="#语料库网站对比" class="headerlink" title="语料库网站对比"></a>语料库网站对比</h4><ol>
<li>了解现有网页语料库</li>
</ol>
<p>根据语料库的特点以及实现的功能来分析。</p>
<ul>
<li>英国当代英语语料库（COCA）<ul>
<li><a href="https://www.english-corpora.org/coca/" target="_blank" rel="noopener">网址</a></li>
<li>介绍：<ul>
<li>目前最大的免费英语语料库。</li>
<li>它由包含5.2亿词的文本构成，这些文本由口语、小说、流行杂志、报纸以及学术文章五种不同的文体构成。</li>
</ul>
</li>
<li>特点：<ul>
<li>展示查找词所在的句子（短），点击可拓展展示一段句子。 </li>
<li>提供单词词频信息。</li>
<li>提供模糊搜索和短语搭配。</li>
<li>分为不同的文体类别。</li>
<li>可以对两个此进行比较，搭配上的对比，比如查找距离这两个词相同距离的单词。</li>
<li>匹配句式（正则）</li>
<li>点击可跳转网页（谷歌翻译）翻译所查单词。</li>
</ul>
</li>
</ul>
</li>
<li>DeepL<ul>
<li><a href="https://www.linguee.com/" target="_blank" rel="noopener">网址</a></li>
<li></li>
</ul>
</li>
</ul>
<p>参考网址：</p>
<p><a href="https://zhuanlan.zhihu.com/p/28838654" target="_blank" rel="noopener">怎样利用COCA语料库提升英语用词水平</a></p>
<h5 id="了解语料库的发展背景"><a href="#了解语料库的发展背景" class="headerlink" title="了解语料库的发展背景"></a>了解语料库的发展背景</h5><p>看相关的论文</p>
<h4 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h4><h5 id="基础功能"><a href="#基础功能" class="headerlink" title="基础功能"></a>基础功能</h5><h5 id="拓展功能"><a href="#拓展功能" class="headerlink" title="拓展功能"></a>拓展功能</h5><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ol>
<li>设计出灵活性很高的代码。</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th>要求</th>
<th>实现接口</th>
<th>返回内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>爬取网页</td>
<td></td>
<td></td>
</tr>
<tr>
<td>中英文对应</td>
<td></td>
<td></td>
</tr>
<tr>
<td>切分句子</td>
<td></td>
<td></td>
</tr>
<tr>
<td>提取关键词</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>数据库的设计尽量完备，便于修改。<ol>
<li>能够有与json文件或excel表格直接关联的上传覆盖机制</li>
<li>尽量考虑到基本功能，拓展类的就先搁置</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
